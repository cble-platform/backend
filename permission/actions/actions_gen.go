// Code generated by github.com/cble-platform/cble-backend, DO NOT EDIT.

package actions

import (
	"encoding/json"
	"fmt"
	"io"
	"strings"

	"github.com/99designs/gqlgen/graphql"
)

type PermissionAction string

// The following is an enum for use in the GraphQL Schema
/*
enum Action {
	"""
	List all blueprints (only compatible with wildcard ID *)
	"""
  blueprint_list
	"""
	Create blueprints (only compatible with wildcard ID *)
	"""
  blueprint_create
	"""
	Get a given blueprint
	"""
  blueprint_get
	"""
	Update a given blueprint
	"""
  blueprint_update
	"""
	Delete a given blueprint
	"""
  blueprint_delete
	"""
	Deploy a given blueprint
	"""
  blueprint_deploy
	"""
	List all deployments (only compatible with wildcard ID *)
	"""
  deployment_list
	"""
	Get a given deployment
	"""
  deployment_get
	"""
	Update a given deployment
	"""
  deployment_update
	"""
	Delete a given deployment
	"""
  deployment_delete
	"""
	Destroy a given deployment
	"""
  deployment_destroy
	"""
	Redeploy a given deployment
	"""
  deployment_redeploy
	"""
	Control the power state of resources in a given deployment
	"""
  deployment_power
	"""
	Get the console of resources in a given deployment
	"""
  deployment_console
	"""
	List all groups (only compatible with wildcard ID *)
	"""
  group_list
	"""
	Create groups
	"""
  group_create
	"""
	Get a given group
	"""
  group_get
	"""
	Update a given group
	"""
  group_update
	"""
	Delete a given group
	"""
  group_delete
	"""
	List all permissions (only compatible with wildcard ID *)
	"""
  permission_list
	"""
	Get a given permission
	"""
  permission_get
	"""
	Grant permissions (only compatible with wildcard ID *)
	"""
  permission_grant
	"""
	Revoke permissions (only compatible with wildcard ID *)
	"""
  permission_revoke
	"""
	List all providers (only compatible with wildcard ID *)
	"""
  provider_list
	"""
	Create providers
	"""
  provider_create
	"""
	Get a given provider
	"""
  provider_get
	"""
	Update a given provider
	"""
  provider_update
	"""
	Delete a given provider
	"""
  provider_delete
	"""
	Load a given provider
	"""
  provider_load
	"""
	Unload a given provider
	"""
  provider_unload
	"""
	Configure a given provider
	"""
  provider_configure
	"""
	List all users (only compatible with wildcard ID *)
	"""
  user_list
	"""
	Create users
	"""
  user_create
	"""
	Get a given user
	"""
  user_get
	"""
	Update a given user
	"""
  user_update
	"""
	Delete a given user
	"""
  user_delete
}
*/

const (
	// -----------------------------------------------------------------
	// Blueprint
	// -----------------------------------------------------------------

	// List all blueprints (only compatible with wildcard ID *)
	ActionBlueprintList PermissionAction = "blueprint_list"
	// Create blueprints (only compatible with wildcard ID *)
	ActionBlueprintCreate PermissionAction = "blueprint_create"
	// Get a given blueprint
	ActionBlueprintGet PermissionAction = "blueprint_get"
	// Update a given blueprint
	ActionBlueprintUpdate PermissionAction = "blueprint_update"
	// Delete a given blueprint
	ActionBlueprintDelete PermissionAction = "blueprint_delete"
	// Deploy a given blueprint
	ActionBlueprintDeploy PermissionAction = "blueprint_deploy"
	// -----------------------------------------------------------------
	// Deployment
	// -----------------------------------------------------------------

	// List all deployments (only compatible with wildcard ID *)
	ActionDeploymentList PermissionAction = "deployment_list"
	// Get a given deployment
	ActionDeploymentGet PermissionAction = "deployment_get"
	// Update a given deployment
	ActionDeploymentUpdate PermissionAction = "deployment_update"
	// Delete a given deployment
	ActionDeploymentDelete PermissionAction = "deployment_delete"
	// Destroy a given deployment
	ActionDeploymentDestroy PermissionAction = "deployment_destroy"
	// Redeploy a given deployment
	ActionDeploymentRedeploy PermissionAction = "deployment_redeploy"
	// Control the power state of resources in a given deployment
	ActionDeploymentPower PermissionAction = "deployment_power"
	// Get the console of resources in a given deployment
	ActionDeploymentConsole PermissionAction = "deployment_console"
	// -----------------------------------------------------------------
	// Group
	// -----------------------------------------------------------------

	// List all groups (only compatible with wildcard ID *)
	ActionGroupList PermissionAction = "group_list"
	// Create groups
	ActionGroupCreate PermissionAction = "group_create"
	// Get a given group
	ActionGroupGet PermissionAction = "group_get"
	// Update a given group
	ActionGroupUpdate PermissionAction = "group_update"
	// Delete a given group
	ActionGroupDelete PermissionAction = "group_delete"
	// -----------------------------------------------------------------
	// Permission
	// -----------------------------------------------------------------

	// List all permissions (only compatible with wildcard ID *)
	ActionPermissionList PermissionAction = "permission_list"
	// Get a given permission
	ActionPermissionGet PermissionAction = "permission_get"
	// Grant permissions (only compatible with wildcard ID *)
	ActionPermissionGrant PermissionAction = "permission_grant"
	// Revoke permissions (only compatible with wildcard ID *)
	ActionPermissionRevoke PermissionAction = "permission_revoke"
	// -----------------------------------------------------------------
	// Provider
	// -----------------------------------------------------------------

	// List all providers (only compatible with wildcard ID *)
	ActionProviderList PermissionAction = "provider_list"
	// Create providers
	ActionProviderCreate PermissionAction = "provider_create"
	// Get a given provider
	ActionProviderGet PermissionAction = "provider_get"
	// Update a given provider
	ActionProviderUpdate PermissionAction = "provider_update"
	// Delete a given provider
	ActionProviderDelete PermissionAction = "provider_delete"
	// Load a given provider
	ActionProviderLoad PermissionAction = "provider_load"
	// Unload a given provider
	ActionProviderUnload PermissionAction = "provider_unload"
	// Configure a given provider
	ActionProviderConfigure PermissionAction = "provider_configure"
	// -----------------------------------------------------------------
	// User
	// -----------------------------------------------------------------

	// List all users (only compatible with wildcard ID *)
	ActionUserList PermissionAction = "user_list"
	// Create users
	ActionUserCreate PermissionAction = "user_create"
	// Get a given user
	ActionUserGet PermissionAction = "user_get"
	// Update a given user
	ActionUserUpdate PermissionAction = "user_update"
	// Delete a given user
	ActionUserDelete PermissionAction = "user_delete"
	// Returned for any potential errors
	ActionUnknown PermissionAction = "unknown"
)

// String strips the object-specific prefix from
func (p PermissionAction) DisplayString() string {
	if before, after, ok := strings.Cut(string(p), "_"); !ok {
		return before
	} else {
		return after
	}
}

var actionMap = map[string]map[string]PermissionAction{
	// Blueprint
	"blueprint": {
		"list":   ActionBlueprintList,
		"create": ActionBlueprintCreate,
		"get":    ActionBlueprintGet,
		"update": ActionBlueprintUpdate,
		"delete": ActionBlueprintDelete,
		"deploy": ActionBlueprintDeploy,
	},
	// Deployment
	"deployment": {
		"list":     ActionDeploymentList,
		"get":      ActionDeploymentGet,
		"update":   ActionDeploymentUpdate,
		"delete":   ActionDeploymentDelete,
		"destroy":  ActionDeploymentDestroy,
		"redeploy": ActionDeploymentRedeploy,
		"power":    ActionDeploymentPower,
		"console":  ActionDeploymentConsole,
	},
	// Group
	"group": {
		"list":   ActionGroupList,
		"create": ActionGroupCreate,
		"get":    ActionGroupGet,
		"update": ActionGroupUpdate,
		"delete": ActionGroupDelete,
	},
	// Permission
	"permission": {
		"list":   ActionPermissionList,
		"get":    ActionPermissionGet,
		"grant":  ActionPermissionGrant,
		"revoke": ActionPermissionRevoke,
	},
	// Provider
	"provider": {
		"list":      ActionProviderList,
		"create":    ActionProviderCreate,
		"get":       ActionProviderGet,
		"update":    ActionProviderUpdate,
		"delete":    ActionProviderDelete,
		"load":      ActionProviderLoad,
		"unload":    ActionProviderUnload,
		"configure": ActionProviderConfigure,
	},
	// User
	"user": {
		"list":   ActionUserList,
		"create": ActionUserCreate,
		"get":    ActionUserGet,
		"update": ActionUserUpdate,
		"delete": ActionUserDelete,
	},
}

// Returns a PermissionAction for a given object and action
func Get(object string, action string) PermissionAction {
	pa, ok := actionMap[strings.ToLower(object)][strings.ToLower(action)]
	if !ok {
		return ActionUnknown
	} else {
		return pa
	}
}

// Values provides list valid values for Enum.
func (PermissionAction) Values() (kinds []string) {
	for _, s := range []PermissionAction{
		ActionBlueprintList,
		ActionBlueprintCreate,
		ActionBlueprintGet,
		ActionBlueprintUpdate,
		ActionBlueprintDelete,
		ActionBlueprintDeploy,
		ActionDeploymentList,
		ActionDeploymentGet,
		ActionDeploymentUpdate,
		ActionDeploymentDelete,
		ActionDeploymentDestroy,
		ActionDeploymentRedeploy,
		ActionDeploymentPower,
		ActionDeploymentConsole,
		ActionGroupList,
		ActionGroupCreate,
		ActionGroupGet,
		ActionGroupUpdate,
		ActionGroupDelete,
		ActionPermissionList,
		ActionPermissionGet,
		ActionPermissionGrant,
		ActionPermissionRevoke,
		ActionProviderList,
		ActionProviderCreate,
		ActionProviderGet,
		ActionProviderUpdate,
		ActionProviderDelete,
		ActionProviderLoad,
		ActionProviderUnload,
		ActionProviderConfigure,
		ActionUserList,
		ActionUserCreate,
		ActionUserGet,
		ActionUserUpdate,
		ActionUserDelete,
		ActionUnknown,
	} {
		kinds = append(kinds, string(s))
	}
	return
}

func MarshalPermissionAction(val PermissionAction) graphql.Marshaler {
	return graphql.WriterFunc(func(w io.Writer) {
		err := json.NewEncoder(w).Encode(val)
		if err != nil {
			panic(err)
		}
	})
}

func UnmarshalPermissionAction(v interface{}) (PermissionAction, error) {
	if m, ok := v.(string); ok {
		return PermissionAction(m), nil
	}

	return ActionUnknown, fmt.Errorf("%T is not a valid action", v)
}
