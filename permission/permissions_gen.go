// Code generated by github.com/cble-platform/cble-backend, DO NOT EDIT.

package permission

import (
	"context"

	"github.com/cble-platform/cble-backend/ent"
	"github.com/cble-platform/cble-backend/ent/grantedpermission"
	"github.com/cble-platform/cble-backend/permission/actions"
	"github.com/google/uuid"
)

var AllSubjectActions = map[grantedpermission.ObjectType][]actions.PermissionAction{
	grantedpermission.ObjectTypeBlueprint: {
		actions.ActionBlueprintList,
		actions.ActionBlueprintCreate,
		actions.ActionBlueprintGet,
		actions.ActionBlueprintUpdate,
		actions.ActionBlueprintDelete,
		actions.ActionBlueprintDeploy,
	},
	grantedpermission.ObjectTypeDeployment: {
		actions.ActionDeploymentList,
		actions.ActionDeploymentGet,
		actions.ActionDeploymentUpdate,
		actions.ActionDeploymentDelete,
		actions.ActionDeploymentDestroy,
		actions.ActionDeploymentRedeploy,
		actions.ActionDeploymentPower,
		actions.ActionDeploymentConsole,
	},
	grantedpermission.ObjectTypeGroup: {
		actions.ActionGroupList,
		actions.ActionGroupCreate,
		actions.ActionGroupGet,
		actions.ActionGroupUpdate,
		actions.ActionGroupDelete,
	},
	grantedpermission.ObjectTypePermission: {
		actions.ActionPermissionList,
		actions.ActionPermissionGet,
		actions.ActionPermissionGrant,
		actions.ActionPermissionRevoke,
	},
	grantedpermission.ObjectTypeProvider: {
		actions.ActionProviderList,
		actions.ActionProviderCreate,
		actions.ActionProviderGet,
		actions.ActionProviderUpdate,
		actions.ActionProviderDelete,
		actions.ActionProviderLoad,
		actions.ActionProviderUnload,
		actions.ActionProviderConfigure,
	},
	grantedpermission.ObjectTypeUser: {
		actions.ActionUserList,
		actions.ActionUserCreate,
		actions.ActionUserGet,
		actions.ActionUserUpdate,
		actions.ActionUserDelete,
	},
}

// Blueprint //

// HasBlueprintList reports whether a given user can list all blueprints (only compatible with wildcard id *). Use [github.com/google/uuid.Nil] to denote a wildcard object ID.
func HasBlueprintList(ctx context.Context, client *ent.Client, entUser *ent.User, objectID uuid.UUID) (bool, error) {
	return HasPermission(
		ctx,
		client,
		entUser,
		grantedpermission.ObjectTypeBlueprint,
		objectID,
		actions.ActionBlueprintList,
	)
}

// HasBlueprintCreate reports whether a given user can create blueprints (only compatible with wildcard id *). Use [github.com/google/uuid.Nil] to denote a wildcard object ID.
func HasBlueprintCreate(ctx context.Context, client *ent.Client, entUser *ent.User, objectID uuid.UUID) (bool, error) {
	return HasPermission(
		ctx,
		client,
		entUser,
		grantedpermission.ObjectTypeBlueprint,
		objectID,
		actions.ActionBlueprintCreate,
	)
}

// HasBlueprintGet reports whether a given user can get a given blueprint. Use [github.com/google/uuid.Nil] to denote a wildcard object ID.
func HasBlueprintGet(ctx context.Context, client *ent.Client, entUser *ent.User, objectID uuid.UUID) (bool, error) {
	return HasPermission(
		ctx,
		client,
		entUser,
		grantedpermission.ObjectTypeBlueprint,
		objectID,
		actions.ActionBlueprintGet,
	)
}

// HasBlueprintUpdate reports whether a given user can update a given blueprint. Use [github.com/google/uuid.Nil] to denote a wildcard object ID.
func HasBlueprintUpdate(ctx context.Context, client *ent.Client, entUser *ent.User, objectID uuid.UUID) (bool, error) {
	return HasPermission(
		ctx,
		client,
		entUser,
		grantedpermission.ObjectTypeBlueprint,
		objectID,
		actions.ActionBlueprintUpdate,
	)
}

// HasBlueprintDelete reports whether a given user can delete a given blueprint. Use [github.com/google/uuid.Nil] to denote a wildcard object ID.
func HasBlueprintDelete(ctx context.Context, client *ent.Client, entUser *ent.User, objectID uuid.UUID) (bool, error) {
	return HasPermission(
		ctx,
		client,
		entUser,
		grantedpermission.ObjectTypeBlueprint,
		objectID,
		actions.ActionBlueprintDelete,
	)
}

// HasBlueprintDeploy reports whether a given user can deploy a given blueprint. Use [github.com/google/uuid.Nil] to denote a wildcard object ID.
func HasBlueprintDeploy(ctx context.Context, client *ent.Client, entUser *ent.User, objectID uuid.UUID) (bool, error) {
	return HasPermission(
		ctx,
		client,
		entUser,
		grantedpermission.ObjectTypeBlueprint,
		objectID,
		actions.ActionBlueprintDeploy,
	)
}

// CurrentUserHasBlueprintList reports whether the current user (pulled from context) can list all blueprints (only compatible with wildcard id *). Use [github.com/google/uuid.Nil] to denote a wildcard object ID.
func CurrentUserHasBlueprintList(ctx context.Context, client *ent.Client, objectID uuid.UUID) (bool, error) {
	return CurrentUserHasPermission(
		ctx,
		client,
		grantedpermission.ObjectTypeBlueprint,
		objectID,
		actions.ActionBlueprintList,
	)
}

// CurrentUserHasBlueprintCreate reports whether the current user (pulled from context) can create blueprints (only compatible with wildcard id *). Use [github.com/google/uuid.Nil] to denote a wildcard object ID.
func CurrentUserHasBlueprintCreate(ctx context.Context, client *ent.Client, objectID uuid.UUID) (bool, error) {
	return CurrentUserHasPermission(
		ctx,
		client,
		grantedpermission.ObjectTypeBlueprint,
		objectID,
		actions.ActionBlueprintCreate,
	)
}

// CurrentUserHasBlueprintGet reports whether the current user (pulled from context) can get a given blueprint. Use [github.com/google/uuid.Nil] to denote a wildcard object ID.
func CurrentUserHasBlueprintGet(ctx context.Context, client *ent.Client, objectID uuid.UUID) (bool, error) {
	return CurrentUserHasPermission(
		ctx,
		client,
		grantedpermission.ObjectTypeBlueprint,
		objectID,
		actions.ActionBlueprintGet,
	)
}

// CurrentUserHasBlueprintUpdate reports whether the current user (pulled from context) can update a given blueprint. Use [github.com/google/uuid.Nil] to denote a wildcard object ID.
func CurrentUserHasBlueprintUpdate(ctx context.Context, client *ent.Client, objectID uuid.UUID) (bool, error) {
	return CurrentUserHasPermission(
		ctx,
		client,
		grantedpermission.ObjectTypeBlueprint,
		objectID,
		actions.ActionBlueprintUpdate,
	)
}

// CurrentUserHasBlueprintDelete reports whether the current user (pulled from context) can delete a given blueprint. Use [github.com/google/uuid.Nil] to denote a wildcard object ID.
func CurrentUserHasBlueprintDelete(ctx context.Context, client *ent.Client, objectID uuid.UUID) (bool, error) {
	return CurrentUserHasPermission(
		ctx,
		client,
		grantedpermission.ObjectTypeBlueprint,
		objectID,
		actions.ActionBlueprintDelete,
	)
}

// CurrentUserHasBlueprintDeploy reports whether the current user (pulled from context) can deploy a given blueprint. Use [github.com/google/uuid.Nil] to denote a wildcard object ID.
func CurrentUserHasBlueprintDeploy(ctx context.Context, client *ent.Client, objectID uuid.UUID) (bool, error) {
	return CurrentUserHasPermission(
		ctx,
		client,
		grantedpermission.ObjectTypeBlueprint,
		objectID,
		actions.ActionBlueprintDeploy,
	)
}

// Deployment //

// HasDeploymentList reports whether a given user can list all deployments (only compatible with wildcard id *). Use [github.com/google/uuid.Nil] to denote a wildcard object ID.
func HasDeploymentList(ctx context.Context, client *ent.Client, entUser *ent.User, objectID uuid.UUID) (bool, error) {
	return HasPermission(
		ctx,
		client,
		entUser,
		grantedpermission.ObjectTypeDeployment,
		objectID,
		actions.ActionDeploymentList,
	)
}

// HasDeploymentGet reports whether a given user can get a given deployment. Use [github.com/google/uuid.Nil] to denote a wildcard object ID.
func HasDeploymentGet(ctx context.Context, client *ent.Client, entUser *ent.User, objectID uuid.UUID) (bool, error) {
	return HasPermission(
		ctx,
		client,
		entUser,
		grantedpermission.ObjectTypeDeployment,
		objectID,
		actions.ActionDeploymentGet,
	)
}

// HasDeploymentUpdate reports whether a given user can update a given deployment. Use [github.com/google/uuid.Nil] to denote a wildcard object ID.
func HasDeploymentUpdate(ctx context.Context, client *ent.Client, entUser *ent.User, objectID uuid.UUID) (bool, error) {
	return HasPermission(
		ctx,
		client,
		entUser,
		grantedpermission.ObjectTypeDeployment,
		objectID,
		actions.ActionDeploymentUpdate,
	)
}

// HasDeploymentDelete reports whether a given user can delete a given deployment. Use [github.com/google/uuid.Nil] to denote a wildcard object ID.
func HasDeploymentDelete(ctx context.Context, client *ent.Client, entUser *ent.User, objectID uuid.UUID) (bool, error) {
	return HasPermission(
		ctx,
		client,
		entUser,
		grantedpermission.ObjectTypeDeployment,
		objectID,
		actions.ActionDeploymentDelete,
	)
}

// HasDeploymentDestroy reports whether a given user can destroy a given deployment. Use [github.com/google/uuid.Nil] to denote a wildcard object ID.
func HasDeploymentDestroy(ctx context.Context, client *ent.Client, entUser *ent.User, objectID uuid.UUID) (bool, error) {
	return HasPermission(
		ctx,
		client,
		entUser,
		grantedpermission.ObjectTypeDeployment,
		objectID,
		actions.ActionDeploymentDestroy,
	)
}

// HasDeploymentRedeploy reports whether a given user can redeploy a given deployment. Use [github.com/google/uuid.Nil] to denote a wildcard object ID.
func HasDeploymentRedeploy(ctx context.Context, client *ent.Client, entUser *ent.User, objectID uuid.UUID) (bool, error) {
	return HasPermission(
		ctx,
		client,
		entUser,
		grantedpermission.ObjectTypeDeployment,
		objectID,
		actions.ActionDeploymentRedeploy,
	)
}

// HasDeploymentPower reports whether a given user can control the power state of resources in a given deployment. Use [github.com/google/uuid.Nil] to denote a wildcard object ID.
func HasDeploymentPower(ctx context.Context, client *ent.Client, entUser *ent.User, objectID uuid.UUID) (bool, error) {
	return HasPermission(
		ctx,
		client,
		entUser,
		grantedpermission.ObjectTypeDeployment,
		objectID,
		actions.ActionDeploymentPower,
	)
}

// HasDeploymentConsole reports whether a given user can get the console of resources in a given deployment. Use [github.com/google/uuid.Nil] to denote a wildcard object ID.
func HasDeploymentConsole(ctx context.Context, client *ent.Client, entUser *ent.User, objectID uuid.UUID) (bool, error) {
	return HasPermission(
		ctx,
		client,
		entUser,
		grantedpermission.ObjectTypeDeployment,
		objectID,
		actions.ActionDeploymentConsole,
	)
}

// CurrentUserHasDeploymentList reports whether the current user (pulled from context) can list all deployments (only compatible with wildcard id *). Use [github.com/google/uuid.Nil] to denote a wildcard object ID.
func CurrentUserHasDeploymentList(ctx context.Context, client *ent.Client, objectID uuid.UUID) (bool, error) {
	return CurrentUserHasPermission(
		ctx,
		client,
		grantedpermission.ObjectTypeDeployment,
		objectID,
		actions.ActionDeploymentList,
	)
}

// CurrentUserHasDeploymentGet reports whether the current user (pulled from context) can get a given deployment. Use [github.com/google/uuid.Nil] to denote a wildcard object ID.
func CurrentUserHasDeploymentGet(ctx context.Context, client *ent.Client, objectID uuid.UUID) (bool, error) {
	return CurrentUserHasPermission(
		ctx,
		client,
		grantedpermission.ObjectTypeDeployment,
		objectID,
		actions.ActionDeploymentGet,
	)
}

// CurrentUserHasDeploymentUpdate reports whether the current user (pulled from context) can update a given deployment. Use [github.com/google/uuid.Nil] to denote a wildcard object ID.
func CurrentUserHasDeploymentUpdate(ctx context.Context, client *ent.Client, objectID uuid.UUID) (bool, error) {
	return CurrentUserHasPermission(
		ctx,
		client,
		grantedpermission.ObjectTypeDeployment,
		objectID,
		actions.ActionDeploymentUpdate,
	)
}

// CurrentUserHasDeploymentDelete reports whether the current user (pulled from context) can delete a given deployment. Use [github.com/google/uuid.Nil] to denote a wildcard object ID.
func CurrentUserHasDeploymentDelete(ctx context.Context, client *ent.Client, objectID uuid.UUID) (bool, error) {
	return CurrentUserHasPermission(
		ctx,
		client,
		grantedpermission.ObjectTypeDeployment,
		objectID,
		actions.ActionDeploymentDelete,
	)
}

// CurrentUserHasDeploymentDestroy reports whether the current user (pulled from context) can destroy a given deployment. Use [github.com/google/uuid.Nil] to denote a wildcard object ID.
func CurrentUserHasDeploymentDestroy(ctx context.Context, client *ent.Client, objectID uuid.UUID) (bool, error) {
	return CurrentUserHasPermission(
		ctx,
		client,
		grantedpermission.ObjectTypeDeployment,
		objectID,
		actions.ActionDeploymentDestroy,
	)
}

// CurrentUserHasDeploymentRedeploy reports whether the current user (pulled from context) can redeploy a given deployment. Use [github.com/google/uuid.Nil] to denote a wildcard object ID.
func CurrentUserHasDeploymentRedeploy(ctx context.Context, client *ent.Client, objectID uuid.UUID) (bool, error) {
	return CurrentUserHasPermission(
		ctx,
		client,
		grantedpermission.ObjectTypeDeployment,
		objectID,
		actions.ActionDeploymentRedeploy,
	)
}

// CurrentUserHasDeploymentPower reports whether the current user (pulled from context) can control the power state of resources in a given deployment. Use [github.com/google/uuid.Nil] to denote a wildcard object ID.
func CurrentUserHasDeploymentPower(ctx context.Context, client *ent.Client, objectID uuid.UUID) (bool, error) {
	return CurrentUserHasPermission(
		ctx,
		client,
		grantedpermission.ObjectTypeDeployment,
		objectID,
		actions.ActionDeploymentPower,
	)
}

// CurrentUserHasDeploymentConsole reports whether the current user (pulled from context) can get the console of resources in a given deployment. Use [github.com/google/uuid.Nil] to denote a wildcard object ID.
func CurrentUserHasDeploymentConsole(ctx context.Context, client *ent.Client, objectID uuid.UUID) (bool, error) {
	return CurrentUserHasPermission(
		ctx,
		client,
		grantedpermission.ObjectTypeDeployment,
		objectID,
		actions.ActionDeploymentConsole,
	)
}

// Group //

// HasGroupList reports whether a given user can list all groups (only compatible with wildcard id *). Use [github.com/google/uuid.Nil] to denote a wildcard object ID.
func HasGroupList(ctx context.Context, client *ent.Client, entUser *ent.User, objectID uuid.UUID) (bool, error) {
	return HasPermission(
		ctx,
		client,
		entUser,
		grantedpermission.ObjectTypeGroup,
		objectID,
		actions.ActionGroupList,
	)
}

// HasGroupCreate reports whether a given user can create groups. Use [github.com/google/uuid.Nil] to denote a wildcard object ID.
func HasGroupCreate(ctx context.Context, client *ent.Client, entUser *ent.User, objectID uuid.UUID) (bool, error) {
	return HasPermission(
		ctx,
		client,
		entUser,
		grantedpermission.ObjectTypeGroup,
		objectID,
		actions.ActionGroupCreate,
	)
}

// HasGroupGet reports whether a given user can get a given group. Use [github.com/google/uuid.Nil] to denote a wildcard object ID.
func HasGroupGet(ctx context.Context, client *ent.Client, entUser *ent.User, objectID uuid.UUID) (bool, error) {
	return HasPermission(
		ctx,
		client,
		entUser,
		grantedpermission.ObjectTypeGroup,
		objectID,
		actions.ActionGroupGet,
	)
}

// HasGroupUpdate reports whether a given user can update a given group. Use [github.com/google/uuid.Nil] to denote a wildcard object ID.
func HasGroupUpdate(ctx context.Context, client *ent.Client, entUser *ent.User, objectID uuid.UUID) (bool, error) {
	return HasPermission(
		ctx,
		client,
		entUser,
		grantedpermission.ObjectTypeGroup,
		objectID,
		actions.ActionGroupUpdate,
	)
}

// HasGroupDelete reports whether a given user can delete a given group. Use [github.com/google/uuid.Nil] to denote a wildcard object ID.
func HasGroupDelete(ctx context.Context, client *ent.Client, entUser *ent.User, objectID uuid.UUID) (bool, error) {
	return HasPermission(
		ctx,
		client,
		entUser,
		grantedpermission.ObjectTypeGroup,
		objectID,
		actions.ActionGroupDelete,
	)
}

// CurrentUserHasGroupList reports whether the current user (pulled from context) can list all groups (only compatible with wildcard id *). Use [github.com/google/uuid.Nil] to denote a wildcard object ID.
func CurrentUserHasGroupList(ctx context.Context, client *ent.Client, objectID uuid.UUID) (bool, error) {
	return CurrentUserHasPermission(
		ctx,
		client,
		grantedpermission.ObjectTypeGroup,
		objectID,
		actions.ActionGroupList,
	)
}

// CurrentUserHasGroupCreate reports whether the current user (pulled from context) can create groups. Use [github.com/google/uuid.Nil] to denote a wildcard object ID.
func CurrentUserHasGroupCreate(ctx context.Context, client *ent.Client, objectID uuid.UUID) (bool, error) {
	return CurrentUserHasPermission(
		ctx,
		client,
		grantedpermission.ObjectTypeGroup,
		objectID,
		actions.ActionGroupCreate,
	)
}

// CurrentUserHasGroupGet reports whether the current user (pulled from context) can get a given group. Use [github.com/google/uuid.Nil] to denote a wildcard object ID.
func CurrentUserHasGroupGet(ctx context.Context, client *ent.Client, objectID uuid.UUID) (bool, error) {
	return CurrentUserHasPermission(
		ctx,
		client,
		grantedpermission.ObjectTypeGroup,
		objectID,
		actions.ActionGroupGet,
	)
}

// CurrentUserHasGroupUpdate reports whether the current user (pulled from context) can update a given group. Use [github.com/google/uuid.Nil] to denote a wildcard object ID.
func CurrentUserHasGroupUpdate(ctx context.Context, client *ent.Client, objectID uuid.UUID) (bool, error) {
	return CurrentUserHasPermission(
		ctx,
		client,
		grantedpermission.ObjectTypeGroup,
		objectID,
		actions.ActionGroupUpdate,
	)
}

// CurrentUserHasGroupDelete reports whether the current user (pulled from context) can delete a given group. Use [github.com/google/uuid.Nil] to denote a wildcard object ID.
func CurrentUserHasGroupDelete(ctx context.Context, client *ent.Client, objectID uuid.UUID) (bool, error) {
	return CurrentUserHasPermission(
		ctx,
		client,
		grantedpermission.ObjectTypeGroup,
		objectID,
		actions.ActionGroupDelete,
	)
}

// Permission //

// HasPermissionList reports whether a given user can list all permissions (only compatible with wildcard id *). Use [github.com/google/uuid.Nil] to denote a wildcard object ID.
func HasPermissionList(ctx context.Context, client *ent.Client, entUser *ent.User, objectID uuid.UUID) (bool, error) {
	return HasPermission(
		ctx,
		client,
		entUser,
		grantedpermission.ObjectTypePermission,
		objectID,
		actions.ActionPermissionList,
	)
}

// HasPermissionGet reports whether a given user can get a given permission. Use [github.com/google/uuid.Nil] to denote a wildcard object ID.
func HasPermissionGet(ctx context.Context, client *ent.Client, entUser *ent.User, objectID uuid.UUID) (bool, error) {
	return HasPermission(
		ctx,
		client,
		entUser,
		grantedpermission.ObjectTypePermission,
		objectID,
		actions.ActionPermissionGet,
	)
}

// HasPermissionGrant reports whether a given user can grant permissions (only compatible with wildcard id *). Use [github.com/google/uuid.Nil] to denote a wildcard object ID.
func HasPermissionGrant(ctx context.Context, client *ent.Client, entUser *ent.User, objectID uuid.UUID) (bool, error) {
	return HasPermission(
		ctx,
		client,
		entUser,
		grantedpermission.ObjectTypePermission,
		objectID,
		actions.ActionPermissionGrant,
	)
}

// HasPermissionRevoke reports whether a given user can revoke permissions (only compatible with wildcard id *). Use [github.com/google/uuid.Nil] to denote a wildcard object ID.
func HasPermissionRevoke(ctx context.Context, client *ent.Client, entUser *ent.User, objectID uuid.UUID) (bool, error) {
	return HasPermission(
		ctx,
		client,
		entUser,
		grantedpermission.ObjectTypePermission,
		objectID,
		actions.ActionPermissionRevoke,
	)
}

// CurrentUserHasPermissionList reports whether the current user (pulled from context) can list all permissions (only compatible with wildcard id *). Use [github.com/google/uuid.Nil] to denote a wildcard object ID.
func CurrentUserHasPermissionList(ctx context.Context, client *ent.Client, objectID uuid.UUID) (bool, error) {
	return CurrentUserHasPermission(
		ctx,
		client,
		grantedpermission.ObjectTypePermission,
		objectID,
		actions.ActionPermissionList,
	)
}

// CurrentUserHasPermissionGet reports whether the current user (pulled from context) can get a given permission. Use [github.com/google/uuid.Nil] to denote a wildcard object ID.
func CurrentUserHasPermissionGet(ctx context.Context, client *ent.Client, objectID uuid.UUID) (bool, error) {
	return CurrentUserHasPermission(
		ctx,
		client,
		grantedpermission.ObjectTypePermission,
		objectID,
		actions.ActionPermissionGet,
	)
}

// CurrentUserHasPermissionGrant reports whether the current user (pulled from context) can grant permissions (only compatible with wildcard id *). Use [github.com/google/uuid.Nil] to denote a wildcard object ID.
func CurrentUserHasPermissionGrant(ctx context.Context, client *ent.Client, objectID uuid.UUID) (bool, error) {
	return CurrentUserHasPermission(
		ctx,
		client,
		grantedpermission.ObjectTypePermission,
		objectID,
		actions.ActionPermissionGrant,
	)
}

// CurrentUserHasPermissionRevoke reports whether the current user (pulled from context) can revoke permissions (only compatible with wildcard id *). Use [github.com/google/uuid.Nil] to denote a wildcard object ID.
func CurrentUserHasPermissionRevoke(ctx context.Context, client *ent.Client, objectID uuid.UUID) (bool, error) {
	return CurrentUserHasPermission(
		ctx,
		client,
		grantedpermission.ObjectTypePermission,
		objectID,
		actions.ActionPermissionRevoke,
	)
}

// Provider //

// HasProviderList reports whether a given user can list all providers (only compatible with wildcard id *). Use [github.com/google/uuid.Nil] to denote a wildcard object ID.
func HasProviderList(ctx context.Context, client *ent.Client, entUser *ent.User, objectID uuid.UUID) (bool, error) {
	return HasPermission(
		ctx,
		client,
		entUser,
		grantedpermission.ObjectTypeProvider,
		objectID,
		actions.ActionProviderList,
	)
}

// HasProviderCreate reports whether a given user can create providers. Use [github.com/google/uuid.Nil] to denote a wildcard object ID.
func HasProviderCreate(ctx context.Context, client *ent.Client, entUser *ent.User, objectID uuid.UUID) (bool, error) {
	return HasPermission(
		ctx,
		client,
		entUser,
		grantedpermission.ObjectTypeProvider,
		objectID,
		actions.ActionProviderCreate,
	)
}

// HasProviderGet reports whether a given user can get a given provider. Use [github.com/google/uuid.Nil] to denote a wildcard object ID.
func HasProviderGet(ctx context.Context, client *ent.Client, entUser *ent.User, objectID uuid.UUID) (bool, error) {
	return HasPermission(
		ctx,
		client,
		entUser,
		grantedpermission.ObjectTypeProvider,
		objectID,
		actions.ActionProviderGet,
	)
}

// HasProviderUpdate reports whether a given user can update a given provider. Use [github.com/google/uuid.Nil] to denote a wildcard object ID.
func HasProviderUpdate(ctx context.Context, client *ent.Client, entUser *ent.User, objectID uuid.UUID) (bool, error) {
	return HasPermission(
		ctx,
		client,
		entUser,
		grantedpermission.ObjectTypeProvider,
		objectID,
		actions.ActionProviderUpdate,
	)
}

// HasProviderDelete reports whether a given user can delete a given provider. Use [github.com/google/uuid.Nil] to denote a wildcard object ID.
func HasProviderDelete(ctx context.Context, client *ent.Client, entUser *ent.User, objectID uuid.UUID) (bool, error) {
	return HasPermission(
		ctx,
		client,
		entUser,
		grantedpermission.ObjectTypeProvider,
		objectID,
		actions.ActionProviderDelete,
	)
}

// HasProviderLoad reports whether a given user can load a given provider. Use [github.com/google/uuid.Nil] to denote a wildcard object ID.
func HasProviderLoad(ctx context.Context, client *ent.Client, entUser *ent.User, objectID uuid.UUID) (bool, error) {
	return HasPermission(
		ctx,
		client,
		entUser,
		grantedpermission.ObjectTypeProvider,
		objectID,
		actions.ActionProviderLoad,
	)
}

// HasProviderUnload reports whether a given user can unload a given provider. Use [github.com/google/uuid.Nil] to denote a wildcard object ID.
func HasProviderUnload(ctx context.Context, client *ent.Client, entUser *ent.User, objectID uuid.UUID) (bool, error) {
	return HasPermission(
		ctx,
		client,
		entUser,
		grantedpermission.ObjectTypeProvider,
		objectID,
		actions.ActionProviderUnload,
	)
}

// HasProviderConfigure reports whether a given user can configure a given provider. Use [github.com/google/uuid.Nil] to denote a wildcard object ID.
func HasProviderConfigure(ctx context.Context, client *ent.Client, entUser *ent.User, objectID uuid.UUID) (bool, error) {
	return HasPermission(
		ctx,
		client,
		entUser,
		grantedpermission.ObjectTypeProvider,
		objectID,
		actions.ActionProviderConfigure,
	)
}

// CurrentUserHasProviderList reports whether the current user (pulled from context) can list all providers (only compatible with wildcard id *). Use [github.com/google/uuid.Nil] to denote a wildcard object ID.
func CurrentUserHasProviderList(ctx context.Context, client *ent.Client, objectID uuid.UUID) (bool, error) {
	return CurrentUserHasPermission(
		ctx,
		client,
		grantedpermission.ObjectTypeProvider,
		objectID,
		actions.ActionProviderList,
	)
}

// CurrentUserHasProviderCreate reports whether the current user (pulled from context) can create providers. Use [github.com/google/uuid.Nil] to denote a wildcard object ID.
func CurrentUserHasProviderCreate(ctx context.Context, client *ent.Client, objectID uuid.UUID) (bool, error) {
	return CurrentUserHasPermission(
		ctx,
		client,
		grantedpermission.ObjectTypeProvider,
		objectID,
		actions.ActionProviderCreate,
	)
}

// CurrentUserHasProviderGet reports whether the current user (pulled from context) can get a given provider. Use [github.com/google/uuid.Nil] to denote a wildcard object ID.
func CurrentUserHasProviderGet(ctx context.Context, client *ent.Client, objectID uuid.UUID) (bool, error) {
	return CurrentUserHasPermission(
		ctx,
		client,
		grantedpermission.ObjectTypeProvider,
		objectID,
		actions.ActionProviderGet,
	)
}

// CurrentUserHasProviderUpdate reports whether the current user (pulled from context) can update a given provider. Use [github.com/google/uuid.Nil] to denote a wildcard object ID.
func CurrentUserHasProviderUpdate(ctx context.Context, client *ent.Client, objectID uuid.UUID) (bool, error) {
	return CurrentUserHasPermission(
		ctx,
		client,
		grantedpermission.ObjectTypeProvider,
		objectID,
		actions.ActionProviderUpdate,
	)
}

// CurrentUserHasProviderDelete reports whether the current user (pulled from context) can delete a given provider. Use [github.com/google/uuid.Nil] to denote a wildcard object ID.
func CurrentUserHasProviderDelete(ctx context.Context, client *ent.Client, objectID uuid.UUID) (bool, error) {
	return CurrentUserHasPermission(
		ctx,
		client,
		grantedpermission.ObjectTypeProvider,
		objectID,
		actions.ActionProviderDelete,
	)
}

// CurrentUserHasProviderLoad reports whether the current user (pulled from context) can load a given provider. Use [github.com/google/uuid.Nil] to denote a wildcard object ID.
func CurrentUserHasProviderLoad(ctx context.Context, client *ent.Client, objectID uuid.UUID) (bool, error) {
	return CurrentUserHasPermission(
		ctx,
		client,
		grantedpermission.ObjectTypeProvider,
		objectID,
		actions.ActionProviderLoad,
	)
}

// CurrentUserHasProviderUnload reports whether the current user (pulled from context) can unload a given provider. Use [github.com/google/uuid.Nil] to denote a wildcard object ID.
func CurrentUserHasProviderUnload(ctx context.Context, client *ent.Client, objectID uuid.UUID) (bool, error) {
	return CurrentUserHasPermission(
		ctx,
		client,
		grantedpermission.ObjectTypeProvider,
		objectID,
		actions.ActionProviderUnload,
	)
}

// CurrentUserHasProviderConfigure reports whether the current user (pulled from context) can configure a given provider. Use [github.com/google/uuid.Nil] to denote a wildcard object ID.
func CurrentUserHasProviderConfigure(ctx context.Context, client *ent.Client, objectID uuid.UUID) (bool, error) {
	return CurrentUserHasPermission(
		ctx,
		client,
		grantedpermission.ObjectTypeProvider,
		objectID,
		actions.ActionProviderConfigure,
	)
}

// User //

// HasUserList reports whether a given user can list all users (only compatible with wildcard id *). Use [github.com/google/uuid.Nil] to denote a wildcard object ID.
func HasUserList(ctx context.Context, client *ent.Client, entUser *ent.User, objectID uuid.UUID) (bool, error) {
	return HasPermission(
		ctx,
		client,
		entUser,
		grantedpermission.ObjectTypeUser,
		objectID,
		actions.ActionUserList,
	)
}

// HasUserCreate reports whether a given user can create users. Use [github.com/google/uuid.Nil] to denote a wildcard object ID.
func HasUserCreate(ctx context.Context, client *ent.Client, entUser *ent.User, objectID uuid.UUID) (bool, error) {
	return HasPermission(
		ctx,
		client,
		entUser,
		grantedpermission.ObjectTypeUser,
		objectID,
		actions.ActionUserCreate,
	)
}

// HasUserGet reports whether a given user can get a given user. Use [github.com/google/uuid.Nil] to denote a wildcard object ID.
func HasUserGet(ctx context.Context, client *ent.Client, entUser *ent.User, objectID uuid.UUID) (bool, error) {
	return HasPermission(
		ctx,
		client,
		entUser,
		grantedpermission.ObjectTypeUser,
		objectID,
		actions.ActionUserGet,
	)
}

// HasUserUpdate reports whether a given user can update a given user. Use [github.com/google/uuid.Nil] to denote a wildcard object ID.
func HasUserUpdate(ctx context.Context, client *ent.Client, entUser *ent.User, objectID uuid.UUID) (bool, error) {
	return HasPermission(
		ctx,
		client,
		entUser,
		grantedpermission.ObjectTypeUser,
		objectID,
		actions.ActionUserUpdate,
	)
}

// HasUserDelete reports whether a given user can delete a given user. Use [github.com/google/uuid.Nil] to denote a wildcard object ID.
func HasUserDelete(ctx context.Context, client *ent.Client, entUser *ent.User, objectID uuid.UUID) (bool, error) {
	return HasPermission(
		ctx,
		client,
		entUser,
		grantedpermission.ObjectTypeUser,
		objectID,
		actions.ActionUserDelete,
	)
}

// CurrentUserHasUserList reports whether the current user (pulled from context) can list all users (only compatible with wildcard id *). Use [github.com/google/uuid.Nil] to denote a wildcard object ID.
func CurrentUserHasUserList(ctx context.Context, client *ent.Client, objectID uuid.UUID) (bool, error) {
	return CurrentUserHasPermission(
		ctx,
		client,
		grantedpermission.ObjectTypeUser,
		objectID,
		actions.ActionUserList,
	)
}

// CurrentUserHasUserCreate reports whether the current user (pulled from context) can create users. Use [github.com/google/uuid.Nil] to denote a wildcard object ID.
func CurrentUserHasUserCreate(ctx context.Context, client *ent.Client, objectID uuid.UUID) (bool, error) {
	return CurrentUserHasPermission(
		ctx,
		client,
		grantedpermission.ObjectTypeUser,
		objectID,
		actions.ActionUserCreate,
	)
}

// CurrentUserHasUserGet reports whether the current user (pulled from context) can get a given user. Use [github.com/google/uuid.Nil] to denote a wildcard object ID.
func CurrentUserHasUserGet(ctx context.Context, client *ent.Client, objectID uuid.UUID) (bool, error) {
	return CurrentUserHasPermission(
		ctx,
		client,
		grantedpermission.ObjectTypeUser,
		objectID,
		actions.ActionUserGet,
	)
}

// CurrentUserHasUserUpdate reports whether the current user (pulled from context) can update a given user. Use [github.com/google/uuid.Nil] to denote a wildcard object ID.
func CurrentUserHasUserUpdate(ctx context.Context, client *ent.Client, objectID uuid.UUID) (bool, error) {
	return CurrentUserHasPermission(
		ctx,
		client,
		grantedpermission.ObjectTypeUser,
		objectID,
		actions.ActionUserUpdate,
	)
}

// CurrentUserHasUserDelete reports whether the current user (pulled from context) can delete a given user. Use [github.com/google/uuid.Nil] to denote a wildcard object ID.
func CurrentUserHasUserDelete(ctx context.Context, client *ent.Client, objectID uuid.UUID) (bool, error) {
	return CurrentUserHasPermission(
		ctx,
		client,
		grantedpermission.ObjectTypeUser,
		objectID,
		actions.ActionUserDelete,
	)
}
