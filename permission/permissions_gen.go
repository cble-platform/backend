// Code generated by github.com/cble-platform/cble-backend, DO NOT EDIT.

package permission

import (
	"context"

	"github.com/cble-platform/cble-backend/ent"
	"github.com/cble-platform/cble-backend/ent/grantedpermission"
	"github.com/cble-platform/cble-backend/permission/actions"
	"github.com/google/uuid"
)

var AllSubjectActions = map[grantedpermission.ObjectType][]actions.PermissionAction{
	grantedpermission.ObjectTypeBlueprint: {
		actions.ActionBlueprintList,
		actions.ActionBlueprintCreate,
		actions.ActionBlueprintGet,
		actions.ActionBlueprintUpdate,
		actions.ActionBlueprintDelete,
		actions.ActionBlueprintDeploy,
	},
	grantedpermission.ObjectTypeDeployment: {
		actions.ActionDeploymentList,
		actions.ActionDeploymentCreate,
		actions.ActionDeploymentGet,
		actions.ActionDeploymentUpdate,
		actions.ActionDeploymentDelete,
		actions.ActionDeploymentDestroy,
		actions.ActionDeploymentRedeploy,
		actions.ActionDeploymentConsole,
	},
	grantedpermission.ObjectTypeGroup: {
		actions.ActionGroupList,
		actions.ActionGroupCreate,
		actions.ActionGroupGet,
		actions.ActionGroupUpdate,
		actions.ActionGroupDelete,
	},
	grantedpermission.ObjectTypePermission: {
		actions.ActionPermissionList,
		actions.ActionPermissionCreate,
		actions.ActionPermissionGet,
		actions.ActionPermissionUpdate,
		actions.ActionPermissionDelete,
	},
	grantedpermission.ObjectTypeProvider: {
		actions.ActionProviderList,
		actions.ActionProviderCreate,
		actions.ActionProviderGet,
		actions.ActionProviderUpdate,
		actions.ActionProviderDelete,
		actions.ActionProviderLoad,
		actions.ActionProviderUnload,
		actions.ActionProviderConfigure,
	},
	grantedpermission.ObjectTypeUser: {
		actions.ActionUserList,
		actions.ActionUserCreate,
		actions.ActionUserGet,
		actions.ActionUserUpdate,
		actions.ActionUserDelete,
	},
}

// Blueprint //

// HasBlueprintListreports whether a given user has the "blueprint_list" permission. Use [github.com/google/uuid.Nil] to denote a wildcard object ID.
func HasBlueprintList(ctx context.Context, client *ent.Client, entUser *ent.User, objectID uuid.UUID) (bool, error) {
	return HasPermission(
		ctx,
		client,
		entUser,
		grantedpermission.ObjectTypeBlueprint,
		objectID,
		actions.ActionBlueprintList,
	)
}

// HasBlueprintCreatereports whether a given user has the "blueprint_create" permission. Use [github.com/google/uuid.Nil] to denote a wildcard object ID.
func HasBlueprintCreate(ctx context.Context, client *ent.Client, entUser *ent.User, objectID uuid.UUID) (bool, error) {
	return HasPermission(
		ctx,
		client,
		entUser,
		grantedpermission.ObjectTypeBlueprint,
		objectID,
		actions.ActionBlueprintCreate,
	)
}

// HasBlueprintGetreports whether a given user has the "blueprint_get" permission. Use [github.com/google/uuid.Nil] to denote a wildcard object ID.
func HasBlueprintGet(ctx context.Context, client *ent.Client, entUser *ent.User, objectID uuid.UUID) (bool, error) {
	return HasPermission(
		ctx,
		client,
		entUser,
		grantedpermission.ObjectTypeBlueprint,
		objectID,
		actions.ActionBlueprintGet,
	)
}

// HasBlueprintUpdatereports whether a given user has the "blueprint_update" permission. Use [github.com/google/uuid.Nil] to denote a wildcard object ID.
func HasBlueprintUpdate(ctx context.Context, client *ent.Client, entUser *ent.User, objectID uuid.UUID) (bool, error) {
	return HasPermission(
		ctx,
		client,
		entUser,
		grantedpermission.ObjectTypeBlueprint,
		objectID,
		actions.ActionBlueprintUpdate,
	)
}

// HasBlueprintDeletereports whether a given user has the "blueprint_delete" permission. Use [github.com/google/uuid.Nil] to denote a wildcard object ID.
func HasBlueprintDelete(ctx context.Context, client *ent.Client, entUser *ent.User, objectID uuid.UUID) (bool, error) {
	return HasPermission(
		ctx,
		client,
		entUser,
		grantedpermission.ObjectTypeBlueprint,
		objectID,
		actions.ActionBlueprintDelete,
	)
}

// HasBlueprintDeployreports whether a given user has the "blueprint_deploy" permission. Use [github.com/google/uuid.Nil] to denote a wildcard object ID.
func HasBlueprintDeploy(ctx context.Context, client *ent.Client, entUser *ent.User, objectID uuid.UUID) (bool, error) {
	return HasPermission(
		ctx,
		client,
		entUser,
		grantedpermission.ObjectTypeBlueprint,
		objectID,
		actions.ActionBlueprintDeploy,
	)
}

// CurrentUserHasBlueprintListreports whether the current user (pulled from context) has the "blueprint_list" permission. Use [github.com/google/uuid.Nil] to denote a wildcard object ID.
func CurrentUserHasBlueprintList(ctx context.Context, client *ent.Client, objectID uuid.UUID) (bool, error) {
	return CurrentUserHasPermission(
		ctx,
		client,
		grantedpermission.ObjectTypeBlueprint,
		objectID,
		actions.ActionBlueprintList,
	)
}

// CurrentUserHasBlueprintCreatereports whether the current user (pulled from context) has the "blueprint_create" permission. Use [github.com/google/uuid.Nil] to denote a wildcard object ID.
func CurrentUserHasBlueprintCreate(ctx context.Context, client *ent.Client, objectID uuid.UUID) (bool, error) {
	return CurrentUserHasPermission(
		ctx,
		client,
		grantedpermission.ObjectTypeBlueprint,
		objectID,
		actions.ActionBlueprintCreate,
	)
}

// CurrentUserHasBlueprintGetreports whether the current user (pulled from context) has the "blueprint_get" permission. Use [github.com/google/uuid.Nil] to denote a wildcard object ID.
func CurrentUserHasBlueprintGet(ctx context.Context, client *ent.Client, objectID uuid.UUID) (bool, error) {
	return CurrentUserHasPermission(
		ctx,
		client,
		grantedpermission.ObjectTypeBlueprint,
		objectID,
		actions.ActionBlueprintGet,
	)
}

// CurrentUserHasBlueprintUpdatereports whether the current user (pulled from context) has the "blueprint_update" permission. Use [github.com/google/uuid.Nil] to denote a wildcard object ID.
func CurrentUserHasBlueprintUpdate(ctx context.Context, client *ent.Client, objectID uuid.UUID) (bool, error) {
	return CurrentUserHasPermission(
		ctx,
		client,
		grantedpermission.ObjectTypeBlueprint,
		objectID,
		actions.ActionBlueprintUpdate,
	)
}

// CurrentUserHasBlueprintDeletereports whether the current user (pulled from context) has the "blueprint_delete" permission. Use [github.com/google/uuid.Nil] to denote a wildcard object ID.
func CurrentUserHasBlueprintDelete(ctx context.Context, client *ent.Client, objectID uuid.UUID) (bool, error) {
	return CurrentUserHasPermission(
		ctx,
		client,
		grantedpermission.ObjectTypeBlueprint,
		objectID,
		actions.ActionBlueprintDelete,
	)
}

// CurrentUserHasBlueprintDeployreports whether the current user (pulled from context) has the "blueprint_deploy" permission. Use [github.com/google/uuid.Nil] to denote a wildcard object ID.
func CurrentUserHasBlueprintDeploy(ctx context.Context, client *ent.Client, objectID uuid.UUID) (bool, error) {
	return CurrentUserHasPermission(
		ctx,
		client,
		grantedpermission.ObjectTypeBlueprint,
		objectID,
		actions.ActionBlueprintDeploy,
	)
}

// Deployment //

// HasDeploymentListreports whether a given user has the "deployment_list" permission. Use [github.com/google/uuid.Nil] to denote a wildcard object ID.
func HasDeploymentList(ctx context.Context, client *ent.Client, entUser *ent.User, objectID uuid.UUID) (bool, error) {
	return HasPermission(
		ctx,
		client,
		entUser,
		grantedpermission.ObjectTypeDeployment,
		objectID,
		actions.ActionDeploymentList,
	)
}

// HasDeploymentCreatereports whether a given user has the "deployment_create" permission. Use [github.com/google/uuid.Nil] to denote a wildcard object ID.
func HasDeploymentCreate(ctx context.Context, client *ent.Client, entUser *ent.User, objectID uuid.UUID) (bool, error) {
	return HasPermission(
		ctx,
		client,
		entUser,
		grantedpermission.ObjectTypeDeployment,
		objectID,
		actions.ActionDeploymentCreate,
	)
}

// HasDeploymentGetreports whether a given user has the "deployment_get" permission. Use [github.com/google/uuid.Nil] to denote a wildcard object ID.
func HasDeploymentGet(ctx context.Context, client *ent.Client, entUser *ent.User, objectID uuid.UUID) (bool, error) {
	return HasPermission(
		ctx,
		client,
		entUser,
		grantedpermission.ObjectTypeDeployment,
		objectID,
		actions.ActionDeploymentGet,
	)
}

// HasDeploymentUpdatereports whether a given user has the "deployment_update" permission. Use [github.com/google/uuid.Nil] to denote a wildcard object ID.
func HasDeploymentUpdate(ctx context.Context, client *ent.Client, entUser *ent.User, objectID uuid.UUID) (bool, error) {
	return HasPermission(
		ctx,
		client,
		entUser,
		grantedpermission.ObjectTypeDeployment,
		objectID,
		actions.ActionDeploymentUpdate,
	)
}

// HasDeploymentDeletereports whether a given user has the "deployment_delete" permission. Use [github.com/google/uuid.Nil] to denote a wildcard object ID.
func HasDeploymentDelete(ctx context.Context, client *ent.Client, entUser *ent.User, objectID uuid.UUID) (bool, error) {
	return HasPermission(
		ctx,
		client,
		entUser,
		grantedpermission.ObjectTypeDeployment,
		objectID,
		actions.ActionDeploymentDelete,
	)
}

// HasDeploymentDestroyreports whether a given user has the "deployment_destroy" permission. Use [github.com/google/uuid.Nil] to denote a wildcard object ID.
func HasDeploymentDestroy(ctx context.Context, client *ent.Client, entUser *ent.User, objectID uuid.UUID) (bool, error) {
	return HasPermission(
		ctx,
		client,
		entUser,
		grantedpermission.ObjectTypeDeployment,
		objectID,
		actions.ActionDeploymentDestroy,
	)
}

// HasDeploymentRedeployreports whether a given user has the "deployment_redeploy" permission. Use [github.com/google/uuid.Nil] to denote a wildcard object ID.
func HasDeploymentRedeploy(ctx context.Context, client *ent.Client, entUser *ent.User, objectID uuid.UUID) (bool, error) {
	return HasPermission(
		ctx,
		client,
		entUser,
		grantedpermission.ObjectTypeDeployment,
		objectID,
		actions.ActionDeploymentRedeploy,
	)
}

// HasDeploymentConsolereports whether a given user has the "deployment_console" permission. Use [github.com/google/uuid.Nil] to denote a wildcard object ID.
func HasDeploymentConsole(ctx context.Context, client *ent.Client, entUser *ent.User, objectID uuid.UUID) (bool, error) {
	return HasPermission(
		ctx,
		client,
		entUser,
		grantedpermission.ObjectTypeDeployment,
		objectID,
		actions.ActionDeploymentConsole,
	)
}

// CurrentUserHasDeploymentListreports whether the current user (pulled from context) has the "deployment_list" permission. Use [github.com/google/uuid.Nil] to denote a wildcard object ID.
func CurrentUserHasDeploymentList(ctx context.Context, client *ent.Client, objectID uuid.UUID) (bool, error) {
	return CurrentUserHasPermission(
		ctx,
		client,
		grantedpermission.ObjectTypeDeployment,
		objectID,
		actions.ActionDeploymentList,
	)
}

// CurrentUserHasDeploymentCreatereports whether the current user (pulled from context) has the "deployment_create" permission. Use [github.com/google/uuid.Nil] to denote a wildcard object ID.
func CurrentUserHasDeploymentCreate(ctx context.Context, client *ent.Client, objectID uuid.UUID) (bool, error) {
	return CurrentUserHasPermission(
		ctx,
		client,
		grantedpermission.ObjectTypeDeployment,
		objectID,
		actions.ActionDeploymentCreate,
	)
}

// CurrentUserHasDeploymentGetreports whether the current user (pulled from context) has the "deployment_get" permission. Use [github.com/google/uuid.Nil] to denote a wildcard object ID.
func CurrentUserHasDeploymentGet(ctx context.Context, client *ent.Client, objectID uuid.UUID) (bool, error) {
	return CurrentUserHasPermission(
		ctx,
		client,
		grantedpermission.ObjectTypeDeployment,
		objectID,
		actions.ActionDeploymentGet,
	)
}

// CurrentUserHasDeploymentUpdatereports whether the current user (pulled from context) has the "deployment_update" permission. Use [github.com/google/uuid.Nil] to denote a wildcard object ID.
func CurrentUserHasDeploymentUpdate(ctx context.Context, client *ent.Client, objectID uuid.UUID) (bool, error) {
	return CurrentUserHasPermission(
		ctx,
		client,
		grantedpermission.ObjectTypeDeployment,
		objectID,
		actions.ActionDeploymentUpdate,
	)
}

// CurrentUserHasDeploymentDeletereports whether the current user (pulled from context) has the "deployment_delete" permission. Use [github.com/google/uuid.Nil] to denote a wildcard object ID.
func CurrentUserHasDeploymentDelete(ctx context.Context, client *ent.Client, objectID uuid.UUID) (bool, error) {
	return CurrentUserHasPermission(
		ctx,
		client,
		grantedpermission.ObjectTypeDeployment,
		objectID,
		actions.ActionDeploymentDelete,
	)
}

// CurrentUserHasDeploymentDestroyreports whether the current user (pulled from context) has the "deployment_destroy" permission. Use [github.com/google/uuid.Nil] to denote a wildcard object ID.
func CurrentUserHasDeploymentDestroy(ctx context.Context, client *ent.Client, objectID uuid.UUID) (bool, error) {
	return CurrentUserHasPermission(
		ctx,
		client,
		grantedpermission.ObjectTypeDeployment,
		objectID,
		actions.ActionDeploymentDestroy,
	)
}

// CurrentUserHasDeploymentRedeployreports whether the current user (pulled from context) has the "deployment_redeploy" permission. Use [github.com/google/uuid.Nil] to denote a wildcard object ID.
func CurrentUserHasDeploymentRedeploy(ctx context.Context, client *ent.Client, objectID uuid.UUID) (bool, error) {
	return CurrentUserHasPermission(
		ctx,
		client,
		grantedpermission.ObjectTypeDeployment,
		objectID,
		actions.ActionDeploymentRedeploy,
	)
}

// CurrentUserHasDeploymentConsolereports whether the current user (pulled from context) has the "deployment_console" permission. Use [github.com/google/uuid.Nil] to denote a wildcard object ID.
func CurrentUserHasDeploymentConsole(ctx context.Context, client *ent.Client, objectID uuid.UUID) (bool, error) {
	return CurrentUserHasPermission(
		ctx,
		client,
		grantedpermission.ObjectTypeDeployment,
		objectID,
		actions.ActionDeploymentConsole,
	)
}

// Group //

// HasGroupListreports whether a given user has the "group_list" permission. Use [github.com/google/uuid.Nil] to denote a wildcard object ID.
func HasGroupList(ctx context.Context, client *ent.Client, entUser *ent.User, objectID uuid.UUID) (bool, error) {
	return HasPermission(
		ctx,
		client,
		entUser,
		grantedpermission.ObjectTypeGroup,
		objectID,
		actions.ActionGroupList,
	)
}

// HasGroupCreatereports whether a given user has the "group_create" permission. Use [github.com/google/uuid.Nil] to denote a wildcard object ID.
func HasGroupCreate(ctx context.Context, client *ent.Client, entUser *ent.User, objectID uuid.UUID) (bool, error) {
	return HasPermission(
		ctx,
		client,
		entUser,
		grantedpermission.ObjectTypeGroup,
		objectID,
		actions.ActionGroupCreate,
	)
}

// HasGroupGetreports whether a given user has the "group_get" permission. Use [github.com/google/uuid.Nil] to denote a wildcard object ID.
func HasGroupGet(ctx context.Context, client *ent.Client, entUser *ent.User, objectID uuid.UUID) (bool, error) {
	return HasPermission(
		ctx,
		client,
		entUser,
		grantedpermission.ObjectTypeGroup,
		objectID,
		actions.ActionGroupGet,
	)
}

// HasGroupUpdatereports whether a given user has the "group_update" permission. Use [github.com/google/uuid.Nil] to denote a wildcard object ID.
func HasGroupUpdate(ctx context.Context, client *ent.Client, entUser *ent.User, objectID uuid.UUID) (bool, error) {
	return HasPermission(
		ctx,
		client,
		entUser,
		grantedpermission.ObjectTypeGroup,
		objectID,
		actions.ActionGroupUpdate,
	)
}

// HasGroupDeletereports whether a given user has the "group_delete" permission. Use [github.com/google/uuid.Nil] to denote a wildcard object ID.
func HasGroupDelete(ctx context.Context, client *ent.Client, entUser *ent.User, objectID uuid.UUID) (bool, error) {
	return HasPermission(
		ctx,
		client,
		entUser,
		grantedpermission.ObjectTypeGroup,
		objectID,
		actions.ActionGroupDelete,
	)
}

// CurrentUserHasGroupListreports whether the current user (pulled from context) has the "group_list" permission. Use [github.com/google/uuid.Nil] to denote a wildcard object ID.
func CurrentUserHasGroupList(ctx context.Context, client *ent.Client, objectID uuid.UUID) (bool, error) {
	return CurrentUserHasPermission(
		ctx,
		client,
		grantedpermission.ObjectTypeGroup,
		objectID,
		actions.ActionGroupList,
	)
}

// CurrentUserHasGroupCreatereports whether the current user (pulled from context) has the "group_create" permission. Use [github.com/google/uuid.Nil] to denote a wildcard object ID.
func CurrentUserHasGroupCreate(ctx context.Context, client *ent.Client, objectID uuid.UUID) (bool, error) {
	return CurrentUserHasPermission(
		ctx,
		client,
		grantedpermission.ObjectTypeGroup,
		objectID,
		actions.ActionGroupCreate,
	)
}

// CurrentUserHasGroupGetreports whether the current user (pulled from context) has the "group_get" permission. Use [github.com/google/uuid.Nil] to denote a wildcard object ID.
func CurrentUserHasGroupGet(ctx context.Context, client *ent.Client, objectID uuid.UUID) (bool, error) {
	return CurrentUserHasPermission(
		ctx,
		client,
		grantedpermission.ObjectTypeGroup,
		objectID,
		actions.ActionGroupGet,
	)
}

// CurrentUserHasGroupUpdatereports whether the current user (pulled from context) has the "group_update" permission. Use [github.com/google/uuid.Nil] to denote a wildcard object ID.
func CurrentUserHasGroupUpdate(ctx context.Context, client *ent.Client, objectID uuid.UUID) (bool, error) {
	return CurrentUserHasPermission(
		ctx,
		client,
		grantedpermission.ObjectTypeGroup,
		objectID,
		actions.ActionGroupUpdate,
	)
}

// CurrentUserHasGroupDeletereports whether the current user (pulled from context) has the "group_delete" permission. Use [github.com/google/uuid.Nil] to denote a wildcard object ID.
func CurrentUserHasGroupDelete(ctx context.Context, client *ent.Client, objectID uuid.UUID) (bool, error) {
	return CurrentUserHasPermission(
		ctx,
		client,
		grantedpermission.ObjectTypeGroup,
		objectID,
		actions.ActionGroupDelete,
	)
}

// Permission //

// HasPermissionListreports whether a given user has the "permission_list" permission. Use [github.com/google/uuid.Nil] to denote a wildcard object ID.
func HasPermissionList(ctx context.Context, client *ent.Client, entUser *ent.User, objectID uuid.UUID) (bool, error) {
	return HasPermission(
		ctx,
		client,
		entUser,
		grantedpermission.ObjectTypePermission,
		objectID,
		actions.ActionPermissionList,
	)
}

// HasPermissionCreatereports whether a given user has the "permission_create" permission. Use [github.com/google/uuid.Nil] to denote a wildcard object ID.
func HasPermissionCreate(ctx context.Context, client *ent.Client, entUser *ent.User, objectID uuid.UUID) (bool, error) {
	return HasPermission(
		ctx,
		client,
		entUser,
		grantedpermission.ObjectTypePermission,
		objectID,
		actions.ActionPermissionCreate,
	)
}

// HasPermissionGetreports whether a given user has the "permission_get" permission. Use [github.com/google/uuid.Nil] to denote a wildcard object ID.
func HasPermissionGet(ctx context.Context, client *ent.Client, entUser *ent.User, objectID uuid.UUID) (bool, error) {
	return HasPermission(
		ctx,
		client,
		entUser,
		grantedpermission.ObjectTypePermission,
		objectID,
		actions.ActionPermissionGet,
	)
}

// HasPermissionUpdatereports whether a given user has the "permission_update" permission. Use [github.com/google/uuid.Nil] to denote a wildcard object ID.
func HasPermissionUpdate(ctx context.Context, client *ent.Client, entUser *ent.User, objectID uuid.UUID) (bool, error) {
	return HasPermission(
		ctx,
		client,
		entUser,
		grantedpermission.ObjectTypePermission,
		objectID,
		actions.ActionPermissionUpdate,
	)
}

// HasPermissionDeletereports whether a given user has the "permission_delete" permission. Use [github.com/google/uuid.Nil] to denote a wildcard object ID.
func HasPermissionDelete(ctx context.Context, client *ent.Client, entUser *ent.User, objectID uuid.UUID) (bool, error) {
	return HasPermission(
		ctx,
		client,
		entUser,
		grantedpermission.ObjectTypePermission,
		objectID,
		actions.ActionPermissionDelete,
	)
}

// CurrentUserHasPermissionListreports whether the current user (pulled from context) has the "permission_list" permission. Use [github.com/google/uuid.Nil] to denote a wildcard object ID.
func CurrentUserHasPermissionList(ctx context.Context, client *ent.Client, objectID uuid.UUID) (bool, error) {
	return CurrentUserHasPermission(
		ctx,
		client,
		grantedpermission.ObjectTypePermission,
		objectID,
		actions.ActionPermissionList,
	)
}

// CurrentUserHasPermissionCreatereports whether the current user (pulled from context) has the "permission_create" permission. Use [github.com/google/uuid.Nil] to denote a wildcard object ID.
func CurrentUserHasPermissionCreate(ctx context.Context, client *ent.Client, objectID uuid.UUID) (bool, error) {
	return CurrentUserHasPermission(
		ctx,
		client,
		grantedpermission.ObjectTypePermission,
		objectID,
		actions.ActionPermissionCreate,
	)
}

// CurrentUserHasPermissionGetreports whether the current user (pulled from context) has the "permission_get" permission. Use [github.com/google/uuid.Nil] to denote a wildcard object ID.
func CurrentUserHasPermissionGet(ctx context.Context, client *ent.Client, objectID uuid.UUID) (bool, error) {
	return CurrentUserHasPermission(
		ctx,
		client,
		grantedpermission.ObjectTypePermission,
		objectID,
		actions.ActionPermissionGet,
	)
}

// CurrentUserHasPermissionUpdatereports whether the current user (pulled from context) has the "permission_update" permission. Use [github.com/google/uuid.Nil] to denote a wildcard object ID.
func CurrentUserHasPermissionUpdate(ctx context.Context, client *ent.Client, objectID uuid.UUID) (bool, error) {
	return CurrentUserHasPermission(
		ctx,
		client,
		grantedpermission.ObjectTypePermission,
		objectID,
		actions.ActionPermissionUpdate,
	)
}

// CurrentUserHasPermissionDeletereports whether the current user (pulled from context) has the "permission_delete" permission. Use [github.com/google/uuid.Nil] to denote a wildcard object ID.
func CurrentUserHasPermissionDelete(ctx context.Context, client *ent.Client, objectID uuid.UUID) (bool, error) {
	return CurrentUserHasPermission(
		ctx,
		client,
		grantedpermission.ObjectTypePermission,
		objectID,
		actions.ActionPermissionDelete,
	)
}

// Provider //

// HasProviderListreports whether a given user has the "provider_list" permission. Use [github.com/google/uuid.Nil] to denote a wildcard object ID.
func HasProviderList(ctx context.Context, client *ent.Client, entUser *ent.User, objectID uuid.UUID) (bool, error) {
	return HasPermission(
		ctx,
		client,
		entUser,
		grantedpermission.ObjectTypeProvider,
		objectID,
		actions.ActionProviderList,
	)
}

// HasProviderCreatereports whether a given user has the "provider_create" permission. Use [github.com/google/uuid.Nil] to denote a wildcard object ID.
func HasProviderCreate(ctx context.Context, client *ent.Client, entUser *ent.User, objectID uuid.UUID) (bool, error) {
	return HasPermission(
		ctx,
		client,
		entUser,
		grantedpermission.ObjectTypeProvider,
		objectID,
		actions.ActionProviderCreate,
	)
}

// HasProviderGetreports whether a given user has the "provider_get" permission. Use [github.com/google/uuid.Nil] to denote a wildcard object ID.
func HasProviderGet(ctx context.Context, client *ent.Client, entUser *ent.User, objectID uuid.UUID) (bool, error) {
	return HasPermission(
		ctx,
		client,
		entUser,
		grantedpermission.ObjectTypeProvider,
		objectID,
		actions.ActionProviderGet,
	)
}

// HasProviderUpdatereports whether a given user has the "provider_update" permission. Use [github.com/google/uuid.Nil] to denote a wildcard object ID.
func HasProviderUpdate(ctx context.Context, client *ent.Client, entUser *ent.User, objectID uuid.UUID) (bool, error) {
	return HasPermission(
		ctx,
		client,
		entUser,
		grantedpermission.ObjectTypeProvider,
		objectID,
		actions.ActionProviderUpdate,
	)
}

// HasProviderDeletereports whether a given user has the "provider_delete" permission. Use [github.com/google/uuid.Nil] to denote a wildcard object ID.
func HasProviderDelete(ctx context.Context, client *ent.Client, entUser *ent.User, objectID uuid.UUID) (bool, error) {
	return HasPermission(
		ctx,
		client,
		entUser,
		grantedpermission.ObjectTypeProvider,
		objectID,
		actions.ActionProviderDelete,
	)
}

// HasProviderLoadreports whether a given user has the "provider_load" permission. Use [github.com/google/uuid.Nil] to denote a wildcard object ID.
func HasProviderLoad(ctx context.Context, client *ent.Client, entUser *ent.User, objectID uuid.UUID) (bool, error) {
	return HasPermission(
		ctx,
		client,
		entUser,
		grantedpermission.ObjectTypeProvider,
		objectID,
		actions.ActionProviderLoad,
	)
}

// HasProviderUnloadreports whether a given user has the "provider_unload" permission. Use [github.com/google/uuid.Nil] to denote a wildcard object ID.
func HasProviderUnload(ctx context.Context, client *ent.Client, entUser *ent.User, objectID uuid.UUID) (bool, error) {
	return HasPermission(
		ctx,
		client,
		entUser,
		grantedpermission.ObjectTypeProvider,
		objectID,
		actions.ActionProviderUnload,
	)
}

// HasProviderConfigurereports whether a given user has the "provider_configure" permission. Use [github.com/google/uuid.Nil] to denote a wildcard object ID.
func HasProviderConfigure(ctx context.Context, client *ent.Client, entUser *ent.User, objectID uuid.UUID) (bool, error) {
	return HasPermission(
		ctx,
		client,
		entUser,
		grantedpermission.ObjectTypeProvider,
		objectID,
		actions.ActionProviderConfigure,
	)
}

// CurrentUserHasProviderListreports whether the current user (pulled from context) has the "provider_list" permission. Use [github.com/google/uuid.Nil] to denote a wildcard object ID.
func CurrentUserHasProviderList(ctx context.Context, client *ent.Client, objectID uuid.UUID) (bool, error) {
	return CurrentUserHasPermission(
		ctx,
		client,
		grantedpermission.ObjectTypeProvider,
		objectID,
		actions.ActionProviderList,
	)
}

// CurrentUserHasProviderCreatereports whether the current user (pulled from context) has the "provider_create" permission. Use [github.com/google/uuid.Nil] to denote a wildcard object ID.
func CurrentUserHasProviderCreate(ctx context.Context, client *ent.Client, objectID uuid.UUID) (bool, error) {
	return CurrentUserHasPermission(
		ctx,
		client,
		grantedpermission.ObjectTypeProvider,
		objectID,
		actions.ActionProviderCreate,
	)
}

// CurrentUserHasProviderGetreports whether the current user (pulled from context) has the "provider_get" permission. Use [github.com/google/uuid.Nil] to denote a wildcard object ID.
func CurrentUserHasProviderGet(ctx context.Context, client *ent.Client, objectID uuid.UUID) (bool, error) {
	return CurrentUserHasPermission(
		ctx,
		client,
		grantedpermission.ObjectTypeProvider,
		objectID,
		actions.ActionProviderGet,
	)
}

// CurrentUserHasProviderUpdatereports whether the current user (pulled from context) has the "provider_update" permission. Use [github.com/google/uuid.Nil] to denote a wildcard object ID.
func CurrentUserHasProviderUpdate(ctx context.Context, client *ent.Client, objectID uuid.UUID) (bool, error) {
	return CurrentUserHasPermission(
		ctx,
		client,
		grantedpermission.ObjectTypeProvider,
		objectID,
		actions.ActionProviderUpdate,
	)
}

// CurrentUserHasProviderDeletereports whether the current user (pulled from context) has the "provider_delete" permission. Use [github.com/google/uuid.Nil] to denote a wildcard object ID.
func CurrentUserHasProviderDelete(ctx context.Context, client *ent.Client, objectID uuid.UUID) (bool, error) {
	return CurrentUserHasPermission(
		ctx,
		client,
		grantedpermission.ObjectTypeProvider,
		objectID,
		actions.ActionProviderDelete,
	)
}

// CurrentUserHasProviderLoadreports whether the current user (pulled from context) has the "provider_load" permission. Use [github.com/google/uuid.Nil] to denote a wildcard object ID.
func CurrentUserHasProviderLoad(ctx context.Context, client *ent.Client, objectID uuid.UUID) (bool, error) {
	return CurrentUserHasPermission(
		ctx,
		client,
		grantedpermission.ObjectTypeProvider,
		objectID,
		actions.ActionProviderLoad,
	)
}

// CurrentUserHasProviderUnloadreports whether the current user (pulled from context) has the "provider_unload" permission. Use [github.com/google/uuid.Nil] to denote a wildcard object ID.
func CurrentUserHasProviderUnload(ctx context.Context, client *ent.Client, objectID uuid.UUID) (bool, error) {
	return CurrentUserHasPermission(
		ctx,
		client,
		grantedpermission.ObjectTypeProvider,
		objectID,
		actions.ActionProviderUnload,
	)
}

// CurrentUserHasProviderConfigurereports whether the current user (pulled from context) has the "provider_configure" permission. Use [github.com/google/uuid.Nil] to denote a wildcard object ID.
func CurrentUserHasProviderConfigure(ctx context.Context, client *ent.Client, objectID uuid.UUID) (bool, error) {
	return CurrentUserHasPermission(
		ctx,
		client,
		grantedpermission.ObjectTypeProvider,
		objectID,
		actions.ActionProviderConfigure,
	)
}

// User //

// HasUserListreports whether a given user has the "user_list" permission. Use [github.com/google/uuid.Nil] to denote a wildcard object ID.
func HasUserList(ctx context.Context, client *ent.Client, entUser *ent.User, objectID uuid.UUID) (bool, error) {
	return HasPermission(
		ctx,
		client,
		entUser,
		grantedpermission.ObjectTypeUser,
		objectID,
		actions.ActionUserList,
	)
}

// HasUserCreatereports whether a given user has the "user_create" permission. Use [github.com/google/uuid.Nil] to denote a wildcard object ID.
func HasUserCreate(ctx context.Context, client *ent.Client, entUser *ent.User, objectID uuid.UUID) (bool, error) {
	return HasPermission(
		ctx,
		client,
		entUser,
		grantedpermission.ObjectTypeUser,
		objectID,
		actions.ActionUserCreate,
	)
}

// HasUserGetreports whether a given user has the "user_get" permission. Use [github.com/google/uuid.Nil] to denote a wildcard object ID.
func HasUserGet(ctx context.Context, client *ent.Client, entUser *ent.User, objectID uuid.UUID) (bool, error) {
	return HasPermission(
		ctx,
		client,
		entUser,
		grantedpermission.ObjectTypeUser,
		objectID,
		actions.ActionUserGet,
	)
}

// HasUserUpdatereports whether a given user has the "user_update" permission. Use [github.com/google/uuid.Nil] to denote a wildcard object ID.
func HasUserUpdate(ctx context.Context, client *ent.Client, entUser *ent.User, objectID uuid.UUID) (bool, error) {
	return HasPermission(
		ctx,
		client,
		entUser,
		grantedpermission.ObjectTypeUser,
		objectID,
		actions.ActionUserUpdate,
	)
}

// HasUserDeletereports whether a given user has the "user_delete" permission. Use [github.com/google/uuid.Nil] to denote a wildcard object ID.
func HasUserDelete(ctx context.Context, client *ent.Client, entUser *ent.User, objectID uuid.UUID) (bool, error) {
	return HasPermission(
		ctx,
		client,
		entUser,
		grantedpermission.ObjectTypeUser,
		objectID,
		actions.ActionUserDelete,
	)
}

// CurrentUserHasUserListreports whether the current user (pulled from context) has the "user_list" permission. Use [github.com/google/uuid.Nil] to denote a wildcard object ID.
func CurrentUserHasUserList(ctx context.Context, client *ent.Client, objectID uuid.UUID) (bool, error) {
	return CurrentUserHasPermission(
		ctx,
		client,
		grantedpermission.ObjectTypeUser,
		objectID,
		actions.ActionUserList,
	)
}

// CurrentUserHasUserCreatereports whether the current user (pulled from context) has the "user_create" permission. Use [github.com/google/uuid.Nil] to denote a wildcard object ID.
func CurrentUserHasUserCreate(ctx context.Context, client *ent.Client, objectID uuid.UUID) (bool, error) {
	return CurrentUserHasPermission(
		ctx,
		client,
		grantedpermission.ObjectTypeUser,
		objectID,
		actions.ActionUserCreate,
	)
}

// CurrentUserHasUserGetreports whether the current user (pulled from context) has the "user_get" permission. Use [github.com/google/uuid.Nil] to denote a wildcard object ID.
func CurrentUserHasUserGet(ctx context.Context, client *ent.Client, objectID uuid.UUID) (bool, error) {
	return CurrentUserHasPermission(
		ctx,
		client,
		grantedpermission.ObjectTypeUser,
		objectID,
		actions.ActionUserGet,
	)
}

// CurrentUserHasUserUpdatereports whether the current user (pulled from context) has the "user_update" permission. Use [github.com/google/uuid.Nil] to denote a wildcard object ID.
func CurrentUserHasUserUpdate(ctx context.Context, client *ent.Client, objectID uuid.UUID) (bool, error) {
	return CurrentUserHasPermission(
		ctx,
		client,
		grantedpermission.ObjectTypeUser,
		objectID,
		actions.ActionUserUpdate,
	)
}

// CurrentUserHasUserDeletereports whether the current user (pulled from context) has the "user_delete" permission. Use [github.com/google/uuid.Nil] to denote a wildcard object ID.
func CurrentUserHasUserDelete(ctx context.Context, client *ent.Client, objectID uuid.UUID) (bool, error) {
	return CurrentUserHasPermission(
		ctx,
		client,
		grantedpermission.ObjectTypeUser,
		objectID,
		actions.ActionUserDelete,
	)
}
