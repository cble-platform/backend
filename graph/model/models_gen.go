// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type ProviderInput struct {
	DisplayName     string `json:"displayName"`
	ProviderGitURL  string `json:"providerGitUrl"`
	ProviderVersion string `json:"providerVersion"`
	ConfigBytes     string `json:"configBytes"`
}

type PermissionPolicyType string

const (
	PermissionPolicyTypeAllow PermissionPolicyType = "ALLOW"
	PermissionPolicyTypeDeny  PermissionPolicyType = "DENY"
)

var AllPermissionPolicyType = []PermissionPolicyType{
	PermissionPolicyTypeAllow,
	PermissionPolicyTypeDeny,
}

func (e PermissionPolicyType) IsValid() bool {
	switch e {
	case PermissionPolicyTypeAllow, PermissionPolicyTypeDeny:
		return true
	}
	return false
}

func (e PermissionPolicyType) String() string {
	return string(e)
}

func (e *PermissionPolicyType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PermissionPolicyType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PermissionPolicyType", str)
	}
	return nil
}

func (e PermissionPolicyType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
