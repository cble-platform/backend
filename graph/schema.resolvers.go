package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.43

import (
	"context"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqljson"
	"github.com/99designs/gqlgen/graphql"
	"github.com/cble-platform/cble-backend/auth"
	"github.com/cble-platform/cble-backend/engine"
	"github.com/cble-platform/cble-backend/ent"
	"github.com/cble-platform/cble-backend/ent/blueprint"
	"github.com/cble-platform/cble-backend/ent/deployment"
	"github.com/cble-platform/cble-backend/ent/deploymentnode"
	"github.com/cble-platform/cble-backend/ent/grantedpermission"
	"github.com/cble-platform/cble-backend/ent/group"
	"github.com/cble-platform/cble-backend/ent/resource"
	"github.com/cble-platform/cble-backend/ent/user"
	"github.com/cble-platform/cble-backend/graph/generated"
	"github.com/cble-platform/cble-backend/graph/model"
	"github.com/cble-platform/cble-backend/permission"
	"github.com/cble-platform/cble-backend/permission/actions"
	pgrpc "github.com/cble-platform/cble-provider-grpc/pkg/provider"
	"github.com/google/uuid"
	"github.com/vektah/gqlparser/v2/gqlerror"
	yaml "gopkg.in/yaml.v3"
)

// BlueprintTemplate is the resolver for the blueprintTemplate field.
func (r *blueprintResolver) BlueprintTemplate(ctx context.Context, obj *ent.Blueprint) (string, error) {
	return string(obj.BlueprintTemplate), nil
}

// Provider is the resolver for the Provider field.
func (r *blueprintResolver) Provider(ctx context.Context, obj *ent.Blueprint) (*ent.Provider, error) {
	entProvider, err := obj.QueryProvider().Only(ctx)
	if ent.IsNotFound(err) {
		return nil, nil
	}
	return entProvider, err
}

// Resources is the resolver for the resources field.
func (r *blueprintResolver) Resources(ctx context.Context, obj *ent.Blueprint) ([]*ent.Resource, error) {
	return obj.QueryResources().All(ctx)
}

// Deployments is the resolver for the deployments field.
func (r *blueprintResolver) Deployments(ctx context.Context, obj *ent.Blueprint) ([]*ent.Deployment, error) {
	return obj.QueryDeployments().All(ctx)
}

// State is the resolver for the state field.
func (r *deploymentResolver) State(ctx context.Context, obj *ent.Deployment) (model.DeploymentState, error) {
	return model.DeploymentState(obj.State), nil
}

// Blueprint is the resolver for the blueprint field.
func (r *deploymentResolver) Blueprint(ctx context.Context, obj *ent.Deployment) (*ent.Blueprint, error) {
	return obj.QueryBlueprint().Only(ctx)
}

// DeploymentNodes is the resolver for the deploymentNodes field.
func (r *deploymentResolver) DeploymentNodes(ctx context.Context, obj *ent.Deployment) ([]*ent.DeploymentNode, error) {
	return obj.QueryDeploymentNodes().All(ctx)
}

// Requester is the resolver for the requester field.
func (r *deploymentResolver) Requester(ctx context.Context, obj *ent.Deployment) (*ent.User, error) {
	return obj.QueryRequester().Only(ctx)
}

// State is the resolver for the state field.
func (r *deploymentNodeResolver) State(ctx context.Context, obj *ent.DeploymentNode) (model.DeploymentNodeState, error) {
	return model.DeploymentNodeState(obj.State), nil
}

// Deployment is the resolver for the deployment field.
func (r *deploymentNodeResolver) Deployment(ctx context.Context, obj *ent.DeploymentNode) (*ent.Deployment, error) {
	return obj.QueryDeployment().Only(ctx)
}

// Resource is the resolver for the resource field.
func (r *deploymentNodeResolver) Resource(ctx context.Context, obj *ent.DeploymentNode) (*ent.Resource, error) {
	return obj.QueryResource().Only(ctx)
}

// NextNodes is the resolver for the nextNodes field.
func (r *deploymentNodeResolver) NextNodes(ctx context.Context, obj *ent.DeploymentNode) ([]*ent.DeploymentNode, error) {
	return obj.QueryNextNodes().All(ctx)
}

// PrevNodes is the resolver for the prevNodes field.
func (r *deploymentNodeResolver) PrevNodes(ctx context.Context, obj *ent.DeploymentNode) ([]*ent.DeploymentNode, error) {
	return obj.QueryPrevNodes().All(ctx)
}

// DisplayString is the resolver for the displayString field.
func (r *grantedPermissionResolver) DisplayString(ctx context.Context, obj *ent.GrantedPermission) (string, error) {
	return permission.DisplayString(obj.SubjectType, obj.SubjectID, obj.ObjectType, obj.ObjectID, obj.Action), nil
}

// Users is the resolver for the users field.
func (r *groupResolver) Users(ctx context.Context, obj *ent.Group) ([]*ent.User, error) {
	return obj.QueryUsers().All(ctx)
}

// Change current user's password
func (r *mutationResolver) SelfChangePassword(ctx context.Context, currentPassword string, newPassword string) (bool, error) {
	panic(fmt.Errorf("not implemented: SelfChangePassword - selfChangePassword"))
}

// Create a user (requires permission `x.x.users.*.create`)
func (r *mutationResolver) CreateUser(ctx context.Context, input model.UserInput) (*ent.User, error) {
	// Check if current user has permission
	if hasPerm, err := permission.CurrentUserHasUserCreate(ctx, r.ent, uuid.Nil); err != nil || !hasPerm {
		return nil, auth.PERMISSION_DENIED_GQL_ERROR
	}

	// Create the user
	entUser, err := r.ent.User.Create().
		SetEmail(input.Email).
		SetFirstName(input.FirstName).
		SetLastName(input.LastName).
		SetUsername(input.Username).
		Save(ctx)
	if err != nil {
		return nil, gqlerror.Errorf("failed to create user: %v", err)
	}

	return entUser, nil
}

// Update a user (requires permission `x.x.users.x.update`)
func (r *mutationResolver) UpdateUser(ctx context.Context, id uuid.UUID, input model.UserInput) (*ent.User, error) {
	// Check if current user has permission
	if hasPerm, err := permission.CurrentUserHasUserUpdate(ctx, r.ent, id); err != nil || !hasPerm {
		return nil, auth.PERMISSION_DENIED_GQL_ERROR
	}

	// Update the user
	entUser, err := r.ent.User.UpdateOneID(id).
		SetEmail(input.Email).
		SetFirstName(input.FirstName).
		SetLastName(input.LastName).
		SetUsername(input.Username).
		Save(ctx)
	if err != nil {
		return nil, gqlerror.Errorf("failed to update user: %v", err)
	}

	return entUser, nil
}

// Delete a user (requires permission `x.x.users.x.delete`)
func (r *mutationResolver) DeleteUser(ctx context.Context, id uuid.UUID) (bool, error) {
	// Check if current user has permission
	if hasPerm, err := permission.CurrentUserHasUserDelete(ctx, r.ent, id); err != nil || !hasPerm {
		return false, auth.PERMISSION_DENIED_GQL_ERROR
	}

	// Delete the user
	err := r.ent.User.DeleteOneID(id).Exec(ctx)
	if err != nil {
		return false, gqlerror.Errorf("failed to delete user: %v", err)
	}
	return true, nil
}

// Create a group (requires permission `x.x.group.*.create`)
func (r *mutationResolver) CreateGroup(ctx context.Context, input model.GroupInput) (*ent.Group, error) {
	// Check if current user has permission
	if hasPerm, err := permission.CurrentUserHasGroupCreate(ctx, r.ent, uuid.Nil); err != nil || !hasPerm {
		return nil, auth.PERMISSION_DENIED_GQL_ERROR
	}

	// Create the group
	entGroup, err := r.ent.Group.Create().
		SetName(input.Name).
		Save(ctx)
	if err != nil {
		return nil, gqlerror.Errorf("failed to create group: %v", err)
	}

	return entGroup, nil
}

// Update a group (requires permission `x.x.group.x.update`)
func (r *mutationResolver) UpdateGroup(ctx context.Context, id uuid.UUID, input model.GroupInput) (*ent.Group, error) {
	// Check if current user has permission
	if hasPerm, err := permission.CurrentUserHasGroupUpdate(ctx, r.ent, id); err != nil || !hasPerm {
		return nil, auth.PERMISSION_DENIED_GQL_ERROR
	}

	// Update the group
	entGroup, err := r.ent.Group.UpdateOneID(id).
		SetName(input.Name).
		Save(ctx)
	if err != nil {
		return nil, gqlerror.Errorf("failed to update group: %v", err)
	}

	return entGroup, nil
}

// Delete a group (requires permission `x.x.group.x.delete`)
func (r *mutationResolver) DeleteGroup(ctx context.Context, id uuid.UUID) (bool, error) {
	// Check if current user has permission
	if hasPerm, err := permission.CurrentUserHasGroupDelete(ctx, r.ent, id); err != nil || !hasPerm {
		return false, auth.PERMISSION_DENIED_GQL_ERROR
	}

	// Delete the group
	err := r.ent.Group.DeleteOneID(id).Exec(ctx)
	if err != nil {
		return false, gqlerror.Errorf("failed to delete group: %v", err)
	}
	return true, nil
}

// Grant a permission (requires permission `x.x.permission.*.grant`)
func (r *mutationResolver) GrantPermission(ctx context.Context, subjectType grantedpermission.SubjectType, subjectID uuid.UUID, objectType grantedpermission.ObjectType, objectID *uuid.UUID, action actions.PermissionAction) (*ent.GrantedPermission, error) {
	// Check if current user has permission
	if hasPerm, err := permission.CurrentUserHasPermissionGrant(ctx, r.ent, uuid.Nil); err != nil || !hasPerm {
		return nil, auth.PERMISSION_DENIED_GQL_ERROR
	}

	// Apply wildcard if objectID is nil
	objectId := uuid.Nil
	if objectID != nil {
		objectId = *objectID
	}

	// Grant the permission
	entGrantedPermission, err := permission.GrantPermission(ctx, r.ent, subjectType, subjectID, objectType, objectId, action)
	if err != nil {
		return nil, gqlerror.Errorf("failed to grant permission: %v", err)
	}

	return entGrantedPermission, nil
}

// Revoke a permission (requires permission `x.x.permission.*.revoke`)
func (r *mutationResolver) RevokePermission(ctx context.Context, subjectType grantedpermission.SubjectType, subjectID uuid.UUID, objectType grantedpermission.ObjectType, objectID *uuid.UUID, action actions.PermissionAction) (bool, error) {
	// Check if current user has permission
	if hasPerm, err := permission.CurrentUserHasPermissionRevoke(ctx, r.ent, uuid.Nil); err != nil || !hasPerm {
		return false, auth.PERMISSION_DENIED_GQL_ERROR
	}

	// Apply wildcard if objectID is nil
	objectId := uuid.Nil
	if objectID != nil {
		objectId = *objectID
	}

	// Revoke the permission
	err := permission.RevokePermission(ctx, r.ent, subjectType, subjectID, objectType, objectId, action)
	if err != nil {
		return false, gqlerror.Errorf("failed to grant permission: %v", err)
	}

	return true, nil
}

// Create a provider (requires permission `x.x.providers.*.create`)
func (r *mutationResolver) CreateProvider(ctx context.Context, input model.ProviderInput) (*ent.Provider, error) {
	// Check if current user has permission
	if hasPerm, err := permission.CurrentUserHasProviderCreate(ctx, r.ent, uuid.Nil); err != nil || !hasPerm {
		return nil, auth.PERMISSION_DENIED_GQL_ERROR
	}

	entProvider, err := r.ent.Provider.Create().
		SetDisplayName(input.DisplayName).
		SetProviderGitURL(input.ProviderGitURL).
		SetProviderVersion(input.ProviderVersion).
		SetConfigBytes([]byte(input.ConfigBytes)).
		Save(ctx)
	if err != nil {
		return nil, gqlerror.Errorf("failed to create provider: %v", err)
	}

	return entProvider, nil
}

// Update a provider (requires permission `x.x.providers.x.update`)
func (r *mutationResolver) UpdateProvider(ctx context.Context, id uuid.UUID, input model.ProviderInput) (*ent.Provider, error) {
	// Check if current user has permission
	if hasPerm, err := permission.CurrentUserHasProviderUpdate(ctx, r.ent, id); err != nil || !hasPerm {
		return nil, auth.PERMISSION_DENIED_GQL_ERROR
	}

	// Update the provider
	entProvider, err := r.ent.Provider.UpdateOneID(id).
		SetDisplayName(input.DisplayName).
		SetProviderGitURL(input.ProviderGitURL).
		SetProviderVersion(input.ProviderVersion).
		SetConfigBytes([]byte(input.ConfigBytes)).
		Save(ctx)
	if err != nil {
		return nil, gqlerror.Errorf("failed to update provider: %v", err)
	}
	return entProvider, nil
}

// Delete a provider (requires permission `x.x.providers.x.delete`)
func (r *mutationResolver) DeleteProvider(ctx context.Context, id uuid.UUID) (bool, error) {
	// Check if current user has permission
	if hasPerm, err := permission.CurrentUserHasProviderDelete(ctx, r.ent, id); err != nil || !hasPerm {
		return false, auth.PERMISSION_DENIED_GQL_ERROR
	}

	// Check if the provider is loaded
	entProvider, err := r.ent.Provider.Get(ctx, id)
	if err != nil {
		return false, gqlerror.Errorf("failed to query provider with ID: %v", err)
	}
	// Don't allow deleting a loaded provider
	if entProvider.IsLoaded {
		return false, gqlerror.Errorf("cannot delete a provider while it is loaded")
	}
	// Delete the provider otherwise
	err = r.ent.Provider.DeleteOneID(id).Exec(ctx)
	if err != nil {
		return false, gqlerror.Errorf("failed to delete provider: %v", err)
	}

	return true, nil
}

// Create a blueprint (requires permission `x.x.blueprints.*.create`)
func (r *mutationResolver) CreateBlueprint(ctx context.Context, input model.BlueprintInput) (*ent.Blueprint, error) {
	// Check if current user has permission
	if hasPerm, err := permission.CurrentUserHasBlueprintCreate(ctx, r.ent, uuid.Nil); err != nil || !hasPerm {
		return nil, auth.PERMISSION_DENIED_GQL_ERROR
	}

	// Get the edge objects
	entProvider, err := r.ent.Provider.Get(ctx, input.ProviderID)
	if err != nil {
		return nil, gqlerror.Errorf("failed to query provider by ID: %v", err)
	}

	// Create a transactional client
	tx, err := r.ent.Tx(ctx)
	if err != nil {
		return nil, gqlerror.Errorf("failed to create transactional client: %v", err)
	}

	// Create the blueprint
	entBlueprint, err := tx.Blueprint.Create().
		SetName(input.Name).
		SetDescription(input.Description).
		SetBlueprintTemplate([]byte(input.BlueprintTemplate)).
		// SetVariableTypes(varTypes).
		SetVariableTypes(input.VariableTypes).
		SetProvider(entProvider).
		Save(ctx)
	if err != nil {
		tx.Rollback()
		return nil, gqlerror.Errorf("failed to create blueprint: %v", err)
	}

	// Load all of the blueprint resources
	err = engine.LoadResources(ctx, tx.Client(), r.cbleServer, entBlueprint)
	if err != nil {
		tx.Rollback()
		return nil, gqlerror.Errorf("failed to load resource: %v", err)
	}

	// Commit the transaction
	err = tx.Commit()
	if err != nil {
		tx.Rollback()
		return nil, gqlerror.Errorf("failed to commit transaction: %v", err)
	}

	return entBlueprint.Unwrap(), nil
}

// Update a blueprint (requires permission `x.x.blueprints.x.update`)
func (r *mutationResolver) UpdateBlueprint(ctx context.Context, id uuid.UUID, input model.BlueprintInput) (*ent.Blueprint, error) {
	// Check if current user has permission
	if hasPerm, err := permission.CurrentUserHasBlueprintUpdate(ctx, r.ent, id); err != nil || !hasPerm {
		return nil, auth.PERMISSION_DENIED_GQL_ERROR
	}

	// Create a transactional client
	tx, err := r.ent.Tx(ctx)
	if err != nil {
		return nil, gqlerror.Errorf("failed to create transactional client: %v", err)
	}

	// Get the object from ENT
	entBlueprint, err := tx.Blueprint.Get(ctx, id)
	if err != nil {
		return nil, gqlerror.Errorf("failed to query blueprint: %v", err)
	}

	// Get the edge objects
	entProvider, err := tx.Provider.Get(ctx, input.ProviderID)
	if err != nil {
		return nil, gqlerror.Errorf("failed to query provider by ID: %v", err)
	}

	// Update the blueprint
	entBlueprint, err = entBlueprint.Update().
		SetName(input.Name).
		SetDescription(input.Description).
		SetBlueprintTemplate([]byte(input.BlueprintTemplate)).
		SetVariableTypes(input.VariableTypes).
		SetProvider(entProvider).
		Save(ctx)
	if err != nil {
		return nil, gqlerror.Errorf("failed to update blueprint: %v", err)
	}

	// Load all of the blueprint resources
	err = engine.LoadResources(ctx, tx.Client(), r.cbleServer, entBlueprint)
	if err != nil {
		tx.Rollback()
		return nil, gqlerror.Errorf("failed to load resource: %v", err)
	}

	// Commit the transaction
	err = tx.Commit()
	if err != nil {
		tx.Rollback()
		return nil, gqlerror.Errorf("failed to commit transaction: %v", err)
	}

	return entBlueprint.Unwrap(), nil
}

// Delete a blueprint (requires permission `x.x.blueprints.x.delete`)
func (r *mutationResolver) DeleteBlueprint(ctx context.Context, id uuid.UUID) (bool, error) {
	// Check if current user has permission
	if hasPerm, err := permission.CurrentUserHasBlueprintDelete(ctx, r.ent, id); err != nil || !hasPerm {
		return false, auth.PERMISSION_DENIED_GQL_ERROR
	}

	// Delete the blueprint
	err := r.ent.Blueprint.DeleteOneID(id).Exec(ctx)
	if err != nil {
		return false, gqlerror.Errorf("failed to delete blueprint: %v", err)
	}

	return true, nil
}

// Update a deployment (requires permission `x.x.deployments.x.update`)
func (r *mutationResolver) UpdateDeployment(ctx context.Context, id uuid.UUID, input model.DeploymentInput) (*ent.Deployment, error) {
	// Check if current user has permission
	if hasPerm, err := permission.CurrentUserHasDeploymentUpdate(ctx, r.ent, id); err != nil || !hasPerm {
		return nil, auth.PERMISSION_DENIED_GQL_ERROR
	}

	return r.ent.Deployment.UpdateOneID(id).SetName(input.Name).Save(ctx)
}

// Load a provider to connect it to CBLE (requires permission `x.x.providers.x.load`)
func (r *mutationResolver) LoadProvider(ctx context.Context, id uuid.UUID) (*ent.Provider, error) {
	// Check if current user has permission
	if hasPerm, err := permission.CurrentUserHasProviderLoad(ctx, r.ent, id); err != nil || !hasPerm {
		return nil, auth.PERMISSION_DENIED_GQL_ERROR
	}

	// Check the provider exists
	entProvider, err := r.ent.Provider.Get(ctx, id)
	if err != nil {
		return nil, gqlerror.Errorf("could not find provider with id %s", id)
	}

	// Queue the provider to load
	r.cbleServer.QueueLoadProvider(id.String())

	return entProvider, nil
}

// Unload a provider to disconnect it from CBLE (requires permission `x.x.providers.x.unload`)
func (r *mutationResolver) UnloadProvider(ctx context.Context, id uuid.UUID) (*ent.Provider, error) {
	// Check if current user has permission
	if hasPerm, err := permission.CurrentUserHasProviderUnload(ctx, r.ent, id); err != nil || !hasPerm {
		return nil, auth.PERMISSION_DENIED_GQL_ERROR
	}

	// Check the provider exists
	entProvider, err := r.ent.Provider.Get(ctx, id)
	if err != nil {
		return nil, gqlerror.Errorf("could not find provider with id %s", id)
	}

	// Queue the provider to unload
	err = r.cbleServer.QueueUnloadProvider(id.String())
	if err != nil {
		return entProvider, fmt.Errorf("failed to unload provider: %v", err)
	}

	return entProvider, nil
}

// Applies the stored configuration to the provider (requires permission `x.x.providers.x.configure`)
func (r *mutationResolver) ConfigureProvider(ctx context.Context, id uuid.UUID) (*ent.Provider, error) {
	// Check if current user has permission
	if hasPerm, err := permission.CurrentUserHasProviderConfigure(ctx, r.ent, id); err != nil || !hasPerm {
		return nil, auth.PERMISSION_DENIED_GQL_ERROR
	}

	// Get the provider
	entProvider, err := r.ent.Provider.Get(ctx, id)
	if err != nil {
		return nil, gqlerror.Errorf("could not find provider with id %s: %v", id, err)
	}

	reply, err := r.cbleServer.Configure(ctx, entProvider)
	if err != nil {
		return nil, gqlerror.Errorf("failed to configure provider: %v", err)
	}
	if !reply.Success {
		return nil, gqlerror.Errorf("failed to configure provider: unknown error")
	}

	return entProvider, nil
}

// Deploy a blueprint (requires permission `x.x.blueprints.x.deploy`)
func (r *mutationResolver) DeployBlueprint(ctx context.Context, id uuid.UUID, templateVars map[string]string) (*ent.Deployment, error) {
	// Check if current user has permission
	if hasPerm, err := permission.CurrentUserHasBlueprintDeploy(ctx, r.ent, id); err != nil || !hasPerm {
		return nil, auth.PERMISSION_DENIED_GQL_ERROR
	}

	// Get the current authenticated user
	currentUser, err := auth.ForContext(ctx)
	if err != nil {
		return nil, gqlerror.Errorf("failed to get user from context: %v", err)
	}

	// Get the blueprint by ID
	entBlueprint, err := r.ent.Blueprint.Get(ctx, id)
	if err != nil {
		return nil, fmt.Errorf("failed to query blueprint: %v", err)
	}

	// Create a transactional client
	tx, err := r.ent.Tx(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to create transactional client: %v", err)
	}

	// Create the deployment
	entDeployment, err := engine.CreateDeployment(ctx, tx.Client(), entBlueprint, templateVars, currentUser)
	if err != nil {
		tx.Rollback()
		return nil, fmt.Errorf("failed to create deployment: %v", err)
	}

	// Commit the transaction
	err = tx.Commit()
	if err != nil {
		tx.Rollback()
		return nil, fmt.Errorf("failed to commit transaction: %v", err)
	}

	// Re-query deployment using non-transaction client
	entDeployment, err = r.ent.Deployment.Get(ctx, entDeployment.ID)
	if err != nil {
		return nil, fmt.Errorf("failed to re-query deployment: %v", err)
	}

	// Spawn deployment routine
	go engine.StartDeployment(r.ent, r.cbleServer, entDeployment)

	return entDeployment, nil
}

// Destroy a deployment (requires permission `x.x.deployments.x.destroy`)
func (r *mutationResolver) DestroyDeployment(ctx context.Context, id uuid.UUID) (*ent.Deployment, error) {
	// Check if current user has permission
	if hasPerm, err := permission.CurrentUserHasDeploymentDestroy(ctx, r.ent, id); err != nil || !hasPerm {
		return nil, auth.PERMISSION_DENIED_GQL_ERROR
	}

	// Get the deployment by ID
	entDeployment, err := r.ent.Deployment.Get(ctx, id)
	if err != nil {
		return nil, fmt.Errorf("failed to query deployment: %v", err)
	}

	// Spawn destruction routine
	go engine.StartDestroy(r.ent, r.cbleServer, entDeployment)

	return entDeployment, nil
}

// Redeploy nodes within a deployment (requires permission `x.x.deployments.x.redeploy`)
func (r *mutationResolver) RedeployDeployment(ctx context.Context, id uuid.UUID, nodeIds []uuid.UUID) (*ent.Deployment, error) {
	// Check if current user has permission
	if hasPerm, err := permission.CurrentUserHasDeploymentRedeploy(ctx, r.ent, id); err != nil || !hasPerm {
		return nil, auth.PERMISSION_DENIED_GQL_ERROR
	}

	// Get the deployment by ID
	entDeployment, err := r.ent.Deployment.Get(ctx, id)
	if err != nil {
		return nil, fmt.Errorf("failed to query deployment: %v", err)
	}

	// Spawn destruction routine
	go engine.StartRedeploy(r.ent, r.cbleServer, entDeployment, nodeIds)

	return entDeployment, nil
}

// DeploymentNodePower is the resolver for the deploymentNodePower field.
func (r *mutationResolver) DeploymentNodePower(ctx context.Context, id uuid.UUID, state pgrpc.PowerState) (bool, error) {
	// Get the deployment node by ID
	entDeploymentNode, err := r.ent.DeploymentNode.Get(ctx, id)
	if err != nil {
		return false, gqlerror.Errorf("failed to query deployment node: %v", err)
	}

	// Get the deployment to check permission
	entDeployment, err := entDeploymentNode.QueryDeployment().Only(ctx)
	if err != nil {
		return false, gqlerror.Errorf("failed to query deployment: %v", err)
	}

	// Check if current user has permission
	if hasPerm, err := permission.CurrentUserHasDeploymentPower(ctx, r.ent, entDeployment.ID); err != nil || !hasPerm {
		return false, auth.PERMISSION_DENIED_GQL_ERROR
	}

	// Get the provider
	entProvider, err := entDeploymentNode.QueryDeployment().QueryBlueprint().QueryProvider().Only(ctx)
	if err != nil {
		return false, gqlerror.Errorf("failed to query provider: %v", err)
	}

	// Update the resource power state
	reply, err := r.cbleServer.ResourcePower(ctx, entProvider, entDeploymentNode, state)
	if err != nil {
		return false, gqlerror.Errorf("transport error: %v", err)
	}
	if !reply.Success {
		if reply.Error != nil {
			return false, gqlerror.Errorf("failed to update power state: %v", *reply.Error)
		}
		return false, gqlerror.Errorf("failed to update power state: unknown error")
	}

	return true, nil
}

// DeploymentPower is the resolver for the deploymentPower field.
func (r *mutationResolver) DeploymentPower(ctx context.Context, id uuid.UUID, state pgrpc.PowerState) (bool, error) {
	// Check if current user has permission
	if hasPerm, err := permission.CurrentUserHasDeploymentPower(ctx, r.ent, id); err != nil || !hasPerm {
		return false, auth.PERMISSION_DENIED_GQL_ERROR
	}

	// Get the deployment by ID
	entDeployment, err := r.ent.Deployment.Get(ctx, id)
	if err != nil {
		return false, gqlerror.Errorf("failed to query deployment: %v", err)
	}
	// Get the provider
	entProvider, err := entDeployment.QueryBlueprint().QueryProvider().Only(ctx)
	if err != nil {
		return false, gqlerror.Errorf("failed to query provider: %v", err)
	}
	// Get all of the deployment nodes which support power feature
	entDeploymentNodes, err := entDeployment.QueryDeploymentNodes().Where(
		deploymentnode.HasResourceWith(func(s *sql.Selector) {
			s.Where(sqljson.ValueEQ(resource.FieldFeatures, true, sqljson.Path("power"))) // Find where has { "power": true, ... }
		}),
	).All(ctx)
	if err != nil {
		return false, gqlerror.Errorf("failed to query deployment nodes with power support: %v", err)
	}

	var wg sync.WaitGroup

	for _, entDeploymentNode := range entDeploymentNodes {
		wg.Add(1)
		go func(wg *sync.WaitGroup, entDeploymentNode *ent.DeploymentNode) {
			defer wg.Done()
			// Update the resource power state
			reply, err := r.cbleServer.ResourcePower(ctx, entProvider, entDeploymentNode, state)
			if err != nil {
				graphql.AddErrorf(ctx, "transport error: %v", err)
			}
			if !reply.Success {
				if reply.Error != nil {
					graphql.AddErrorf(ctx, "failed to update power state: %v", *reply.Error)
				}
				graphql.AddErrorf(ctx, "failed to update power state: unknown error")
			}
		}(&wg, entDeploymentNode)
	}

	// Wait for all of the resources to power down
	wg.Wait()

	// If we successfully applied all power states
	if len(graphql.GetErrors(ctx).Unwrap()) == 0 {
		// Default set to COMPLETE
		deploymentState := deployment.StateComplete
		// If we're powering off, set to SUSPENDED
		if state == pgrpc.PowerState_OFF {
			deploymentState = deployment.StateSuspended
		}
		// Update the deployment state
		err = entDeployment.Update().SetState(deploymentState).Exec(ctx)
		if err != nil {
			return false, gqlerror.Errorf("failed to update deployment state: %v", err)
		}
	} else {
		return false, gqlerror.Errorf("failed to apply deployment power state")
	}

	return true, nil
}

// ConfigBytes is the resolver for the configBytes field.
func (r *providerResolver) ConfigBytes(ctx context.Context, obj *ent.Provider) (string, error) {
	return string(obj.ConfigBytes), nil
}

// Blueprints is the resolver for the blueprints field.
func (r *providerResolver) Blueprints(ctx context.Context, obj *ent.Provider) ([]*ent.Blueprint, error) {
	return obj.QueryBlueprints().All(ctx)
}

// Get current user
func (r *queryResolver) Me(ctx context.Context) (*ent.User, error) {
	return auth.ForContext(ctx)
}

// MeHasPermission is the resolver for the meHasPermission field.
func (r *queryResolver) MeHasPermission(ctx context.Context, objectType grantedpermission.ObjectType, objectID *uuid.UUID, action actions.PermissionAction) (bool, error) {
	// Convert nillable ID to uuid.Nil
	objectId := uuid.Nil
	if objectID != nil {
		objectId = *objectID
	}

	return permission.CurrentUserHasPermission(ctx, r.ent, objectType, objectId, action)
}

// List users (requires permission `x.x.users.*.list`)
func (r *queryResolver) Users(ctx context.Context, count int, offset *int) (*model.UserPage, error) {
	// Check if current user has permission
	if hasPerm, err := permission.CurrentUserHasUserList(ctx, r.ent, uuid.Nil); err != nil || !hasPerm {
		return nil, auth.PERMISSION_DENIED_GQL_ERROR
	}

	q := r.ent.User.Query().Limit(count)
	if offset != nil {
		q = q.Offset(*offset)
	}
	entUsers, err := q.All(ctx)
	if err != nil {
		return nil, err
	}
	entUserCount, err := r.ent.User.Query().Count(ctx)
	if err != nil {
		return nil, err
	}
	return &model.UserPage{
		Users: entUsers,
		Total: entUserCount,
	}, nil
}

// Get a user (requires permission `x.x.users.x.get`)
func (r *queryResolver) User(ctx context.Context, id uuid.UUID) (*ent.User, error) {
	// Check if current user has permission
	if hasPerm, err := permission.CurrentUserHasUserGet(ctx, r.ent, id); err != nil || !hasPerm {
		return nil, auth.PERMISSION_DENIED_GQL_ERROR
	}

	return r.ent.User.Get(ctx, id)
}

// List groups (requires permission `x.x.groups.*.list`)
func (r *queryResolver) Groups(ctx context.Context, count int, offset *int) (*model.GroupPage, error) {
	// Check if current user has permission
	if hasPerm, err := permission.CurrentUserHasGroupList(ctx, r.ent, uuid.Nil); err != nil || !hasPerm {
		return nil, auth.PERMISSION_DENIED_GQL_ERROR
	}

	q := r.ent.Group.Query().Limit(count)
	if offset != nil {
		q = q.Offset(*offset)
	}
	entGroups, err := q.All(ctx)
	if err != nil {
		return nil, err
	}
	entGroupCount, err := r.ent.Group.Query().Count(ctx)
	if err != nil {
		return nil, err
	}
	return &model.GroupPage{
		Groups: entGroups,
		Total:  entGroupCount,
	}, nil
}

// Get a group (requires permission `x.x.groups.x.get`)
func (r *queryResolver) Group(ctx context.Context, id uuid.UUID) (*ent.Group, error) {
	// Check if current user has permission
	if hasPerm, err := permission.CurrentUserHasGroupGet(ctx, r.ent, id); err != nil || !hasPerm {
		return nil, auth.PERMISSION_DENIED_GQL_ERROR
	}

	return r.ent.Group.Get(ctx, id)
}

// List permissions (requires permission `x.x.permission.*.list`)
func (r *queryResolver) Permissions(ctx context.Context, count int, offset *int) (*model.GrantedPermissionPage, error) {
	// Check if current user has permission
	if hasPerm, err := permission.CurrentUserHasPermissionList(ctx, r.ent, uuid.Nil); err != nil || !hasPerm {
		return nil, auth.PERMISSION_DENIED_GQL_ERROR
	}

	q := r.ent.GrantedPermission.Query().Order(
		ent.Asc(
			grantedpermission.FieldSubjectType,
			grantedpermission.FieldObjectType,
			grantedpermission.FieldAction,
		),
	).
		Limit(count)
	if offset != nil {
		q = q.Offset(*offset)
	}
	entPermissions, err := q.All(ctx)
	if err != nil {
		return nil, err
	}
	entPermissionCount, err := r.ent.GrantedPermission.Query().Count(ctx)
	if err != nil {
		return nil, err
	}
	return &model.GrantedPermissionPage{
		Permissions: entPermissions,
		Total:       entPermissionCount,
	}, nil
}

// Get a permission (requires permission `x.x.permission.x.get`)
func (r *queryResolver) Permission(ctx context.Context, id uuid.UUID) (*ent.GrantedPermission, error) {
	// Check if current user has permission
	if hasPerm, err := permission.CurrentUserHasPermissionGet(ctx, r.ent, id); err != nil || !hasPerm {
		return nil, auth.PERMISSION_DENIED_GQL_ERROR
	}

	return r.ent.GrantedPermission.Get(ctx, id)
}

// List providers (requires permission `x.x.providers.*.list`)
func (r *queryResolver) Providers(ctx context.Context, count int, offset *int) (*model.ProviderPage, error) {
	// Check if current user has permission
	if hasPerm, err := permission.CurrentUserHasProviderList(ctx, r.ent, uuid.Nil); err != nil || !hasPerm {
		return nil, auth.PERMISSION_DENIED_GQL_ERROR
	}

	q := r.ent.Provider.Query().Limit(count)
	if offset != nil {
		q = q.Offset(*offset)
	}
	entProviders, err := q.All(ctx)
	if err != nil {
		return nil, err
	}
	entProviderCount, err := r.ent.Provider.Query().Count(ctx)
	if err != nil {
		return nil, err
	}
	return &model.ProviderPage{
		Providers: entProviders,
		Total:     entProviderCount,
	}, nil
}

// Get a provider (requires permission `x.x.providers.x.get`)
func (r *queryResolver) Provider(ctx context.Context, id uuid.UUID) (*ent.Provider, error) {
	// Check if current user has permission
	if hasPerm, err := permission.CurrentUserHasProviderGet(ctx, r.ent, id); err != nil || !hasPerm {
		return nil, auth.PERMISSION_DENIED_GQL_ERROR
	}

	return r.ent.Provider.Get(ctx, id)
}

// List blueprints (requires permission `x.x.blueprints.*.list`)
func (r *queryResolver) Blueprints(ctx context.Context, count int, offset *int) (*model.BlueprintPage, error) {
	// Check if current user has permission
	if hasPerm, err := permission.CurrentUserHasBlueprintList(ctx, r.ent, uuid.Nil); err != nil || !hasPerm {
		return nil, auth.PERMISSION_DENIED_GQL_ERROR
	}

	q := r.ent.Blueprint.Query().Limit(count)
	if offset != nil {
		q = q.Offset(*offset)
	}
	entBlueprints, err := q.All(ctx)
	if err != nil {
		return nil, err
	}
	entBlueprintCount, err := r.ent.Blueprint.Query().Count(ctx)
	if err != nil {
		return nil, err
	}
	return &model.BlueprintPage{
		Blueprints: entBlueprints,
		Total:      entBlueprintCount,
	}, nil
}

// List all blueprints user has `blueprint.x.deploy` permission for
func (r *queryResolver) DeployableBlueprints(ctx context.Context, count int, offset *int) (*model.BlueprintPage, error) {
	// Check if user has permission to deploy all blueprints
	if hasPerm, err := permission.CurrentUserHasBlueprintDeploy(ctx, r.ent, uuid.Nil); err != nil {
		return nil, auth.PERMISSION_DENIED_GQL_ERROR
	} else if hasPerm {
		q := r.ent.Blueprint.Query().Limit(count)
		if offset != nil {
			q = q.Offset(*offset)
		}
		entBlueprints, err := q.All(ctx)
		if err != nil {
			return nil, err
		}
		entBlueprintCount, err := r.ent.Blueprint.Query().Count(ctx)
		if err != nil {
			return nil, err
		}
		return &model.BlueprintPage{
			Blueprints: entBlueprints,
			Total:      entBlueprintCount,
		}, nil
	}

	// Get the current logged in user
	currentUser, err := auth.ForContext(ctx)
	if err != nil {
		return nil, auth.AUTH_REQUIRED_GQL_ERROR
	}
	entGroupIDs, err := currentUser.QueryGroups().IDs(ctx)
	if err != nil {
		return nil, gqlerror.Errorf("failed to get user group IDs: %v", err)
	}

	var entBlueprintIDs []uuid.UUID

	err = r.ent.GrantedPermission.Query().Where(
		grantedpermission.Or(
			grantedpermission.And(
				grantedpermission.SubjectTypeEQ(grantedpermission.SubjectTypeUser),
				grantedpermission.SubjectIDEQ(currentUser.ID),
			),
			grantedpermission.And(
				grantedpermission.SubjectTypeEQ(grantedpermission.SubjectTypeGroup),
				grantedpermission.SubjectIDIn(entGroupIDs...),
			),
		),
		grantedpermission.ObjectTypeEQ(grantedpermission.ObjectTypeBlueprint),
	).Select(grantedpermission.FieldObjectID).Scan(ctx, &entBlueprintIDs)
	if err != nil {
		return nil, gqlerror.Errorf("failed to scan blueprint IDs from permissions: %v", err)
	}

	q := r.ent.Blueprint.Query().
		Where(blueprint.IDIn(entBlueprintIDs...)).
		Limit(count)
	if offset != nil {
		q = q.Offset(*offset)
	}
	entBlueprints, err := q.All(ctx)
	if err != nil {
		return nil, err
	}
	entBlueprintCount, err := r.ent.Blueprint.Query().Where(blueprint.IDIn(entBlueprintIDs...)).Count(ctx)
	if err != nil {
		return nil, err
	}
	return &model.BlueprintPage{
		Blueprints: entBlueprints,
		Total:      entBlueprintCount,
	}, nil
}

// Get a blueprint (requires permission `x.x.blueprints.x.get`)
func (r *queryResolver) Blueprint(ctx context.Context, id uuid.UUID) (*ent.Blueprint, error) {
	// Check if current user has permission
	if hasPerm, err := permission.CurrentUserHasBlueprintGet(ctx, r.ent, id); err != nil || !hasPerm {
		return nil, auth.PERMISSION_DENIED_GQL_ERROR
	}

	return r.ent.Blueprint.Get(ctx, id)
}

// List deployments (requires permission `x.x.deployments.*.list`)
func (r *queryResolver) Deployments(ctx context.Context, count int, offset *int) (*model.DeploymentPage, error) {
	// Check if current user has permission
	if hasPerm, err := permission.CurrentUserHasDeploymentList(ctx, r.ent, uuid.Nil); err != nil || !hasPerm {
		return nil, auth.PERMISSION_DENIED_GQL_ERROR
	}

	q := r.ent.Deployment.Query().Limit(count)
	if offset != nil {
		q = q.Offset(*offset)
	}
	entDeployments, err := q.All(ctx)
	if err != nil {
		return nil, err
	}
	entDeploymentCount, err := r.ent.Deployment.Query().Count(ctx)
	if err != nil {
		return nil, err
	}
	return &model.DeploymentPage{
		Deployments: entDeployments,
		Total:       entDeploymentCount,
	}, nil
}

// Get a deployment (requires permission `x.x.deployments.x.get`)
func (r *queryResolver) Deployment(ctx context.Context, id uuid.UUID) (*ent.Deployment, error) {
	// Check if current user has permission
	if hasPerm, err := permission.CurrentUserHasDeploymentGet(ctx, r.ent, id); err != nil || !hasPerm {
		return nil, auth.PERMISSION_DENIED_GQL_ERROR
	}

	// Set the last access time
	if err := r.ent.Deployment.UpdateOneID(id).SetLastAccessed(time.Now()).Exec(ctx); err != nil {
		return nil, gqlerror.Errorf("failed to update last access time: %v", err)
	}

	return r.ent.Deployment.Get(ctx, id)
}

// SearchUsers is the resolver for the searchUsers field.
func (r *queryResolver) SearchUsers(ctx context.Context, search string, count int, offset *int) (*model.UserPage, error) {
	q := r.ent.User.Query().Where(
		user.Or(
			IDFuzzySearch(search),
			user.UsernameContainsFold(search),
			user.EmailContainsFold(search),
			user.FirstNameContainsFold(search),
			user.LastNameContainsFold(search),
		),
	).Limit(count)
	if offset != nil {
		q = q.Offset(*offset)
	}
	entUsers, err := q.All(ctx)
	if err != nil {
		return nil, err
	}
	entUserCount, err := q.Count(ctx)
	if err != nil {
		return nil, err
	}
	return &model.UserPage{
		Users: entUsers,
		Total: entUserCount,
	}, nil
}

// SearchGroups is the resolver for the searchGroups field.
func (r *queryResolver) SearchGroups(ctx context.Context, search string, count int, offset *int) (*model.GroupPage, error) {
	q := r.ent.Group.Query().Where(
		group.Or(
			IDFuzzySearch(search),
			group.NameContainsFold(search),
		),
	).Limit(count)
	if offset != nil {
		q = q.Offset(*offset)
	}
	entGroups, err := q.All(ctx)
	if err != nil {
		return nil, err
	}
	entGroupCount, err := q.Count(ctx)
	if err != nil {
		return nil, err
	}
	return &model.GroupPage{
		Groups: entGroups,
		Total:  entGroupCount,
	}, nil
}

// Type is the resolver for the type field.
func (r *resourceResolver) Type(ctx context.Context, obj *ent.Resource) (model.ResourceType, error) {
	return model.ResourceType(obj.Type), nil
}

// Object is the resolver for the object field.
func (r *resourceResolver) Object(ctx context.Context, obj *ent.Resource) (string, error) {
	objectBytes, err := yaml.Marshal(obj.Object)
	if err != nil {
		return "", err
	}
	return string(objectBytes), nil
}

// Blueprint is the resolver for the blueprint field.
func (r *resourceResolver) Blueprint(ctx context.Context, obj *ent.Resource) (*ent.Blueprint, error) {
	return obj.QueryBlueprint().Only(ctx)
}

// RequiredBy is the resolver for the requiredBy field.
func (r *resourceResolver) RequiredBy(ctx context.Context, obj *ent.Resource) ([]*ent.Resource, error) {
	return obj.QueryRequiredBy().All(ctx)
}

// DependsOn is the resolver for the dependsOn field.
func (r *resourceResolver) DependsOn(ctx context.Context, obj *ent.Resource) ([]*ent.Resource, error) {
	return obj.QueryDependsOn().All(ctx)
}

// Groups is the resolver for the groups field.
func (r *userResolver) Groups(ctx context.Context, obj *ent.User) ([]*ent.Group, error) {
	return obj.QueryGroups().All(ctx)
}

// Deployments is the resolver for the deployments field.
func (r *userResolver) Deployments(ctx context.Context, obj *ent.User) ([]*ent.Deployment, error) {
	return obj.QueryDeployments().All(ctx)
}

// Blueprint returns generated.BlueprintResolver implementation.
func (r *Resolver) Blueprint() generated.BlueprintResolver { return &blueprintResolver{r} }

// Deployment returns generated.DeploymentResolver implementation.
func (r *Resolver) Deployment() generated.DeploymentResolver { return &deploymentResolver{r} }

// DeploymentNode returns generated.DeploymentNodeResolver implementation.
func (r *Resolver) DeploymentNode() generated.DeploymentNodeResolver {
	return &deploymentNodeResolver{r}
}

// GrantedPermission returns generated.GrantedPermissionResolver implementation.
func (r *Resolver) GrantedPermission() generated.GrantedPermissionResolver {
	return &grantedPermissionResolver{r}
}

// Group returns generated.GroupResolver implementation.
func (r *Resolver) Group() generated.GroupResolver { return &groupResolver{r} }

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// Provider returns generated.ProviderResolver implementation.
func (r *Resolver) Provider() generated.ProviderResolver { return &providerResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

// Resource returns generated.ResourceResolver implementation.
func (r *Resolver) Resource() generated.ResourceResolver { return &resourceResolver{r} }

// User returns generated.UserResolver implementation.
func (r *Resolver) User() generated.UserResolver { return &userResolver{r} }

type blueprintResolver struct{ *Resolver }
type deploymentResolver struct{ *Resolver }
type deploymentNodeResolver struct{ *Resolver }
type grantedPermissionResolver struct{ *Resolver }
type groupResolver struct{ *Resolver }
type mutationResolver struct{ *Resolver }
type providerResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type resourceResolver struct{ *Resolver }
type userResolver struct{ *Resolver }
