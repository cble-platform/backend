package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.40

import (
	"context"
	"fmt"

	"github.com/cble-platform/cble-backend/blueprintengine"
	"github.com/cble-platform/cble-backend/ent"
	"github.com/cble-platform/cble-backend/graph/generated"
	"github.com/cble-platform/cble-backend/graph/model"
	"github.com/google/uuid"
	"github.com/vektah/gqlparser/v2/gqlerror"
	"gopkg.in/yaml.v3"
)

// BlueprintTemplate is the resolver for the blueprintTemplate field.
func (r *blueprintResolver) BlueprintTemplate(ctx context.Context, obj *ent.Blueprint) (string, error) {
	return string(obj.BlueprintTemplate), nil
}

// Provider is the resolver for the Provider field.
func (r *blueprintResolver) Provider(ctx context.Context, obj *ent.Blueprint) (*ent.Provider, error) {
	entProvider, err := obj.QueryProvider().Only(ctx)
	if ent.IsNotFound(err) {
		return nil, nil
	}
	return entProvider, err
}

// Resources is the resolver for the resources field.
func (r *blueprintResolver) Resources(ctx context.Context, obj *ent.Blueprint) ([]*ent.Resource, error) {
	return obj.QueryResources().All(ctx)
}

// CreateProvider is the resolver for the createProvider field.
func (r *mutationResolver) CreateProvider(ctx context.Context, input model.ProviderInput) (*ent.Provider, error) {
	entProvider, err := r.ent.Provider.Create().
		SetDisplayName(input.DisplayName).
		SetProviderGitURL(input.ProviderGitURL).
		SetProviderVersion(input.ProviderVersion).
		SetConfigBytes([]byte(input.ConfigBytes)).
		Save(ctx)
	if err != nil {
		return nil, gqlerror.Errorf("failed to create provider: %v", err)
	}

	return entProvider, nil
}

// CreateBlueprint is the resolver for the createBlueprint field.
func (r *mutationResolver) CreateBlueprint(ctx context.Context, input model.BlueprintInput) (*ent.Blueprint, error) {
	// Get the edge objects
	entProvider, err := r.ent.Provider.Get(ctx, input.ProviderID)
	if err != nil {
		return nil, gqlerror.Errorf("failed to query provider by ID: %v", err)
	}

	// Create a transactional client
	tx, err := r.ent.Tx(ctx)
	if err != nil {
		return nil, gqlerror.Errorf("failed to create transactional client: %v", err)
	}

	// // Convert variable types from string to model.BlueprintVariableType
	// varTypes := make(map[string]models.BlueprintVariableType)
	// ok := true
	// for k, v := range input.VariableTypes {
	// 	varTypes[k], ok = models.ParseBlueprintVariableType(v)
	// 	if !ok {
	// 		return nil, gqlerror.Errorf("variable %s has invalid type", k)
	// 	}
	// }

	// Create the blueprint
	entBlueprint, err := tx.Blueprint.Create().
		SetName(input.Name).
		SetDescription(input.Description).
		SetBlueprintTemplate([]byte(input.BlueprintTemplate)).
		// SetVariableTypes(varTypes).
		SetVariableTypes(input.VariableTypes).
		SetProvider(entProvider).
		Save(ctx)
	if err != nil {
		tx.Rollback()
		return nil, gqlerror.Errorf("failed to create blueprint: %v", err)
	}

	// Load all of the blueprint resources
	err = blueprintengine.LoadResources(ctx, tx.Client(), entBlueprint)
	if err != nil {
		tx.Rollback()
		return nil, gqlerror.Errorf("failed to load resource: %v", err)
	}

	// Commit the transaction
	err = tx.Commit()
	if err != nil {
		tx.Rollback()
		return nil, gqlerror.Errorf("failed to commit transaction: %v", err)
	}

	return entBlueprint.Unwrap(), nil
}

// UpdateBlueprint is the resolver for the updateBlueprint field.
func (r *mutationResolver) UpdateBlueprint(ctx context.Context, id uuid.UUID, input model.BlueprintInput) (*ent.Blueprint, error) {
	// Create a transactional client
	tx, err := r.ent.Tx(ctx)
	if err != nil {
		return nil, gqlerror.Errorf("failed to create transactional client: %v", err)
	}

	// Get the object from ENT
	entBlueprint, err := tx.Blueprint.Get(ctx, id)
	if err != nil {
		return nil, gqlerror.Errorf("failed to query blueprint: %v", err)
	}

	// Get the edge objects
	entProvider, err := tx.Provider.Get(ctx, input.ProviderID)
	if err != nil {
		return nil, gqlerror.Errorf("failed to query provider by ID: %v", err)
	}

	// // Convert variable types from string to model.BlueprintVariableType
	// varTypes := make(map[string]models.BlueprintVariableType)
	// ok := true
	// for k, v := range input.VariableTypes {
	// 	varTypes[k], ok = models.ParseBlueprintVariableType(v)
	// 	if !ok {
	// 		return nil, gqlerror.Errorf("variable %s has invalid type", k)
	// 	}
	// }

	// Update the blueprint
	entBlueprint, err = entBlueprint.Update().
		SetName(input.Name).
		SetDescription(input.Description).
		SetBlueprintTemplate([]byte(input.BlueprintTemplate)).
		// SetVariableTypes(varTypes).
		SetVariableTypes(input.VariableTypes).
		SetProvider(entProvider).
		Save(ctx)
	if err != nil {
		return nil, gqlerror.Errorf("failed to update blueprint: %v", err)
	}

	// Load all of the blueprint resources
	err = blueprintengine.LoadResources(ctx, tx.Client(), entBlueprint)
	if err != nil {
		tx.Rollback()
		return nil, gqlerror.Errorf("failed to load resource: %v", err)
	}

	// Commit the transaction
	err = tx.Commit()
	if err != nil {
		tx.Rollback()
		return nil, gqlerror.Errorf("failed to commit transaction: %v", err)
	}

	return entBlueprint.Unwrap(), nil
}

// DeleteBlueprint is the resolver for the deleteBlueprint field.
func (r *mutationResolver) DeleteBlueprint(ctx context.Context, id uuid.UUID) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteBlueprint - deleteBlueprint"))
}

// ConfigBytes is the resolver for the configBytes field.
func (r *providerResolver) ConfigBytes(ctx context.Context, obj *ent.Provider) (string, error) {
	return string(obj.ConfigBytes), nil
}

// Blueprints is the resolver for the blueprints field.
func (r *providerResolver) Blueprints(ctx context.Context, obj *ent.Provider) ([]*ent.Blueprint, error) {
	return obj.QueryBlueprints().All(ctx)
}

// Providers is the resolver for the Providers field.
func (r *queryResolver) Providers(ctx context.Context) ([]*ent.Provider, error) {
	return r.ent.Provider.Query().All(ctx)
}

// Blueprints is the resolver for the blueprints field.
func (r *queryResolver) Blueprints(ctx context.Context) ([]*ent.Blueprint, error) {
	return r.ent.Blueprint.Query().All(ctx)
}

// Blueprint is the resolver for the blueprint field.
func (r *queryResolver) Blueprint(ctx context.Context, id uuid.UUID) (*ent.Blueprint, error) {
	return r.ent.Blueprint.Get(ctx, id)
}

// Object is the resolver for the object field.
func (r *resourceResolver) Object(ctx context.Context, obj *ent.Resource) (string, error) {
	objectBytes, err := yaml.Marshal(obj.Object)
	if err != nil {
		return "", err
	}
	return string(objectBytes), nil
}

// Blueprint is the resolver for the blueprint field.
func (r *resourceResolver) Blueprint(ctx context.Context, obj *ent.Resource) (*ent.Blueprint, error) {
	return obj.QueryBlueprint().Only(ctx)
}

// RequiredBy is the resolver for the requiredBy field.
func (r *resourceResolver) RequiredBy(ctx context.Context, obj *ent.Resource) ([]*ent.Resource, error) {
	return obj.QueryRequiredBy().All(ctx)
}

// DependsOn is the resolver for the dependsOn field.
func (r *resourceResolver) DependsOn(ctx context.Context, obj *ent.Resource) ([]*ent.Resource, error) {
	return obj.QueryDependsOn().All(ctx)
}

// Blueprint returns generated.BlueprintResolver implementation.
func (r *Resolver) Blueprint() generated.BlueprintResolver { return &blueprintResolver{r} }

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// Provider returns generated.ProviderResolver implementation.
func (r *Resolver) Provider() generated.ProviderResolver { return &providerResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

// Resource returns generated.ResourceResolver implementation.
func (r *Resolver) Resource() generated.ResourceResolver { return &resourceResolver{r} }

type blueprintResolver struct{ *Resolver }
type mutationResolver struct{ *Resolver }
type providerResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type resourceResolver struct{ *Resolver }
