package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.40

import (
	"context"
	"fmt"

	"github.com/cble-platform/cble-backend/ent"
	"github.com/cble-platform/cble-backend/graph/generated"
	"github.com/cble-platform/cble-backend/graph/model"
	"github.com/google/uuid"
)

// ID is the resolver for the id field.
func (r *blueprintResolver) ID(ctx context.Context, obj *ent.Blueprint) (string, error) {
	return obj.ID.String(), nil
}

// BlueprintTemplate is the resolver for the blueprintTemplate field.
func (r *blueprintResolver) BlueprintTemplate(ctx context.Context, obj *ent.Blueprint) (string, error) {
	return string(obj.BlueprintTemplate), nil
}

// ParentGroup is the resolver for the parentGroup field.
func (r *blueprintResolver) ParentGroup(ctx context.Context, obj *ent.Blueprint) (*ent.Group, error) {
	parentGroup, err := obj.QueryParentGroup().Only(ctx)
	if ent.IsNotFound(err) {
		return nil, nil
	}
	return parentGroup, err
}

// Provider is the resolver for the Provider field.
func (r *blueprintResolver) Provider(ctx context.Context, obj *ent.Blueprint) (*ent.Provider, error) {
	entProvider, err := obj.QueryProvider().Only(ctx)
	if ent.IsNotFound(err) {
		return nil, nil
	}
	return entProvider, err
}

// Deployments is the resolver for the deployments field.
func (r *blueprintResolver) Deployments(ctx context.Context, obj *ent.Blueprint) ([]*ent.Deployment, error) {
	return obj.QueryDeployments().All(ctx)
}

// ID is the resolver for the id field.
func (r *deploymentResolver) ID(ctx context.Context, obj *ent.Deployment) (string, error) {
	return obj.ID.String(), nil
}

// Blueprint is the resolver for the blueprint field.
func (r *deploymentResolver) Blueprint(ctx context.Context, obj *ent.Deployment) (*ent.Blueprint, error) {
	blueprint, err := obj.QueryBlueprint().Only(ctx)
	if ent.IsNotFound(err) {
		return nil, nil
	}
	return blueprint, err
}

// Requester is the resolver for the requester field.
func (r *deploymentResolver) Requester(ctx context.Context, obj *ent.Deployment) (*ent.User, error) {
	requester, err := obj.QueryRequester().Only(ctx)
	if ent.IsNotFound(err) {
		return nil, nil
	}
	return requester, err
}

// ID is the resolver for the id field.
func (r *groupResolver) ID(ctx context.Context, obj *ent.Group) (string, error) {
	return obj.ID.String(), nil
}

// Children is the resolver for the children field.
func (r *groupResolver) Children(ctx context.Context, obj *ent.Group) ([]*ent.Group, error) {
	return obj.QueryChildren().All(ctx)
}

// Parent is the resolver for the parent field.
func (r *groupResolver) Parent(ctx context.Context, obj *ent.Group) (*ent.Group, error) {
	parent, err := obj.QueryParent().Only(ctx)
	if ent.IsNotFound(err) {
		return nil, nil
	}
	return parent, err
}

// Users is the resolver for the users field.
func (r *groupResolver) Users(ctx context.Context, obj *ent.Group) ([]*ent.User, error) {
	return obj.QueryUsers().All(ctx)
}

// PermissionPolicies is the resolver for the permissionPolicies field.
func (r *groupResolver) PermissionPolicies(ctx context.Context, obj *ent.Group) ([]*ent.PermissionPolicy, error) {
	return obj.QueryPermissionPolicies().All(ctx)
}

// Blueprints is the resolver for the blueprints field.
func (r *groupResolver) Blueprints(ctx context.Context, obj *ent.Group) ([]*ent.Blueprint, error) {
	return obj.QueryBlueprints().All(ctx)
}

// CreateProvider is the resolver for the createProvider field.
func (r *mutationResolver) CreateProvider(ctx context.Context, input model.ProviderInput) (*ent.Provider, error) {
	entProvider, err := r.ent.Provider.Create().
		SetDisplayName(input.DisplayName).
		SetProviderGitURL(input.ProviderGitURL).
		SetProviderVersion(input.ProviderVersion).
		SetConfigBytes([]byte(input.ConfigBytes)).
		Save(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to create provider: %v", err)
	}

	return entProvider, nil
}

// UpdateProvider is the resolver for the updateProvider field.
func (r *mutationResolver) UpdateProvider(ctx context.Context, id string, input model.ProviderInput) (*ent.Provider, error) {
	panic(fmt.Errorf("not implemented: UpdateProvider - updateProvider"))
}

// DeleteProvider is the resolver for the deleteProvider field.
func (r *mutationResolver) DeleteProvider(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteProvider - deleteProvider"))
}

// LoadProvider is the resolver for the loadProvider field.
func (r *mutationResolver) LoadProvider(ctx context.Context, id string) (*ent.Provider, error) {
	providerUuid, err := uuid.Parse(id)
	if err != nil {
		return nil, fmt.Errorf("id is not valid UUID: %v", err)
	}
	entProvider, err := r.ent.Provider.Get(ctx, providerUuid)
	if err != nil {
		return nil, fmt.Errorf("could not find provider with id %s", id)
	}

	// Queue the provider to load
	r.cbleServer.QueueLoadProvider(id)

	return entProvider, nil
}

// ID is the resolver for the id field.
func (r *permissionResolver) ID(ctx context.Context, obj *ent.Permission) (string, error) {
	return obj.ID.String(), nil
}

// PermissionPolicies is the resolver for the permissionPolicies field.
func (r *permissionResolver) PermissionPolicies(ctx context.Context, obj *ent.Permission) ([]*ent.PermissionPolicy, error) {
	return obj.QueryPermissionPolicies().All(ctx)
}

// ID is the resolver for the id field.
func (r *permissionPolicyResolver) ID(ctx context.Context, obj *ent.PermissionPolicy) (string, error) {
	return obj.ID.String(), nil
}

// Type is the resolver for the type field.
func (r *permissionPolicyResolver) Type(ctx context.Context, obj *ent.PermissionPolicy) (model.PermissionPolicyType, error) {
	return model.PermissionPolicyType(obj.Type), nil
}

// Permission is the resolver for the permission field.
func (r *permissionPolicyResolver) Permission(ctx context.Context, obj *ent.PermissionPolicy) (*ent.Permission, error) {
	permission, err := obj.QueryPermission().Only(ctx)
	if ent.IsNotFound(err) {
		return nil, nil
	}
	return permission, err
}

// Group is the resolver for the group field.
func (r *permissionPolicyResolver) Group(ctx context.Context, obj *ent.PermissionPolicy) (*ent.Group, error) {
	group, err := obj.QueryGroup().Only(ctx)
	if ent.IsNotFound(err) {
		return nil, nil
	}
	return group, err
}

// ID is the resolver for the id field.
func (r *providerResolver) ID(ctx context.Context, obj *ent.Provider) (string, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// ConfigBytes is the resolver for the configBytes field.
func (r *providerResolver) ConfigBytes(ctx context.Context, obj *ent.Provider) (string, error) {
	panic(fmt.Errorf("not implemented: ConfigBytes - configBytes"))
}

// Blueprints is the resolver for the blueprints field.
func (r *providerResolver) Blueprints(ctx context.Context, obj *ent.Provider) ([]*ent.Blueprint, error) {
	panic(fmt.Errorf("not implemented: Blueprints - blueprints"))
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*ent.User, error) {
	return r.ent.User.Query().All(ctx)
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, id string) (*ent.User, error) {
	panic(fmt.Errorf("not implemented: User - user"))
}

// Groups is the resolver for the groups field.
func (r *queryResolver) Groups(ctx context.Context) ([]*ent.Group, error) {
	panic(fmt.Errorf("not implemented: Groups - groups"))
}

// Group is the resolver for the group field.
func (r *queryResolver) Group(ctx context.Context, id string) (*ent.Group, error) {
	panic(fmt.Errorf("not implemented: Group - group"))
}

// Providers is the resolver for the Providers field.
func (r *queryResolver) Providers(ctx context.Context) ([]*ent.Provider, error) {
	panic(fmt.Errorf("not implemented: Providers - Providers"))
}

// Provider is the resolver for the Provider field.
func (r *queryResolver) Provider(ctx context.Context, id string) (*ent.Provider, error) {
	panic(fmt.Errorf("not implemented: Provider - Provider"))
}

// Blueprints is the resolver for the blueprints field.
func (r *queryResolver) Blueprints(ctx context.Context) ([]*ent.Blueprint, error) {
	panic(fmt.Errorf("not implemented: Blueprints - blueprints"))
}

// Blueprint is the resolver for the blueprint field.
func (r *queryResolver) Blueprint(ctx context.Context, id string) (*ent.Blueprint, error) {
	panic(fmt.Errorf("not implemented: Blueprint - blueprint"))
}

// ID is the resolver for the id field.
func (r *userResolver) ID(ctx context.Context, obj *ent.User) (string, error) {
	return obj.ID.String(), nil
}

// Groups is the resolver for the groups field.
func (r *userResolver) Groups(ctx context.Context, obj *ent.User) ([]*ent.Group, error) {
	return obj.QueryGroups().All(ctx)
}

// Deployments is the resolver for the deployments field.
func (r *userResolver) Deployments(ctx context.Context, obj *ent.User) ([]*ent.Deployment, error) {
	return obj.QueryDeployments().All(ctx)
}

// Blueprint returns generated.BlueprintResolver implementation.
func (r *Resolver) Blueprint() generated.BlueprintResolver { return &blueprintResolver{r} }

// Deployment returns generated.DeploymentResolver implementation.
func (r *Resolver) Deployment() generated.DeploymentResolver { return &deploymentResolver{r} }

// Group returns generated.GroupResolver implementation.
func (r *Resolver) Group() generated.GroupResolver { return &groupResolver{r} }

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// Permission returns generated.PermissionResolver implementation.
func (r *Resolver) Permission() generated.PermissionResolver { return &permissionResolver{r} }

// PermissionPolicy returns generated.PermissionPolicyResolver implementation.
func (r *Resolver) PermissionPolicy() generated.PermissionPolicyResolver {
	return &permissionPolicyResolver{r}
}

// Provider returns generated.ProviderResolver implementation.
func (r *Resolver) Provider() generated.ProviderResolver { return &providerResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

// User returns generated.UserResolver implementation.
func (r *Resolver) User() generated.UserResolver { return &userResolver{r} }

type blueprintResolver struct{ *Resolver }
type deploymentResolver struct{ *Resolver }
type groupResolver struct{ *Resolver }
type mutationResolver struct{ *Resolver }
type permissionResolver struct{ *Resolver }
type permissionPolicyResolver struct{ *Resolver }
type providerResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type userResolver struct{ *Resolver }
