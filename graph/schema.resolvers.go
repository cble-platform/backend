package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.40

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"github.com/cble-platform/cble-backend/auth"
	"github.com/cble-platform/cble-backend/ent"
	"github.com/cble-platform/cble-backend/ent/providercommand"
	"github.com/cble-platform/cble-backend/graph/generated"
	"github.com/cble-platform/cble-backend/graph/model"
	"github.com/google/uuid"
	"github.com/vektah/gqlparser/v2/gqlerror"
)

// ID is the resolver for the id field.
func (r *blueprintResolver) ID(ctx context.Context, obj *ent.Blueprint) (string, error) {
	return obj.ID.String(), nil
}

// BlueprintTemplate is the resolver for the blueprintTemplate field.
func (r *blueprintResolver) BlueprintTemplate(ctx context.Context, obj *ent.Blueprint) (string, error) {
	return string(obj.BlueprintTemplate), nil
}

// ParentGroup is the resolver for the parentGroup field.
func (r *blueprintResolver) ParentGroup(ctx context.Context, obj *ent.Blueprint) (*ent.Group, error) {
	parentGroup, err := obj.QueryParentGroup().Only(ctx)
	if ent.IsNotFound(err) {
		return nil, nil
	}
	return parentGroup, err
}

// Provider is the resolver for the Provider field.
func (r *blueprintResolver) Provider(ctx context.Context, obj *ent.Blueprint) (*ent.Provider, error) {
	entProvider, err := obj.QueryProvider().Only(ctx)
	if ent.IsNotFound(err) {
		return nil, nil
	}
	return entProvider, err
}

// Deployments is the resolver for the deployments field.
func (r *blueprintResolver) Deployments(ctx context.Context, obj *ent.Blueprint) ([]*ent.Deployment, error) {
	return obj.QueryDeployments().All(ctx)
}

// ID is the resolver for the id field.
func (r *deploymentResolver) ID(ctx context.Context, obj *ent.Deployment) (string, error) {
	return obj.ID.String(), nil
}

// Blueprint is the resolver for the blueprint field.
func (r *deploymentResolver) Blueprint(ctx context.Context, obj *ent.Deployment) (*ent.Blueprint, error) {
	blueprint, err := obj.QueryBlueprint().Only(ctx)
	if ent.IsNotFound(err) {
		return nil, nil
	}
	return blueprint, err
}

// Requester is the resolver for the requester field.
func (r *deploymentResolver) Requester(ctx context.Context, obj *ent.Deployment) (*ent.User, error) {
	requester, err := obj.QueryRequester().Only(ctx)
	if ent.IsNotFound(err) {
		return nil, nil
	}
	return requester, err
}

// ID is the resolver for the id field.
func (r *groupResolver) ID(ctx context.Context, obj *ent.Group) (string, error) {
	return obj.ID.String(), nil
}

// Children is the resolver for the children field.
func (r *groupResolver) Children(ctx context.Context, obj *ent.Group) ([]*ent.Group, error) {
	return obj.QueryChildren().All(ctx)
}

// Parent is the resolver for the parent field.
func (r *groupResolver) Parent(ctx context.Context, obj *ent.Group) (*ent.Group, error) {
	parent, err := obj.QueryParent().Only(ctx)
	if ent.IsNotFound(err) {
		return nil, nil
	}
	return parent, err
}

// Users is the resolver for the users field.
func (r *groupResolver) Users(ctx context.Context, obj *ent.Group) ([]*ent.User, error) {
	return obj.QueryUsers().All(ctx)
}

// PermissionPolicies is the resolver for the permissionPolicies field.
func (r *groupResolver) PermissionPolicies(ctx context.Context, obj *ent.Group) ([]*ent.PermissionPolicy, error) {
	return obj.QueryPermissionPolicies().All(ctx)
}

// Blueprints is the resolver for the blueprints field.
func (r *groupResolver) Blueprints(ctx context.Context, obj *ent.Group) ([]*ent.Blueprint, error) {
	return obj.QueryBlueprints().All(ctx)
}

// SelfChangePassword is the resolver for the selfChangePassword field.
func (r *mutationResolver) SelfChangePassword(ctx context.Context, currentPassword string, newPassword string) (bool, error) {
	panic(fmt.Errorf("not implemented: SelfChangePassword - selfChangePassword"))
}

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.UserInput) (*ent.User, error) {
	panic(fmt.Errorf("not implemented: CreateUser - createUser"))
}

// UpdateUser is the resolver for the updateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, id string, input model.UserInput) (*ent.User, error) {
	panic(fmt.Errorf("not implemented: UpdateUser - updateUser"))
}

// DeleteUser is the resolver for the deleteUser field.
func (r *mutationResolver) DeleteUser(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteUser - deleteUser"))
}

// CreateProvider is the resolver for the createProvider field.
func (r *mutationResolver) CreateProvider(ctx context.Context, input model.ProviderInput) (*ent.Provider, error) {
	entProvider, err := r.ent.Provider.Create().
		SetDisplayName(input.DisplayName).
		SetProviderGitURL(input.ProviderGitURL).
		SetProviderVersion(input.ProviderVersion).
		SetConfigBytes([]byte(input.ConfigBytes)).
		Save(ctx)
	if err != nil {
		return nil, gqlerror.Errorf("failed to create provider: %v", err)
	}

	return entProvider, nil
}

// UpdateProvider is the resolver for the updateProvider field.
func (r *mutationResolver) UpdateProvider(ctx context.Context, id string, input model.ProviderInput) (*ent.Provider, error) {
	// Convert ID string to UUID
	providerUuid, err := uuid.Parse(id)
	if err != nil {
		return nil, gqlerror.Errorf("id is not valid UUID: %v", err)
	}
	// Update the provider
	entProvider, err := r.ent.Provider.UpdateOneID(providerUuid).
		SetDisplayName(input.DisplayName).
		SetProviderGitURL(input.ProviderGitURL).
		SetProviderVersion(input.ProviderVersion).
		SetConfigBytes([]byte(input.ConfigBytes)).
		Save(ctx)
	if err != nil {
		return nil, gqlerror.Errorf("failed to update provider: %v", err)
	}
	return entProvider, nil
}

// DeleteProvider is the resolver for the deleteProvider field.
func (r *mutationResolver) DeleteProvider(ctx context.Context, id string) (bool, error) {
	// Convert ID string to UUID
	providerUuid, err := uuid.Parse(id)
	if err != nil {
		return false, gqlerror.Errorf("id is not valid UUID: %v", err)
	}
	// Check if the provider is loaded
	entProvider, err := r.ent.Provider.Get(ctx, providerUuid)
	if err != nil {
		return false, gqlerror.Errorf("failed to query provider with ID: %v", err)
	}
	// Don't allow deleting a loaded provider
	if entProvider.IsLoaded {
		return false, gqlerror.Errorf("cannot delete a provider while it is loaded")
	}
	// Delete the provider otherwise
	err = r.ent.Provider.DeleteOneID(providerUuid).Exec(ctx)
	if err != nil {
		return false, gqlerror.Errorf("failed to delete provider: %v", err)
	}

	return true, nil
}

// CreateBlueprint is the resolver for the createBlueprint field.
func (r *mutationResolver) CreateBlueprint(ctx context.Context, input model.BlueprintInput) (*ent.Blueprint, error) {
	// Convert ID strings into UUIDs
	parentGroupUuid, err := uuid.Parse(input.ParentGroupID)
	if err != nil {
		return nil, gqlerror.Errorf("failed to parse parent group ID as UUID: %v", err)
	}
	providerUuid, err := uuid.Parse(input.ProviderID)
	if err != nil {
		return nil, gqlerror.Errorf("failed to parse provider ID as UUID: %v", err)
	}
	// Get the edge objects
	entParentGroup, err := r.ent.Group.Get(ctx, parentGroupUuid)
	if err != nil {
		return nil, gqlerror.Errorf("failed to query parent group by ID: %v", err)
	}
	entProvider, err := r.ent.Provider.Get(ctx, providerUuid)
	if err != nil {
		return nil, gqlerror.Errorf("failed to query provider by ID: %v", err)
	}
	entBlueprint, err := r.ent.Blueprint.Create().
		SetName(input.Name).
		SetBlueprintTemplate([]byte(input.BlueprintTemplate)).
		SetParentGroup(entParentGroup).
		SetProvider(entProvider).
		Save(ctx)
	if err != nil {
		return nil, gqlerror.Errorf("failed to create blueprint: %v", err)
	}

	return entBlueprint, nil
}

// UpdateBlueprint is the resolver for the updateBlueprint field.
func (r *mutationResolver) UpdateBlueprint(ctx context.Context, id string, input model.BlueprintInput) (*ent.Blueprint, error) {
	// Get the object from ENT
	blueprintUuid, err := uuid.Parse(id)
	if err != nil {
		return nil, gqlerror.Errorf("failed to parse blueprint ID as UUID: %v", err)
	}
	entBlueprint, err := r.ent.Blueprint.Get(ctx, blueprintUuid)
	if err != nil {
		return nil, gqlerror.Errorf("failed to query blueprint: %v", err)
	}

	// Convert ID strings into UUIDs
	parentGroupUuid, err := uuid.Parse(input.ParentGroupID)
	if err != nil {
		return nil, gqlerror.Errorf("failed to parse parent group ID as UUID: %v", err)
	}
	providerUuid, err := uuid.Parse(input.ProviderID)
	if err != nil {
		return nil, gqlerror.Errorf("failed to parse provider ID as UUID: %v", err)
	}

	// Get the edge objects
	entParentGroup, err := r.ent.Group.Get(ctx, parentGroupUuid)
	if err != nil {
		return nil, gqlerror.Errorf("failed to query parent group by ID: %v", err)
	}
	entProvider, err := r.ent.Provider.Get(ctx, providerUuid)
	if err != nil {
		return nil, gqlerror.Errorf("failed to query provider by ID: %v", err)
	}
	entBlueprint, err = entBlueprint.Update().
		SetName(input.Name).
		SetBlueprintTemplate([]byte(input.BlueprintTemplate)).
		SetParentGroup(entParentGroup).
		SetProvider(entProvider).
		Save(ctx)
	if err != nil {
		return nil, gqlerror.Errorf("failed to update blueprint: %v", err)
	}

	return entBlueprint, nil
}

// DeleteBlueprint is the resolver for the deleteBlueprint field.
func (r *mutationResolver) DeleteBlueprint(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteBlueprint - deleteBlueprint"))
}

// LoadProvider is the resolver for the loadProvider field.
func (r *mutationResolver) LoadProvider(ctx context.Context, id string) (*ent.Provider, error) {
	// Check the provider exists
	providerUuid, err := uuid.Parse(id)
	if err != nil {
		return nil, gqlerror.Errorf("id is not valid UUID: %v", err)
	}
	entProvider, err := r.ent.Provider.Get(ctx, providerUuid)
	if err != nil {
		return nil, gqlerror.Errorf("could not find provider with id %s", id)
	}

	// Queue the provider to load
	r.cbleServer.QueueLoadProvider(id)

	return entProvider, nil
}

// UnloadProvider is the resolver for the unloadProvider field.
func (r *mutationResolver) UnloadProvider(ctx context.Context, id string) (*ent.Provider, error) {
	// Check the provider exists
	providerUuid, err := uuid.Parse(id)
	if err != nil {
		return nil, gqlerror.Errorf("id is not valid UUID: %v", err)
	}
	entProvider, err := r.ent.Provider.Get(ctx, providerUuid)
	if err != nil {
		return nil, gqlerror.Errorf("could not find provider with id %s", id)
	}

	// Queue the provider to unload
	err = r.cbleServer.QueueUnloadProvider(id)
	if err != nil {
		return entProvider, fmt.Errorf("failed to unload provider: %v", err)
	}

	return entProvider, nil
}

// ConfigureProvider is the resolver for the configureProvider field.
func (r *mutationResolver) ConfigureProvider(ctx context.Context, id string) (*ent.Provider, error) {
	// Convert ID string to UUID
	providerUuid, err := uuid.Parse(id)
	if err != nil {
		return nil, gqlerror.Errorf("id is not valid UUID: %v", err)
	}
	entProvider, err := r.ent.Provider.Get(ctx, providerUuid)
	if err != nil {
		return nil, gqlerror.Errorf("could not find provider with id %s: %v", id, err)
	}

	// Queue a configure command for provider configuration
	err = r.ent.ProviderCommand.Create().
		SetCommandType(providercommand.CommandTypeCONFIGURE).
		SetProvider(entProvider).
		Exec(ctx)
	if err != nil {
		return nil, gqlerror.Errorf("failed to create initial provider CONFIGURE command: %v", err)
	}

	return entProvider, nil
}

// DeployBlueprint is the resolver for the deployBlueprint field.
func (r *mutationResolver) DeployBlueprint(ctx context.Context, id string) (*ent.Deployment, error) {
	// Check the blueprint exists
	blueprintUuid, err := uuid.Parse(id)
	if err != nil {
		return nil, gqlerror.Errorf("id is not valid UUID: %v", err)
	}
	entBlueprint, err := r.ent.Blueprint.Get(ctx, blueprintUuid)
	if err != nil {
		return nil, gqlerror.Errorf("could not find blueprint with id %s", id)
	}
	entProvider, err := entBlueprint.QueryProvider().Only(ctx)
	if err != nil {
		return nil, gqlerror.Errorf("failed to query provider from blueprint: %v", err)
	}

	entUser, err := auth.ForContext(ctx)
	if err != nil {
		return nil, gqlerror.Errorf("failed to get user from context: %v", err)
	}

	// Create the deployment
	entDeployment, err := r.ent.Deployment.Create().
		SetBlueprint(entBlueprint).
		SetRequester(entUser).
		Save(ctx)
	if err != nil {
		return nil, gqlerror.Errorf("failed to create deployment from blueprint: %v", err)
	}

	// Queue a deployment command for blueprint
	err = r.ent.ProviderCommand.Create().
		SetCommandType(providercommand.CommandTypeDEPLOY).
		SetProvider(entProvider).
		SetDeployment(entDeployment).
		Exec(ctx)
	if err != nil {
		return nil, gqlerror.Errorf("failed to create deployment DEPLOY command: %v", err)
	}

	return entDeployment, nil
}

// DestroyDeployment is the resolver for the destroyDeployment field.
func (r *mutationResolver) DestroyDeployment(ctx context.Context, id string) (*ent.Deployment, error) {
	// Check the blueprint exists
	deploymentUuid, err := uuid.Parse(id)
	if err != nil {
		return nil, gqlerror.Errorf("id is not valid UUID: %v", err)
	}

	// Get the deployment
	entDeployment, err := r.ent.Deployment.Get(ctx, deploymentUuid)
	if err != nil {
		return nil, gqlerror.Errorf("failed to create deployment from blueprint: %v", err)
	}
	entProvider, err := entDeployment.QueryBlueprint().QueryProvider().Only(ctx)
	if err != nil {
		return nil, gqlerror.Errorf("failed to query provider from deployment: %v", err)
	}

	// Queue a destroy command for blueprint
	err = r.ent.ProviderCommand.Create().
		SetCommandType(providercommand.CommandTypeDESTROY).
		SetProvider(entProvider).
		SetDeployment(entDeployment).
		Exec(ctx)
	if err != nil {
		return nil, gqlerror.Errorf("failed to create deployment DESTROY command: %v", err)
	}

	return entDeployment, nil
}

// ID is the resolver for the id field.
func (r *permissionResolver) ID(ctx context.Context, obj *ent.Permission) (string, error) {
	return obj.ID.String(), nil
}

// PermissionPolicies is the resolver for the permissionPolicies field.
func (r *permissionResolver) PermissionPolicies(ctx context.Context, obj *ent.Permission) ([]*ent.PermissionPolicy, error) {
	return obj.QueryPermissionPolicies().All(ctx)
}

// ID is the resolver for the id field.
func (r *permissionPolicyResolver) ID(ctx context.Context, obj *ent.PermissionPolicy) (string, error) {
	return obj.ID.String(), nil
}

// Type is the resolver for the type field.
func (r *permissionPolicyResolver) Type(ctx context.Context, obj *ent.PermissionPolicy) (model.PermissionPolicyType, error) {
	return model.PermissionPolicyType(obj.Type), nil
}

// Permission is the resolver for the permission field.
func (r *permissionPolicyResolver) Permission(ctx context.Context, obj *ent.PermissionPolicy) (*ent.Permission, error) {
	permission, err := obj.QueryPermission().Only(ctx)
	if ent.IsNotFound(err) {
		return nil, nil
	}
	return permission, err
}

// Group is the resolver for the group field.
func (r *permissionPolicyResolver) Group(ctx context.Context, obj *ent.PermissionPolicy) (*ent.Group, error) {
	group, err := obj.QueryGroup().Only(ctx)
	if ent.IsNotFound(err) {
		return nil, nil
	}
	return group, err
}

// ID is the resolver for the id field.
func (r *providerResolver) ID(ctx context.Context, obj *ent.Provider) (string, error) {
	return obj.ID.String(), nil
}

// ConfigBytes is the resolver for the configBytes field.
func (r *providerResolver) ConfigBytes(ctx context.Context, obj *ent.Provider) (string, error) {
	return string(obj.ConfigBytes), nil
}

// Blueprints is the resolver for the blueprints field.
func (r *providerResolver) Blueprints(ctx context.Context, obj *ent.Provider) ([]*ent.Blueprint, error) {
	return obj.QueryBlueprints().All(ctx)
}

// ID is the resolver for the id field.
func (r *providerCommandResolver) ID(ctx context.Context, obj *ent.ProviderCommand) (string, error) {
	return obj.ID.String(), nil
}

// CommandType is the resolver for the commandType field.
func (r *providerCommandResolver) CommandType(ctx context.Context, obj *ent.ProviderCommand) (model.CommandType, error) {
	return model.CommandType(obj.CommandType), nil
}

// Status is the resolver for the status field.
func (r *providerCommandResolver) Status(ctx context.Context, obj *ent.ProviderCommand) (model.CommandStatus, error) {
	return model.CommandStatus(obj.Status), nil
}

// Me is the resolver for the me field.
func (r *queryResolver) Me(ctx context.Context) (*ent.User, error) {
	return auth.ForContext(ctx)
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*ent.User, error) {
	return r.ent.User.Query().All(ctx)
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, id string) (*ent.User, error) {
	userUuid, err := uuid.Parse(id)
	if err != nil {
		return nil, gqlerror.Errorf("id is not valid UUID: %v", err)
	}
	return r.ent.User.Get(ctx, userUuid)
}

// Groups is the resolver for the groups field.
func (r *queryResolver) Groups(ctx context.Context) ([]*ent.Group, error) {
	return r.ent.Group.Query().All(ctx)
}

// Group is the resolver for the group field.
func (r *queryResolver) Group(ctx context.Context, id string) (*ent.Group, error) {
	groupUuid, err := uuid.Parse(id)
	if err != nil {
		return nil, gqlerror.Errorf("id is not valid UUID: %v", err)
	}
	return r.ent.Group.Get(ctx, groupUuid)
}

// Providers is the resolver for the Providers field.
func (r *queryResolver) Providers(ctx context.Context) ([]*ent.Provider, error) {
	return r.ent.Provider.Query().All(ctx)
}

// Provider is the resolver for the Provider field.
func (r *queryResolver) Provider(ctx context.Context, id string) (*ent.Provider, error) {
	providerUuid, err := uuid.Parse(id)
	if err != nil {
		return nil, gqlerror.Errorf("id is not valid UUID: %v", err)
	}
	return r.ent.Provider.Get(ctx, providerUuid)
}

// ProviderCommands is the resolver for the providerCommands field.
func (r *queryResolver) ProviderCommands(ctx context.Context) ([]*ent.ProviderCommand, error) {
	return r.ent.ProviderCommand.Query().Order(providercommand.ByStartTime(sql.OrderDesc())).All(ctx)
}

// ProviderCommand is the resolver for the providerCommand field.
func (r *queryResolver) ProviderCommand(ctx context.Context, id string) (*ent.ProviderCommand, error) {
	providerCommandUuid, err := uuid.Parse(id)
	if err != nil {
		return nil, gqlerror.Errorf("id is not valid UUID: %v", err)
	}
	return r.ent.ProviderCommand.Get(ctx, providerCommandUuid)
}

// Blueprints is the resolver for the blueprints field.
func (r *queryResolver) Blueprints(ctx context.Context) ([]*ent.Blueprint, error) {
	return r.ent.Blueprint.Query().All(ctx)
}

// Blueprint is the resolver for the blueprint field.
func (r *queryResolver) Blueprint(ctx context.Context, id string) (*ent.Blueprint, error) {
	blueprintUuid, err := uuid.Parse(id)
	if err != nil {
		return nil, gqlerror.Errorf("id is not valid UUID: %v", err)
	}
	return r.ent.Blueprint.Get(ctx, blueprintUuid)
}

// Deployments is the resolver for the deployments field.
func (r *queryResolver) Deployments(ctx context.Context) ([]*ent.Deployment, error) {
	panic(fmt.Errorf("not implemented: Deployments - deployments"))
}

// Deployment is the resolver for the deployment field.
func (r *queryResolver) Deployment(ctx context.Context, id string) (*ent.Deployment, error) {
	panic(fmt.Errorf("not implemented: Deployment - deployment"))
}

// ID is the resolver for the id field.
func (r *userResolver) ID(ctx context.Context, obj *ent.User) (string, error) {
	return obj.ID.String(), nil
}

// Groups is the resolver for the groups field.
func (r *userResolver) Groups(ctx context.Context, obj *ent.User) ([]*ent.Group, error) {
	return obj.QueryGroups().All(ctx)
}

// Deployments is the resolver for the deployments field.
func (r *userResolver) Deployments(ctx context.Context, obj *ent.User) ([]*ent.Deployment, error) {
	return obj.QueryDeployments().All(ctx)
}

// Blueprint returns generated.BlueprintResolver implementation.
func (r *Resolver) Blueprint() generated.BlueprintResolver { return &blueprintResolver{r} }

// Deployment returns generated.DeploymentResolver implementation.
func (r *Resolver) Deployment() generated.DeploymentResolver { return &deploymentResolver{r} }

// Group returns generated.GroupResolver implementation.
func (r *Resolver) Group() generated.GroupResolver { return &groupResolver{r} }

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// Permission returns generated.PermissionResolver implementation.
func (r *Resolver) Permission() generated.PermissionResolver { return &permissionResolver{r} }

// PermissionPolicy returns generated.PermissionPolicyResolver implementation.
func (r *Resolver) PermissionPolicy() generated.PermissionPolicyResolver {
	return &permissionPolicyResolver{r}
}

// Provider returns generated.ProviderResolver implementation.
func (r *Resolver) Provider() generated.ProviderResolver { return &providerResolver{r} }

// ProviderCommand returns generated.ProviderCommandResolver implementation.
func (r *Resolver) ProviderCommand() generated.ProviderCommandResolver {
	return &providerCommandResolver{r}
}

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

// User returns generated.UserResolver implementation.
func (r *Resolver) User() generated.UserResolver { return &userResolver{r} }

type blueprintResolver struct{ *Resolver }
type deploymentResolver struct{ *Resolver }
type groupResolver struct{ *Resolver }
type mutationResolver struct{ *Resolver }
type permissionResolver struct{ *Resolver }
type permissionPolicyResolver struct{ *Resolver }
type providerResolver struct{ *Resolver }
type providerCommandResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type userResolver struct{ *Resolver }

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//   - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//     it when you're done.
//   - You have helper methods in this file. Move them out to keep these resolver files clean.
func (r *deploymentResolver) TemplateVars(ctx context.Context, obj *ent.Deployment) (map[string]string, error) {
	panic(fmt.Errorf("not implemented: TemplateVars - templateVars"))
}
func (r *deploymentResolver) DeploymentVars(ctx context.Context, obj *ent.Deployment) (map[string]string, error) {
	panic(fmt.Errorf("not implemented: DeploymentVars - deploymentVars"))
}
