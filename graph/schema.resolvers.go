package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.38

import (
	"context"
	"fmt"

	"github.com/cble-platform/backend/ent"
	"github.com/cble-platform/backend/graph/generated"
	"github.com/cble-platform/backend/graph/model"
)

// ID is the resolver for the id field.
func (r *blueprintResolver) ID(ctx context.Context, obj *ent.Blueprint) (string, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// BlueprintTemplate is the resolver for the blueprintTemplate field.
func (r *blueprintResolver) BlueprintTemplate(ctx context.Context, obj *ent.Blueprint) (string, error) {
	return string(obj.BlueprintTemplate), nil
}

// ParentGroup is the resolver for the parentGroup field.
func (r *blueprintResolver) ParentGroup(ctx context.Context, obj *ent.Blueprint) (*ent.Group, error) {
	parentGroup, err := obj.QueryParentGroup().Only(ctx)
	if ent.IsNotFound(err) {
		return nil, nil
	}
	return parentGroup, err
}

// VirtualizationProvider is the resolver for the virtualizationProvider field.
func (r *blueprintResolver) VirtualizationProvider(ctx context.Context, obj *ent.Blueprint) (*ent.VirtualizationProvider, error) {
	virtualizationProvider, err := obj.QueryVirtualizationProvider().Only(ctx)
	if ent.IsNotFound(err) {
		return nil, nil
	}
	return virtualizationProvider, err
}

// Deployments is the resolver for the deployments field.
func (r *blueprintResolver) Deployments(ctx context.Context, obj *ent.Blueprint) ([]*ent.Deployment, error) {
	return obj.QueryDeployments().All(ctx)
}

// ID is the resolver for the id field.
func (r *deploymentResolver) ID(ctx context.Context, obj *ent.Deployment) (string, error) {
	return obj.ID.String(), nil
}

// Blueprint is the resolver for the blueprint field.
func (r *deploymentResolver) Blueprint(ctx context.Context, obj *ent.Deployment) (*ent.Blueprint, error) {
	blueprint, err := obj.QueryBlueprint().Only(ctx)
	if ent.IsNotFound(err) {
		return nil, nil
	}
	return blueprint, err
}

// Requester is the resolver for the requester field.
func (r *deploymentResolver) Requester(ctx context.Context, obj *ent.Deployment) (*ent.User, error) {
	requester, err := obj.QueryRequester().Only(ctx)
	if ent.IsNotFound(err) {
		return nil, nil
	}
	return requester, err
}

// ID is the resolver for the id field.
func (r *groupResolver) ID(ctx context.Context, obj *ent.Group) (string, error) {
	return obj.ID.String(), nil
}

// Children is the resolver for the children field.
func (r *groupResolver) Children(ctx context.Context, obj *ent.Group) ([]*ent.Group, error) {
	return obj.QueryChildren().All(ctx)
}

// Parent is the resolver for the parent field.
func (r *groupResolver) Parent(ctx context.Context, obj *ent.Group) (*ent.Group, error) {
	parent, err := obj.QueryParent().Only(ctx)
	if ent.IsNotFound(err) {
		return nil, nil
	}
	return parent, err
}

// Users is the resolver for the users field.
func (r *groupResolver) Users(ctx context.Context, obj *ent.Group) ([]*ent.User, error) {
	return obj.QueryUsers().All(ctx)
}

// PermissionPolicies is the resolver for the permissionPolicies field.
func (r *groupResolver) PermissionPolicies(ctx context.Context, obj *ent.Group) ([]*ent.PermissionPolicy, error) {
	return obj.QueryPermissionPolicies().All(ctx)
}

// Blueprints is the resolver for the blueprints field.
func (r *groupResolver) Blueprints(ctx context.Context, obj *ent.Group) ([]*ent.Blueprint, error) {
	return obj.QueryBlueprints().All(ctx)
}

// ID is the resolver for the id field.
func (r *permissionResolver) ID(ctx context.Context, obj *ent.Permission) (string, error) {
	return obj.ID.String(), nil
}

// PermissionPolicies is the resolver for the permissionPolicies field.
func (r *permissionResolver) PermissionPolicies(ctx context.Context, obj *ent.Permission) ([]*ent.PermissionPolicy, error) {
	return obj.QueryPermissionPolicies().All(ctx)
}

// ID is the resolver for the id field.
func (r *permissionPolicyResolver) ID(ctx context.Context, obj *ent.PermissionPolicy) (string, error) {
	return obj.ID.String(), nil
}

// Type is the resolver for the type field.
func (r *permissionPolicyResolver) Type(ctx context.Context, obj *ent.PermissionPolicy) (model.PermissionPolicyType, error) {
	return model.PermissionPolicyType(obj.Type), nil
}

// Permission is the resolver for the permission field.
func (r *permissionPolicyResolver) Permission(ctx context.Context, obj *ent.PermissionPolicy) (*ent.Permission, error) {
	permission, err := obj.QueryPermission().Only(ctx)
	if ent.IsNotFound(err) {
		return nil, nil
	}
	return permission, err
}

// Group is the resolver for the group field.
func (r *permissionPolicyResolver) Group(ctx context.Context, obj *ent.PermissionPolicy) (*ent.Group, error) {
	group, err := obj.QueryGroup().Only(ctx)
	if ent.IsNotFound(err) {
		return nil, nil
	}
	return group, err
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*ent.User, error) {
	return r.ent.User.Query().All(ctx)
}

// ID is the resolver for the id field.
func (r *userResolver) ID(ctx context.Context, obj *ent.User) (string, error) {
	return obj.ID.String(), nil
}

// Groups is the resolver for the groups field.
func (r *userResolver) Groups(ctx context.Context, obj *ent.User) ([]*ent.Group, error) {
	return obj.QueryGroups().All(ctx)
}

// Deployments is the resolver for the deployments field.
func (r *userResolver) Deployments(ctx context.Context, obj *ent.User) ([]*ent.Deployment, error) {
	return obj.QueryDeployments().All(ctx)
}

// ID is the resolver for the id field.
func (r *virtualizationProviderResolver) ID(ctx context.Context, obj *ent.VirtualizationProvider) (string, error) {
	return obj.ID.String(), nil
}

// Blueprints is the resolver for the blueprints field.
func (r *virtualizationProviderResolver) Blueprints(ctx context.Context, obj *ent.VirtualizationProvider) ([]*ent.Blueprint, error) {
	return obj.QueryBlueprints().All(ctx)
}

// Blueprint returns generated.BlueprintResolver implementation.
func (r *Resolver) Blueprint() generated.BlueprintResolver { return &blueprintResolver{r} }

// Deployment returns generated.DeploymentResolver implementation.
func (r *Resolver) Deployment() generated.DeploymentResolver { return &deploymentResolver{r} }

// Group returns generated.GroupResolver implementation.
func (r *Resolver) Group() generated.GroupResolver { return &groupResolver{r} }

// Permission returns generated.PermissionResolver implementation.
func (r *Resolver) Permission() generated.PermissionResolver { return &permissionResolver{r} }

// PermissionPolicy returns generated.PermissionPolicyResolver implementation.
func (r *Resolver) PermissionPolicy() generated.PermissionPolicyResolver {
	return &permissionPolicyResolver{r}
}

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

// User returns generated.UserResolver implementation.
func (r *Resolver) User() generated.UserResolver { return &userResolver{r} }

// VirtualizationProvider returns generated.VirtualizationProviderResolver implementation.
func (r *Resolver) VirtualizationProvider() generated.VirtualizationProviderResolver {
	return &virtualizationProviderResolver{r}
}

type blueprintResolver struct{ *Resolver }
type deploymentResolver struct{ *Resolver }
type groupResolver struct{ *Resolver }
type permissionResolver struct{ *Resolver }
type permissionPolicyResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type userResolver struct{ *Resolver }
type virtualizationProviderResolver struct{ *Resolver }
