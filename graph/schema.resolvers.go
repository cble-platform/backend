package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.43

import (
	"context"
	"fmt"

	"github.com/cble-platform/cble-backend/auth"
	"github.com/cble-platform/cble-backend/engine"
	"github.com/cble-platform/cble-backend/ent"
	"github.com/cble-platform/cble-backend/graph/generated"
	"github.com/cble-platform/cble-backend/graph/model"
	"github.com/cble-platform/cble-backend/permission"
	"github.com/google/uuid"
	"github.com/vektah/gqlparser/v2/gqlerror"
	yaml "gopkg.in/yaml.v3"
)

// BlueprintTemplate is the resolver for the blueprintTemplate field.
func (r *blueprintResolver) BlueprintTemplate(ctx context.Context, obj *ent.Blueprint) (string, error) {
	return string(obj.BlueprintTemplate), nil
}

// Provider is the resolver for the Provider field.
func (r *blueprintResolver) Provider(ctx context.Context, obj *ent.Blueprint) (*ent.Provider, error) {
	entProvider, err := obj.QueryProvider().Only(ctx)
	if ent.IsNotFound(err) {
		return nil, nil
	}
	return entProvider, err
}

// Resources is the resolver for the resources field.
func (r *blueprintResolver) Resources(ctx context.Context, obj *ent.Blueprint) ([]*ent.Resource, error) {
	return obj.QueryResources().All(ctx)
}

// Deployments is the resolver for the deployments field.
func (r *blueprintResolver) Deployments(ctx context.Context, obj *ent.Blueprint) ([]*ent.Deployment, error) {
	return obj.QueryDeployments().All(ctx)
}

// State is the resolver for the state field.
func (r *deploymentResolver) State(ctx context.Context, obj *ent.Deployment) (model.DeploymentState, error) {
	return model.DeploymentState(obj.State), nil
}

// Blueprint is the resolver for the blueprint field.
func (r *deploymentResolver) Blueprint(ctx context.Context, obj *ent.Deployment) (*ent.Blueprint, error) {
	return obj.QueryBlueprint().Only(ctx)
}

// DeploymentNodes is the resolver for the deploymentNodes field.
func (r *deploymentResolver) DeploymentNodes(ctx context.Context, obj *ent.Deployment) ([]*ent.DeploymentNode, error) {
	return obj.QueryDeploymentNodes().All(ctx)
}

// Requester is the resolver for the requester field.
func (r *deploymentResolver) Requester(ctx context.Context, obj *ent.Deployment) (*ent.User, error) {
	return obj.QueryRequester().Only(ctx)
}

// State is the resolver for the state field.
func (r *deploymentNodeResolver) State(ctx context.Context, obj *ent.DeploymentNode) (model.DeploymentNodeState, error) {
	return model.DeploymentNodeState(obj.State), nil
}

// Deployment is the resolver for the deployment field.
func (r *deploymentNodeResolver) Deployment(ctx context.Context, obj *ent.DeploymentNode) (*ent.Deployment, error) {
	return obj.QueryDeployment().Only(ctx)
}

// Resource is the resolver for the resource field.
func (r *deploymentNodeResolver) Resource(ctx context.Context, obj *ent.DeploymentNode) (*ent.Resource, error) {
	return obj.QueryResource().Only(ctx)
}

// NextNodes is the resolver for the nextNodes field.
func (r *deploymentNodeResolver) NextNodes(ctx context.Context, obj *ent.DeploymentNode) ([]*ent.DeploymentNode, error) {
	return obj.QueryNextNodes().All(ctx)
}

// PrevNodes is the resolver for the prevNodes field.
func (r *deploymentNodeResolver) PrevNodes(ctx context.Context, obj *ent.DeploymentNode) ([]*ent.DeploymentNode, error) {
	return obj.QueryPrevNodes().All(ctx)
}

// SubjectType is the resolver for the subjectType field.
func (r *grantedPermissionResolver) SubjectType(ctx context.Context, obj *ent.GrantedPermission) (model.SubjectType, error) {
	return model.SubjectType(obj.SubjectType), nil
}

// SubjectID is the resolver for the subjectId field.
func (r *grantedPermissionResolver) SubjectID(ctx context.Context, obj *ent.GrantedPermission) (string, error) {
	panic(fmt.Errorf("not implemented: SubjectID - subjectId"))
}

// ObjectType is the resolver for the objectType field.
func (r *grantedPermissionResolver) ObjectType(ctx context.Context, obj *ent.GrantedPermission) (model.ObjectType, error) {
	return model.ObjectType(obj.ObjectType), nil
}

// ObjectID is the resolver for the objectId field.
func (r *grantedPermissionResolver) ObjectID(ctx context.Context, obj *ent.GrantedPermission) (string, error) {
	panic(fmt.Errorf("not implemented: ObjectID - objectId"))
}

// Action is the resolver for the action field.
func (r *grantedPermissionResolver) Action(ctx context.Context, obj *ent.GrantedPermission) (string, error) {
	return string(obj.Action), nil
}

// DisplayString is the resolver for the displayString field.
func (r *grantedPermissionResolver) DisplayString(ctx context.Context, obj *ent.GrantedPermission) (string, error) {
	return permission.DisplayString(obj.SubjectType, obj.SubjectID, obj.ObjectType, obj.ObjectID, obj.Action), nil
}

// Children is the resolver for the children field.
func (r *groupResolver) Children(ctx context.Context, obj *ent.Group) ([]*ent.Group, error) {
	return obj.QueryChildren().All(ctx)
}

// Parent is the resolver for the parent field.
func (r *groupResolver) Parent(ctx context.Context, obj *ent.Group) (*ent.Group, error) {
	return obj.QueryParent().Only(ctx)
}

// Users is the resolver for the users field.
func (r *groupResolver) Users(ctx context.Context, obj *ent.Group) ([]*ent.User, error) {
	return obj.QueryUsers().All(ctx)
}

// SelfChangePassword is the resolver for the selfChangePassword field.
func (r *mutationResolver) SelfChangePassword(ctx context.Context, currentPassword string, newPassword string) (bool, error) {
	panic(fmt.Errorf("not implemented: SelfChangePassword - selfChangePassword"))
}

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.UserInput) (*ent.User, error) {
	// Create the user
	entUser, err := r.ent.User.Create().
		SetEmail(input.Email).
		SetFirstName(input.FirstName).
		SetLastName(input.LastName).
		SetUsername(input.Username).
		AddGroupIDs(input.GroupIds...).
		Save(ctx)
	if err != nil {
		return nil, gqlerror.Errorf("failed to create user: %v", err)
	}

	return entUser, nil
}

// UpdateUser is the resolver for the updateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, id uuid.UUID, input model.UserInput) (*ent.User, error) {
	panic(fmt.Errorf("not implemented: UpdateUser - updateUser"))
}

// DeleteUser is the resolver for the deleteUser field.
func (r *mutationResolver) DeleteUser(ctx context.Context, id uuid.UUID) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteUser - deleteUser"))
}

// CreateProvider is the resolver for the createProvider field.
func (r *mutationResolver) CreateProvider(ctx context.Context, input model.ProviderInput) (*ent.Provider, error) {
	entProvider, err := r.ent.Provider.Create().
		SetDisplayName(input.DisplayName).
		SetProviderGitURL(input.ProviderGitURL).
		SetProviderVersion(input.ProviderVersion).
		SetConfigBytes([]byte(input.ConfigBytes)).
		Save(ctx)
	if err != nil {
		return nil, gqlerror.Errorf("failed to create provider: %v", err)
	}

	return entProvider, nil
}

// UpdateProvider is the resolver for the updateProvider field.
func (r *mutationResolver) UpdateProvider(ctx context.Context, id uuid.UUID, input model.ProviderInput) (*ent.Provider, error) {
	// Update the provider
	entProvider, err := r.ent.Provider.UpdateOneID(id).
		SetDisplayName(input.DisplayName).
		SetProviderGitURL(input.ProviderGitURL).
		SetProviderVersion(input.ProviderVersion).
		SetConfigBytes([]byte(input.ConfigBytes)).
		Save(ctx)
	if err != nil {
		return nil, gqlerror.Errorf("failed to update provider: %v", err)
	}
	return entProvider, nil
}

// DeleteProvider is the resolver for the deleteProvider field.
func (r *mutationResolver) DeleteProvider(ctx context.Context, id uuid.UUID) (bool, error) {
	// Check if the provider is loaded
	entProvider, err := r.ent.Provider.Get(ctx, id)
	if err != nil {
		return false, gqlerror.Errorf("failed to query provider with ID: %v", err)
	}
	// Don't allow deleting a loaded provider
	if entProvider.IsLoaded {
		return false, gqlerror.Errorf("cannot delete a provider while it is loaded")
	}
	// Delete the provider otherwise
	err = r.ent.Provider.DeleteOneID(id).Exec(ctx)
	if err != nil {
		return false, gqlerror.Errorf("failed to delete provider: %v", err)
	}

	return true, nil
}

// CreateBlueprint is the resolver for the createBlueprint field.
func (r *mutationResolver) CreateBlueprint(ctx context.Context, input model.BlueprintInput) (*ent.Blueprint, error) {
	// Get the edge objects
	entProvider, err := r.ent.Provider.Get(ctx, input.ProviderID)
	if err != nil {
		return nil, gqlerror.Errorf("failed to query provider by ID: %v", err)
	}

	// Create a transactional client
	tx, err := r.ent.Tx(ctx)
	if err != nil {
		return nil, gqlerror.Errorf("failed to create transactional client: %v", err)
	}

	// Create the blueprint
	entBlueprint, err := tx.Blueprint.Create().
		SetName(input.Name).
		SetDescription(input.Description).
		SetBlueprintTemplate([]byte(input.BlueprintTemplate)).
		// SetVariableTypes(varTypes).
		SetVariableTypes(input.VariableTypes).
		SetProvider(entProvider).
		Save(ctx)
	if err != nil {
		tx.Rollback()
		return nil, gqlerror.Errorf("failed to create blueprint: %v", err)
	}

	// Load all of the blueprint resources
	err = engine.LoadResources(ctx, tx.Client(), r.cbleServer, entBlueprint)
	if err != nil {
		tx.Rollback()
		return nil, gqlerror.Errorf("failed to load resource: %v", err)
	}

	// Commit the transaction
	err = tx.Commit()
	if err != nil {
		tx.Rollback()
		return nil, gqlerror.Errorf("failed to commit transaction: %v", err)
	}

	return entBlueprint.Unwrap(), nil
}

// UpdateBlueprint is the resolver for the updateBlueprint field.
func (r *mutationResolver) UpdateBlueprint(ctx context.Context, id uuid.UUID, input model.BlueprintInput) (*ent.Blueprint, error) {
	// Create a transactional client
	tx, err := r.ent.Tx(ctx)
	if err != nil {
		return nil, gqlerror.Errorf("failed to create transactional client: %v", err)
	}

	// Get the object from ENT
	entBlueprint, err := tx.Blueprint.Get(ctx, id)
	if err != nil {
		return nil, gqlerror.Errorf("failed to query blueprint: %v", err)
	}

	// Get the edge objects
	entProvider, err := tx.Provider.Get(ctx, input.ProviderID)
	if err != nil {
		return nil, gqlerror.Errorf("failed to query provider by ID: %v", err)
	}

	// // Convert variable types from string to model.BlueprintVariableType
	// varTypes := make(map[string]models.BlueprintVariableType)
	// ok := true
	// for k, v := range input.VariableTypes {
	// 	varTypes[k], ok = models.ParseBlueprintVariableType(v)
	// 	if !ok {
	// 		return nil, gqlerror.Errorf("variable %s has invalid type", k)
	// 	}
	// }

	// Update the blueprint
	entBlueprint, err = entBlueprint.Update().
		SetName(input.Name).
		SetDescription(input.Description).
		SetBlueprintTemplate([]byte(input.BlueprintTemplate)).
		// SetVariableTypes(varTypes).
		SetVariableTypes(input.VariableTypes).
		SetProvider(entProvider).
		Save(ctx)
	if err != nil {
		return nil, gqlerror.Errorf("failed to update blueprint: %v", err)
	}

	// Load all of the blueprint resources
	err = engine.LoadResources(ctx, tx.Client(), r.cbleServer, entBlueprint)
	if err != nil {
		tx.Rollback()
		return nil, gqlerror.Errorf("failed to load resource: %v", err)
	}

	// Commit the transaction
	err = tx.Commit()
	if err != nil {
		tx.Rollback()
		return nil, gqlerror.Errorf("failed to commit transaction: %v", err)
	}

	return entBlueprint.Unwrap(), nil
}

// DeleteBlueprint is the resolver for the deleteBlueprint field.
func (r *mutationResolver) DeleteBlueprint(ctx context.Context, id uuid.UUID) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteBlueprint - deleteBlueprint"))
}

// UpdateDeployment is the resolver for the updateDeployment field.
func (r *mutationResolver) UpdateDeployment(ctx context.Context, id uuid.UUID, input model.DeploymentInput) (*ent.Deployment, error) {
	return r.ent.Deployment.UpdateOneID(id).SetName(input.Name).Save(ctx)
}

// LoadProvider is the resolver for the loadProvider field.
func (r *mutationResolver) LoadProvider(ctx context.Context, id uuid.UUID) (*ent.Provider, error) {
	// Check the provider exists
	entProvider, err := r.ent.Provider.Get(ctx, id)
	if err != nil {
		return nil, gqlerror.Errorf("could not find provider with id %s", id)
	}

	// Queue the provider to load
	r.cbleServer.QueueLoadProvider(id.String())

	return entProvider, nil
}

// UnloadProvider is the resolver for the unloadProvider field.
func (r *mutationResolver) UnloadProvider(ctx context.Context, id uuid.UUID) (*ent.Provider, error) {
	// Check the provider exists
	entProvider, err := r.ent.Provider.Get(ctx, id)
	if err != nil {
		return nil, gqlerror.Errorf("could not find provider with id %s", id)
	}

	// Queue the provider to unload
	err = r.cbleServer.QueueUnloadProvider(id.String())
	if err != nil {
		return entProvider, fmt.Errorf("failed to unload provider: %v", err)
	}

	return entProvider, nil
}

// ConfigureProvider is the resolver for the configureProvider field.
func (r *mutationResolver) ConfigureProvider(ctx context.Context, id uuid.UUID) (*ent.Provider, error) {
	// Get the provider
	entProvider, err := r.ent.Provider.Get(ctx, id)
	if err != nil {
		return nil, gqlerror.Errorf("could not find provider with id %s: %v", id, err)
	}

	reply, err := r.cbleServer.Configure(ctx, entProvider)
	if err != nil {
		return nil, gqlerror.Errorf("failed to configure provider: %v", err)
	}
	if !reply.Success {
		return nil, gqlerror.Errorf("failed to configure provider: unknown error")
	}

	return entProvider, nil
}

// DeployBlueprint is the resolver for the deployBlueprint field.
func (r *mutationResolver) DeployBlueprint(ctx context.Context, id uuid.UUID, templateVars map[string]string) (*ent.Deployment, error) {
	// Get the current authenticated user
	currentUser, err := auth.ForContext(ctx)
	if err != nil {
		return nil, gqlerror.Errorf("failed to get user from context: %v", err)
	}

	// Get the blueprint by ID
	entBlueprint, err := r.ent.Blueprint.Get(ctx, id)
	if err != nil {
		return nil, fmt.Errorf("failed to query blueprint: %v", err)
	}

	// Create a transactional client
	tx, err := r.ent.Tx(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to create transactional client: %v", err)
	}

	// Create the deployment
	entDeployment, err := engine.CreateDeployment(ctx, tx.Client(), entBlueprint, templateVars, currentUser)
	if err != nil {
		tx.Rollback()
		return nil, fmt.Errorf("failed to create deployment: %v", err)
	}

	// Commit the transaction
	err = tx.Commit()
	if err != nil {
		tx.Rollback()
		return nil, fmt.Errorf("failed to commit transaction: %v", err)
	}

	// Re-query deployment using non-transaction client
	entDeployment, err = r.ent.Deployment.Get(ctx, entDeployment.ID)
	if err != nil {
		return nil, fmt.Errorf("failed to re-query deployment: %v", err)
	}

	// Spawn deployment routine
	go engine.StartDeployment(r.ent, r.cbleServer, entDeployment)

	return entDeployment, nil
}

// DestroyDeployment is the resolver for the destroyDeployment field.
func (r *mutationResolver) DestroyDeployment(ctx context.Context, id uuid.UUID) (*ent.Deployment, error) {
	// Get the deployment by ID
	entDeployment, err := r.ent.Deployment.Get(ctx, id)
	if err != nil {
		return nil, fmt.Errorf("failed to query deployment: %v", err)
	}

	// Spawn destruction routine
	go engine.StartDestroy(r.ent, r.cbleServer, entDeployment)

	return entDeployment, nil
}

// RedeployDeployment is the resolver for the redeployDeployment field.
func (r *mutationResolver) RedeployDeployment(ctx context.Context, id uuid.UUID, nodeIds []uuid.UUID) (*ent.Deployment, error) {
	// Get the deployment by ID
	entDeployment, err := r.ent.Deployment.Get(ctx, id)
	if err != nil {
		return nil, fmt.Errorf("failed to query deployment: %v", err)
	}

	// Spawn destruction routine
	go engine.StartRedeploy(r.ent, r.cbleServer, entDeployment, nodeIds)

	return entDeployment, nil
}

// ConfigBytes is the resolver for the configBytes field.
func (r *providerResolver) ConfigBytes(ctx context.Context, obj *ent.Provider) (string, error) {
	return string(obj.ConfigBytes), nil
}

// Blueprints is the resolver for the blueprints field.
func (r *providerResolver) Blueprints(ctx context.Context, obj *ent.Provider) ([]*ent.Blueprint, error) {
	return obj.QueryBlueprints().All(ctx)
}

// Me is the resolver for the me field.
func (r *queryResolver) Me(ctx context.Context) (*ent.User, error) {
	return auth.ForContext(ctx)
}

// MeHasPermission is the resolver for the meHasPermission field.
func (r *queryResolver) MeHasPermission(ctx context.Context, key string) (bool, error) {
	return true, nil // TODO: Implement proper permission check
	// currentUser, err := auth.ForContext(ctx)
	// if err != nil {
	// 	return false, gqlerror.Errorf("failed to get user from context: %v", err)
	// }
	// return r.permissionEngine.RequestPermission(ctx, currentUser, key)
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*ent.User, error) {
	// Check if current user has permission
	if hasPerm, err := permission.CurrentUserHasUserList(ctx, r.ent, uuid.Nil); err != nil || !hasPerm {
		return nil, auth.PERMISSION_DENIED_GQL_ERROR
	}

	return r.ent.User.Query().All(ctx)
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, id uuid.UUID) (*ent.User, error) {
	return r.ent.User.Get(ctx, id)
}

// Groups is the resolver for the groups field.
func (r *queryResolver) Groups(ctx context.Context) ([]*ent.Group, error) {
	return r.ent.Group.Query().All(ctx)
}

// Group is the resolver for the group field.
func (r *queryResolver) Group(ctx context.Context, id uuid.UUID) (*ent.Group, error) {
	return r.ent.Group.Get(ctx, id)
}

// Providers is the resolver for the Providers field.
func (r *queryResolver) Providers(ctx context.Context) ([]*ent.Provider, error) {
	return r.ent.Provider.Query().All(ctx)
}

// Provider is the resolver for the provider field.
func (r *queryResolver) Provider(ctx context.Context, id uuid.UUID) (*ent.Provider, error) {
	return r.ent.Provider.Get(ctx, id)
}

// Blueprints is the resolver for the blueprints field.
func (r *queryResolver) Blueprints(ctx context.Context) ([]*ent.Blueprint, error) {
	return r.ent.Blueprint.Query().All(ctx)
}

// Blueprint is the resolver for the blueprint field.
func (r *queryResolver) Blueprint(ctx context.Context, id uuid.UUID) (*ent.Blueprint, error) {
	return r.ent.Blueprint.Get(ctx, id)
}

// Deployments is the resolver for the deployments field.
func (r *queryResolver) Deployments(ctx context.Context) ([]*ent.Deployment, error) {
	return r.ent.Deployment.Query().All(ctx)
}

// Deployment is the resolver for the deployment field.
func (r *queryResolver) Deployment(ctx context.Context, id uuid.UUID) (*ent.Deployment, error) {
	return r.ent.Deployment.Get(ctx, id)
}

// Type is the resolver for the type field.
func (r *resourceResolver) Type(ctx context.Context, obj *ent.Resource) (model.ResourceType, error) {
	return model.ResourceType(obj.Type), nil
}

// Object is the resolver for the object field.
func (r *resourceResolver) Object(ctx context.Context, obj *ent.Resource) (string, error) {
	objectBytes, err := yaml.Marshal(obj.Object)
	if err != nil {
		return "", err
	}
	return string(objectBytes), nil
}

// Blueprint is the resolver for the blueprint field.
func (r *resourceResolver) Blueprint(ctx context.Context, obj *ent.Resource) (*ent.Blueprint, error) {
	return obj.QueryBlueprint().Only(ctx)
}

// RequiredBy is the resolver for the requiredBy field.
func (r *resourceResolver) RequiredBy(ctx context.Context, obj *ent.Resource) ([]*ent.Resource, error) {
	return obj.QueryRequiredBy().All(ctx)
}

// DependsOn is the resolver for the dependsOn field.
func (r *resourceResolver) DependsOn(ctx context.Context, obj *ent.Resource) ([]*ent.Resource, error) {
	return obj.QueryDependsOn().All(ctx)
}

// Groups is the resolver for the groups field.
func (r *userResolver) Groups(ctx context.Context, obj *ent.User) ([]*ent.Group, error) {
	return obj.QueryGroups().All(ctx)
}

// Deployments is the resolver for the deployments field.
func (r *userResolver) Deployments(ctx context.Context, obj *ent.User) ([]*ent.Deployment, error) {
	return obj.QueryDeployments().All(ctx)
}

// Blueprint returns generated.BlueprintResolver implementation.
func (r *Resolver) Blueprint() generated.BlueprintResolver { return &blueprintResolver{r} }

// Deployment returns generated.DeploymentResolver implementation.
func (r *Resolver) Deployment() generated.DeploymentResolver { return &deploymentResolver{r} }

// DeploymentNode returns generated.DeploymentNodeResolver implementation.
func (r *Resolver) DeploymentNode() generated.DeploymentNodeResolver {
	return &deploymentNodeResolver{r}
}

// GrantedPermission returns generated.GrantedPermissionResolver implementation.
func (r *Resolver) GrantedPermission() generated.GrantedPermissionResolver {
	return &grantedPermissionResolver{r}
}

// Group returns generated.GroupResolver implementation.
func (r *Resolver) Group() generated.GroupResolver { return &groupResolver{r} }

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// Provider returns generated.ProviderResolver implementation.
func (r *Resolver) Provider() generated.ProviderResolver { return &providerResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

// Resource returns generated.ResourceResolver implementation.
func (r *Resolver) Resource() generated.ResourceResolver { return &resourceResolver{r} }

// User returns generated.UserResolver implementation.
func (r *Resolver) User() generated.UserResolver { return &userResolver{r} }

type blueprintResolver struct{ *Resolver }
type deploymentResolver struct{ *Resolver }
type deploymentNodeResolver struct{ *Resolver }
type grantedPermissionResolver struct{ *Resolver }
type groupResolver struct{ *Resolver }
type mutationResolver struct{ *Resolver }
type providerResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type resourceResolver struct{ *Resolver }
type userResolver struct{ *Resolver }
