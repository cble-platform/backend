// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/cble-platform/cble-backend/engine/models"
	"github.com/cble-platform/cble-backend/ent/blueprint"
	"github.com/cble-platform/cble-backend/ent/deployment"
	"github.com/cble-platform/cble-backend/ent/deploymentnode"
	"github.com/cble-platform/cble-backend/ent/grantedpermission"
	"github.com/cble-platform/cble-backend/ent/group"
	"github.com/cble-platform/cble-backend/ent/predicate"
	"github.com/cble-platform/cble-backend/ent/provider"
	"github.com/cble-platform/cble-backend/ent/resource"
	"github.com/cble-platform/cble-backend/ent/user"
	"github.com/cble-platform/cble-backend/permission/actions"
	"github.com/google/uuid"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeBlueprint         = "Blueprint"
	TypeDeployment        = "Deployment"
	TypeDeploymentNode    = "DeploymentNode"
	TypeGrantedPermission = "GrantedPermission"
	TypeGroup             = "Group"
	TypeProvider          = "Provider"
	TypeResource          = "Resource"
	TypeUser              = "User"
)

// BlueprintMutation represents an operation that mutates the Blueprint nodes in the graph.
type BlueprintMutation struct {
	config
	op                 Op
	typ                string
	id                 *uuid.UUID
	created_at         *time.Time
	updated_at         *time.Time
	name               *string
	description        *string
	blueprint_template *[]byte
	variable_types     *map[string]models.BlueprintVariableType
	clearedFields      map[string]struct{}
	provider           *uuid.UUID
	clearedprovider    bool
	resources          map[uuid.UUID]struct{}
	removedresources   map[uuid.UUID]struct{}
	clearedresources   bool
	deployments        map[uuid.UUID]struct{}
	removeddeployments map[uuid.UUID]struct{}
	cleareddeployments bool
	done               bool
	oldValue           func(context.Context) (*Blueprint, error)
	predicates         []predicate.Blueprint
}

var _ ent.Mutation = (*BlueprintMutation)(nil)

// blueprintOption allows management of the mutation configuration using functional options.
type blueprintOption func(*BlueprintMutation)

// newBlueprintMutation creates new mutation for the Blueprint entity.
func newBlueprintMutation(c config, op Op, opts ...blueprintOption) *BlueprintMutation {
	m := &BlueprintMutation{
		config:        c,
		op:            op,
		typ:           TypeBlueprint,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withBlueprintID sets the ID field of the mutation.
func withBlueprintID(id uuid.UUID) blueprintOption {
	return func(m *BlueprintMutation) {
		var (
			err   error
			once  sync.Once
			value *Blueprint
		)
		m.oldValue = func(ctx context.Context) (*Blueprint, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Blueprint.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withBlueprint sets the old Blueprint of the mutation.
func withBlueprint(node *Blueprint) blueprintOption {
	return func(m *BlueprintMutation) {
		m.oldValue = func(context.Context) (*Blueprint, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m BlueprintMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m BlueprintMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Blueprint entities.
func (m *BlueprintMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *BlueprintMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *BlueprintMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Blueprint.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *BlueprintMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *BlueprintMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Blueprint entity.
// If the Blueprint object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BlueprintMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *BlueprintMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *BlueprintMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *BlueprintMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Blueprint entity.
// If the Blueprint object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BlueprintMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *BlueprintMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetName sets the "name" field.
func (m *BlueprintMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *BlueprintMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Blueprint entity.
// If the Blueprint object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BlueprintMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *BlueprintMutation) ResetName() {
	m.name = nil
}

// SetDescription sets the "description" field.
func (m *BlueprintMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *BlueprintMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Blueprint entity.
// If the Blueprint object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BlueprintMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ResetDescription resets all changes to the "description" field.
func (m *BlueprintMutation) ResetDescription() {
	m.description = nil
}

// SetBlueprintTemplate sets the "blueprint_template" field.
func (m *BlueprintMutation) SetBlueprintTemplate(b []byte) {
	m.blueprint_template = &b
}

// BlueprintTemplate returns the value of the "blueprint_template" field in the mutation.
func (m *BlueprintMutation) BlueprintTemplate() (r []byte, exists bool) {
	v := m.blueprint_template
	if v == nil {
		return
	}
	return *v, true
}

// OldBlueprintTemplate returns the old "blueprint_template" field's value of the Blueprint entity.
// If the Blueprint object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BlueprintMutation) OldBlueprintTemplate(ctx context.Context) (v []byte, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBlueprintTemplate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBlueprintTemplate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBlueprintTemplate: %w", err)
	}
	return oldValue.BlueprintTemplate, nil
}

// ResetBlueprintTemplate resets all changes to the "blueprint_template" field.
func (m *BlueprintMutation) ResetBlueprintTemplate() {
	m.blueprint_template = nil
}

// SetVariableTypes sets the "variable_types" field.
func (m *BlueprintMutation) SetVariableTypes(mvt map[string]models.BlueprintVariableType) {
	m.variable_types = &mvt
}

// VariableTypes returns the value of the "variable_types" field in the mutation.
func (m *BlueprintMutation) VariableTypes() (r map[string]models.BlueprintVariableType, exists bool) {
	v := m.variable_types
	if v == nil {
		return
	}
	return *v, true
}

// OldVariableTypes returns the old "variable_types" field's value of the Blueprint entity.
// If the Blueprint object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BlueprintMutation) OldVariableTypes(ctx context.Context) (v map[string]models.BlueprintVariableType, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldVariableTypes is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldVariableTypes requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVariableTypes: %w", err)
	}
	return oldValue.VariableTypes, nil
}

// ResetVariableTypes resets all changes to the "variable_types" field.
func (m *BlueprintMutation) ResetVariableTypes() {
	m.variable_types = nil
}

// SetProviderID sets the "provider" edge to the Provider entity by id.
func (m *BlueprintMutation) SetProviderID(id uuid.UUID) {
	m.provider = &id
}

// ClearProvider clears the "provider" edge to the Provider entity.
func (m *BlueprintMutation) ClearProvider() {
	m.clearedprovider = true
}

// ProviderCleared reports if the "provider" edge to the Provider entity was cleared.
func (m *BlueprintMutation) ProviderCleared() bool {
	return m.clearedprovider
}

// ProviderID returns the "provider" edge ID in the mutation.
func (m *BlueprintMutation) ProviderID() (id uuid.UUID, exists bool) {
	if m.provider != nil {
		return *m.provider, true
	}
	return
}

// ProviderIDs returns the "provider" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ProviderID instead. It exists only for internal usage by the builders.
func (m *BlueprintMutation) ProviderIDs() (ids []uuid.UUID) {
	if id := m.provider; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetProvider resets all changes to the "provider" edge.
func (m *BlueprintMutation) ResetProvider() {
	m.provider = nil
	m.clearedprovider = false
}

// AddResourceIDs adds the "resources" edge to the Resource entity by ids.
func (m *BlueprintMutation) AddResourceIDs(ids ...uuid.UUID) {
	if m.resources == nil {
		m.resources = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.resources[ids[i]] = struct{}{}
	}
}

// ClearResources clears the "resources" edge to the Resource entity.
func (m *BlueprintMutation) ClearResources() {
	m.clearedresources = true
}

// ResourcesCleared reports if the "resources" edge to the Resource entity was cleared.
func (m *BlueprintMutation) ResourcesCleared() bool {
	return m.clearedresources
}

// RemoveResourceIDs removes the "resources" edge to the Resource entity by IDs.
func (m *BlueprintMutation) RemoveResourceIDs(ids ...uuid.UUID) {
	if m.removedresources == nil {
		m.removedresources = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.resources, ids[i])
		m.removedresources[ids[i]] = struct{}{}
	}
}

// RemovedResources returns the removed IDs of the "resources" edge to the Resource entity.
func (m *BlueprintMutation) RemovedResourcesIDs() (ids []uuid.UUID) {
	for id := range m.removedresources {
		ids = append(ids, id)
	}
	return
}

// ResourcesIDs returns the "resources" edge IDs in the mutation.
func (m *BlueprintMutation) ResourcesIDs() (ids []uuid.UUID) {
	for id := range m.resources {
		ids = append(ids, id)
	}
	return
}

// ResetResources resets all changes to the "resources" edge.
func (m *BlueprintMutation) ResetResources() {
	m.resources = nil
	m.clearedresources = false
	m.removedresources = nil
}

// AddDeploymentIDs adds the "deployments" edge to the Deployment entity by ids.
func (m *BlueprintMutation) AddDeploymentIDs(ids ...uuid.UUID) {
	if m.deployments == nil {
		m.deployments = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.deployments[ids[i]] = struct{}{}
	}
}

// ClearDeployments clears the "deployments" edge to the Deployment entity.
func (m *BlueprintMutation) ClearDeployments() {
	m.cleareddeployments = true
}

// DeploymentsCleared reports if the "deployments" edge to the Deployment entity was cleared.
func (m *BlueprintMutation) DeploymentsCleared() bool {
	return m.cleareddeployments
}

// RemoveDeploymentIDs removes the "deployments" edge to the Deployment entity by IDs.
func (m *BlueprintMutation) RemoveDeploymentIDs(ids ...uuid.UUID) {
	if m.removeddeployments == nil {
		m.removeddeployments = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.deployments, ids[i])
		m.removeddeployments[ids[i]] = struct{}{}
	}
}

// RemovedDeployments returns the removed IDs of the "deployments" edge to the Deployment entity.
func (m *BlueprintMutation) RemovedDeploymentsIDs() (ids []uuid.UUID) {
	for id := range m.removeddeployments {
		ids = append(ids, id)
	}
	return
}

// DeploymentsIDs returns the "deployments" edge IDs in the mutation.
func (m *BlueprintMutation) DeploymentsIDs() (ids []uuid.UUID) {
	for id := range m.deployments {
		ids = append(ids, id)
	}
	return
}

// ResetDeployments resets all changes to the "deployments" edge.
func (m *BlueprintMutation) ResetDeployments() {
	m.deployments = nil
	m.cleareddeployments = false
	m.removeddeployments = nil
}

// Where appends a list predicates to the BlueprintMutation builder.
func (m *BlueprintMutation) Where(ps ...predicate.Blueprint) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the BlueprintMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *BlueprintMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Blueprint, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *BlueprintMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *BlueprintMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Blueprint).
func (m *BlueprintMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *BlueprintMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.created_at != nil {
		fields = append(fields, blueprint.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, blueprint.FieldUpdatedAt)
	}
	if m.name != nil {
		fields = append(fields, blueprint.FieldName)
	}
	if m.description != nil {
		fields = append(fields, blueprint.FieldDescription)
	}
	if m.blueprint_template != nil {
		fields = append(fields, blueprint.FieldBlueprintTemplate)
	}
	if m.variable_types != nil {
		fields = append(fields, blueprint.FieldVariableTypes)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *BlueprintMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case blueprint.FieldCreatedAt:
		return m.CreatedAt()
	case blueprint.FieldUpdatedAt:
		return m.UpdatedAt()
	case blueprint.FieldName:
		return m.Name()
	case blueprint.FieldDescription:
		return m.Description()
	case blueprint.FieldBlueprintTemplate:
		return m.BlueprintTemplate()
	case blueprint.FieldVariableTypes:
		return m.VariableTypes()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *BlueprintMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case blueprint.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case blueprint.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case blueprint.FieldName:
		return m.OldName(ctx)
	case blueprint.FieldDescription:
		return m.OldDescription(ctx)
	case blueprint.FieldBlueprintTemplate:
		return m.OldBlueprintTemplate(ctx)
	case blueprint.FieldVariableTypes:
		return m.OldVariableTypes(ctx)
	}
	return nil, fmt.Errorf("unknown Blueprint field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *BlueprintMutation) SetField(name string, value ent.Value) error {
	switch name {
	case blueprint.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case blueprint.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case blueprint.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case blueprint.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case blueprint.FieldBlueprintTemplate:
		v, ok := value.([]byte)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBlueprintTemplate(v)
		return nil
	case blueprint.FieldVariableTypes:
		v, ok := value.(map[string]models.BlueprintVariableType)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVariableTypes(v)
		return nil
	}
	return fmt.Errorf("unknown Blueprint field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *BlueprintMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *BlueprintMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *BlueprintMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Blueprint numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *BlueprintMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *BlueprintMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *BlueprintMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Blueprint nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *BlueprintMutation) ResetField(name string) error {
	switch name {
	case blueprint.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case blueprint.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case blueprint.FieldName:
		m.ResetName()
		return nil
	case blueprint.FieldDescription:
		m.ResetDescription()
		return nil
	case blueprint.FieldBlueprintTemplate:
		m.ResetBlueprintTemplate()
		return nil
	case blueprint.FieldVariableTypes:
		m.ResetVariableTypes()
		return nil
	}
	return fmt.Errorf("unknown Blueprint field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *BlueprintMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.provider != nil {
		edges = append(edges, blueprint.EdgeProvider)
	}
	if m.resources != nil {
		edges = append(edges, blueprint.EdgeResources)
	}
	if m.deployments != nil {
		edges = append(edges, blueprint.EdgeDeployments)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *BlueprintMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case blueprint.EdgeProvider:
		if id := m.provider; id != nil {
			return []ent.Value{*id}
		}
	case blueprint.EdgeResources:
		ids := make([]ent.Value, 0, len(m.resources))
		for id := range m.resources {
			ids = append(ids, id)
		}
		return ids
	case blueprint.EdgeDeployments:
		ids := make([]ent.Value, 0, len(m.deployments))
		for id := range m.deployments {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *BlueprintMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removedresources != nil {
		edges = append(edges, blueprint.EdgeResources)
	}
	if m.removeddeployments != nil {
		edges = append(edges, blueprint.EdgeDeployments)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *BlueprintMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case blueprint.EdgeResources:
		ids := make([]ent.Value, 0, len(m.removedresources))
		for id := range m.removedresources {
			ids = append(ids, id)
		}
		return ids
	case blueprint.EdgeDeployments:
		ids := make([]ent.Value, 0, len(m.removeddeployments))
		for id := range m.removeddeployments {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *BlueprintMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedprovider {
		edges = append(edges, blueprint.EdgeProvider)
	}
	if m.clearedresources {
		edges = append(edges, blueprint.EdgeResources)
	}
	if m.cleareddeployments {
		edges = append(edges, blueprint.EdgeDeployments)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *BlueprintMutation) EdgeCleared(name string) bool {
	switch name {
	case blueprint.EdgeProvider:
		return m.clearedprovider
	case blueprint.EdgeResources:
		return m.clearedresources
	case blueprint.EdgeDeployments:
		return m.cleareddeployments
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *BlueprintMutation) ClearEdge(name string) error {
	switch name {
	case blueprint.EdgeProvider:
		m.ClearProvider()
		return nil
	}
	return fmt.Errorf("unknown Blueprint unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *BlueprintMutation) ResetEdge(name string) error {
	switch name {
	case blueprint.EdgeProvider:
		m.ResetProvider()
		return nil
	case blueprint.EdgeResources:
		m.ResetResources()
		return nil
	case blueprint.EdgeDeployments:
		m.ResetDeployments()
		return nil
	}
	return fmt.Errorf("unknown Blueprint edge %s", name)
}

// DeploymentMutation represents an operation that mutates the Deployment nodes in the graph.
type DeploymentMutation struct {
	config
	op                      Op
	typ                     string
	id                      *uuid.UUID
	created_at              *time.Time
	updated_at              *time.Time
	name                    *string
	description             *string
	state                   *deployment.State
	template_vars           *map[string]string
	clearedFields           map[string]struct{}
	blueprint               *uuid.UUID
	clearedblueprint        bool
	deployment_nodes        map[uuid.UUID]struct{}
	removeddeployment_nodes map[uuid.UUID]struct{}
	cleareddeployment_nodes bool
	requester               *uuid.UUID
	clearedrequester        bool
	done                    bool
	oldValue                func(context.Context) (*Deployment, error)
	predicates              []predicate.Deployment
}

var _ ent.Mutation = (*DeploymentMutation)(nil)

// deploymentOption allows management of the mutation configuration using functional options.
type deploymentOption func(*DeploymentMutation)

// newDeploymentMutation creates new mutation for the Deployment entity.
func newDeploymentMutation(c config, op Op, opts ...deploymentOption) *DeploymentMutation {
	m := &DeploymentMutation{
		config:        c,
		op:            op,
		typ:           TypeDeployment,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withDeploymentID sets the ID field of the mutation.
func withDeploymentID(id uuid.UUID) deploymentOption {
	return func(m *DeploymentMutation) {
		var (
			err   error
			once  sync.Once
			value *Deployment
		)
		m.oldValue = func(ctx context.Context) (*Deployment, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Deployment.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withDeployment sets the old Deployment of the mutation.
func withDeployment(node *Deployment) deploymentOption {
	return func(m *DeploymentMutation) {
		m.oldValue = func(context.Context) (*Deployment, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m DeploymentMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m DeploymentMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Deployment entities.
func (m *DeploymentMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *DeploymentMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *DeploymentMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Deployment.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *DeploymentMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *DeploymentMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Deployment entity.
// If the Deployment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DeploymentMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *DeploymentMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *DeploymentMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *DeploymentMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Deployment entity.
// If the Deployment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DeploymentMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *DeploymentMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetName sets the "name" field.
func (m *DeploymentMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *DeploymentMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Deployment entity.
// If the Deployment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DeploymentMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *DeploymentMutation) ResetName() {
	m.name = nil
}

// SetDescription sets the "description" field.
func (m *DeploymentMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *DeploymentMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Deployment entity.
// If the Deployment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DeploymentMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ResetDescription resets all changes to the "description" field.
func (m *DeploymentMutation) ResetDescription() {
	m.description = nil
}

// SetState sets the "state" field.
func (m *DeploymentMutation) SetState(d deployment.State) {
	m.state = &d
}

// State returns the value of the "state" field in the mutation.
func (m *DeploymentMutation) State() (r deployment.State, exists bool) {
	v := m.state
	if v == nil {
		return
	}
	return *v, true
}

// OldState returns the old "state" field's value of the Deployment entity.
// If the Deployment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DeploymentMutation) OldState(ctx context.Context) (v deployment.State, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldState is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldState requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldState: %w", err)
	}
	return oldValue.State, nil
}

// ResetState resets all changes to the "state" field.
func (m *DeploymentMutation) ResetState() {
	m.state = nil
}

// SetTemplateVars sets the "template_vars" field.
func (m *DeploymentMutation) SetTemplateVars(value map[string]string) {
	m.template_vars = &value
}

// TemplateVars returns the value of the "template_vars" field in the mutation.
func (m *DeploymentMutation) TemplateVars() (r map[string]string, exists bool) {
	v := m.template_vars
	if v == nil {
		return
	}
	return *v, true
}

// OldTemplateVars returns the old "template_vars" field's value of the Deployment entity.
// If the Deployment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DeploymentMutation) OldTemplateVars(ctx context.Context) (v map[string]string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTemplateVars is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTemplateVars requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTemplateVars: %w", err)
	}
	return oldValue.TemplateVars, nil
}

// ResetTemplateVars resets all changes to the "template_vars" field.
func (m *DeploymentMutation) ResetTemplateVars() {
	m.template_vars = nil
}

// SetBlueprintID sets the "blueprint" edge to the Blueprint entity by id.
func (m *DeploymentMutation) SetBlueprintID(id uuid.UUID) {
	m.blueprint = &id
}

// ClearBlueprint clears the "blueprint" edge to the Blueprint entity.
func (m *DeploymentMutation) ClearBlueprint() {
	m.clearedblueprint = true
}

// BlueprintCleared reports if the "blueprint" edge to the Blueprint entity was cleared.
func (m *DeploymentMutation) BlueprintCleared() bool {
	return m.clearedblueprint
}

// BlueprintID returns the "blueprint" edge ID in the mutation.
func (m *DeploymentMutation) BlueprintID() (id uuid.UUID, exists bool) {
	if m.blueprint != nil {
		return *m.blueprint, true
	}
	return
}

// BlueprintIDs returns the "blueprint" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// BlueprintID instead. It exists only for internal usage by the builders.
func (m *DeploymentMutation) BlueprintIDs() (ids []uuid.UUID) {
	if id := m.blueprint; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetBlueprint resets all changes to the "blueprint" edge.
func (m *DeploymentMutation) ResetBlueprint() {
	m.blueprint = nil
	m.clearedblueprint = false
}

// AddDeploymentNodeIDs adds the "deployment_nodes" edge to the DeploymentNode entity by ids.
func (m *DeploymentMutation) AddDeploymentNodeIDs(ids ...uuid.UUID) {
	if m.deployment_nodes == nil {
		m.deployment_nodes = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.deployment_nodes[ids[i]] = struct{}{}
	}
}

// ClearDeploymentNodes clears the "deployment_nodes" edge to the DeploymentNode entity.
func (m *DeploymentMutation) ClearDeploymentNodes() {
	m.cleareddeployment_nodes = true
}

// DeploymentNodesCleared reports if the "deployment_nodes" edge to the DeploymentNode entity was cleared.
func (m *DeploymentMutation) DeploymentNodesCleared() bool {
	return m.cleareddeployment_nodes
}

// RemoveDeploymentNodeIDs removes the "deployment_nodes" edge to the DeploymentNode entity by IDs.
func (m *DeploymentMutation) RemoveDeploymentNodeIDs(ids ...uuid.UUID) {
	if m.removeddeployment_nodes == nil {
		m.removeddeployment_nodes = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.deployment_nodes, ids[i])
		m.removeddeployment_nodes[ids[i]] = struct{}{}
	}
}

// RemovedDeploymentNodes returns the removed IDs of the "deployment_nodes" edge to the DeploymentNode entity.
func (m *DeploymentMutation) RemovedDeploymentNodesIDs() (ids []uuid.UUID) {
	for id := range m.removeddeployment_nodes {
		ids = append(ids, id)
	}
	return
}

// DeploymentNodesIDs returns the "deployment_nodes" edge IDs in the mutation.
func (m *DeploymentMutation) DeploymentNodesIDs() (ids []uuid.UUID) {
	for id := range m.deployment_nodes {
		ids = append(ids, id)
	}
	return
}

// ResetDeploymentNodes resets all changes to the "deployment_nodes" edge.
func (m *DeploymentMutation) ResetDeploymentNodes() {
	m.deployment_nodes = nil
	m.cleareddeployment_nodes = false
	m.removeddeployment_nodes = nil
}

// SetRequesterID sets the "requester" edge to the User entity by id.
func (m *DeploymentMutation) SetRequesterID(id uuid.UUID) {
	m.requester = &id
}

// ClearRequester clears the "requester" edge to the User entity.
func (m *DeploymentMutation) ClearRequester() {
	m.clearedrequester = true
}

// RequesterCleared reports if the "requester" edge to the User entity was cleared.
func (m *DeploymentMutation) RequesterCleared() bool {
	return m.clearedrequester
}

// RequesterID returns the "requester" edge ID in the mutation.
func (m *DeploymentMutation) RequesterID() (id uuid.UUID, exists bool) {
	if m.requester != nil {
		return *m.requester, true
	}
	return
}

// RequesterIDs returns the "requester" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// RequesterID instead. It exists only for internal usage by the builders.
func (m *DeploymentMutation) RequesterIDs() (ids []uuid.UUID) {
	if id := m.requester; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetRequester resets all changes to the "requester" edge.
func (m *DeploymentMutation) ResetRequester() {
	m.requester = nil
	m.clearedrequester = false
}

// Where appends a list predicates to the DeploymentMutation builder.
func (m *DeploymentMutation) Where(ps ...predicate.Deployment) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the DeploymentMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *DeploymentMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Deployment, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *DeploymentMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *DeploymentMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Deployment).
func (m *DeploymentMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *DeploymentMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.created_at != nil {
		fields = append(fields, deployment.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, deployment.FieldUpdatedAt)
	}
	if m.name != nil {
		fields = append(fields, deployment.FieldName)
	}
	if m.description != nil {
		fields = append(fields, deployment.FieldDescription)
	}
	if m.state != nil {
		fields = append(fields, deployment.FieldState)
	}
	if m.template_vars != nil {
		fields = append(fields, deployment.FieldTemplateVars)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *DeploymentMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case deployment.FieldCreatedAt:
		return m.CreatedAt()
	case deployment.FieldUpdatedAt:
		return m.UpdatedAt()
	case deployment.FieldName:
		return m.Name()
	case deployment.FieldDescription:
		return m.Description()
	case deployment.FieldState:
		return m.State()
	case deployment.FieldTemplateVars:
		return m.TemplateVars()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *DeploymentMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case deployment.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case deployment.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case deployment.FieldName:
		return m.OldName(ctx)
	case deployment.FieldDescription:
		return m.OldDescription(ctx)
	case deployment.FieldState:
		return m.OldState(ctx)
	case deployment.FieldTemplateVars:
		return m.OldTemplateVars(ctx)
	}
	return nil, fmt.Errorf("unknown Deployment field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DeploymentMutation) SetField(name string, value ent.Value) error {
	switch name {
	case deployment.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case deployment.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case deployment.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case deployment.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case deployment.FieldState:
		v, ok := value.(deployment.State)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetState(v)
		return nil
	case deployment.FieldTemplateVars:
		v, ok := value.(map[string]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTemplateVars(v)
		return nil
	}
	return fmt.Errorf("unknown Deployment field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *DeploymentMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *DeploymentMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DeploymentMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Deployment numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *DeploymentMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *DeploymentMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *DeploymentMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Deployment nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *DeploymentMutation) ResetField(name string) error {
	switch name {
	case deployment.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case deployment.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case deployment.FieldName:
		m.ResetName()
		return nil
	case deployment.FieldDescription:
		m.ResetDescription()
		return nil
	case deployment.FieldState:
		m.ResetState()
		return nil
	case deployment.FieldTemplateVars:
		m.ResetTemplateVars()
		return nil
	}
	return fmt.Errorf("unknown Deployment field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *DeploymentMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.blueprint != nil {
		edges = append(edges, deployment.EdgeBlueprint)
	}
	if m.deployment_nodes != nil {
		edges = append(edges, deployment.EdgeDeploymentNodes)
	}
	if m.requester != nil {
		edges = append(edges, deployment.EdgeRequester)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *DeploymentMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case deployment.EdgeBlueprint:
		if id := m.blueprint; id != nil {
			return []ent.Value{*id}
		}
	case deployment.EdgeDeploymentNodes:
		ids := make([]ent.Value, 0, len(m.deployment_nodes))
		for id := range m.deployment_nodes {
			ids = append(ids, id)
		}
		return ids
	case deployment.EdgeRequester:
		if id := m.requester; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *DeploymentMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removeddeployment_nodes != nil {
		edges = append(edges, deployment.EdgeDeploymentNodes)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *DeploymentMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case deployment.EdgeDeploymentNodes:
		ids := make([]ent.Value, 0, len(m.removeddeployment_nodes))
		for id := range m.removeddeployment_nodes {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *DeploymentMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedblueprint {
		edges = append(edges, deployment.EdgeBlueprint)
	}
	if m.cleareddeployment_nodes {
		edges = append(edges, deployment.EdgeDeploymentNodes)
	}
	if m.clearedrequester {
		edges = append(edges, deployment.EdgeRequester)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *DeploymentMutation) EdgeCleared(name string) bool {
	switch name {
	case deployment.EdgeBlueprint:
		return m.clearedblueprint
	case deployment.EdgeDeploymentNodes:
		return m.cleareddeployment_nodes
	case deployment.EdgeRequester:
		return m.clearedrequester
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *DeploymentMutation) ClearEdge(name string) error {
	switch name {
	case deployment.EdgeBlueprint:
		m.ClearBlueprint()
		return nil
	case deployment.EdgeRequester:
		m.ClearRequester()
		return nil
	}
	return fmt.Errorf("unknown Deployment unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *DeploymentMutation) ResetEdge(name string) error {
	switch name {
	case deployment.EdgeBlueprint:
		m.ResetBlueprint()
		return nil
	case deployment.EdgeDeploymentNodes:
		m.ResetDeploymentNodes()
		return nil
	case deployment.EdgeRequester:
		m.ResetRequester()
		return nil
	}
	return fmt.Errorf("unknown Deployment edge %s", name)
}

// DeploymentNodeMutation represents an operation that mutates the DeploymentNode nodes in the graph.
type DeploymentNodeMutation struct {
	config
	op                Op
	typ               string
	id                *uuid.UUID
	created_at        *time.Time
	updated_at        *time.Time
	state             *deploymentnode.State
	vars              *map[string]string
	clearedFields     map[string]struct{}
	deployment        *uuid.UUID
	cleareddeployment bool
	resource          *uuid.UUID
	clearedresource   bool
	prev_nodes        map[uuid.UUID]struct{}
	removedprev_nodes map[uuid.UUID]struct{}
	clearedprev_nodes bool
	next_nodes        map[uuid.UUID]struct{}
	removednext_nodes map[uuid.UUID]struct{}
	clearednext_nodes bool
	done              bool
	oldValue          func(context.Context) (*DeploymentNode, error)
	predicates        []predicate.DeploymentNode
}

var _ ent.Mutation = (*DeploymentNodeMutation)(nil)

// deploymentnodeOption allows management of the mutation configuration using functional options.
type deploymentnodeOption func(*DeploymentNodeMutation)

// newDeploymentNodeMutation creates new mutation for the DeploymentNode entity.
func newDeploymentNodeMutation(c config, op Op, opts ...deploymentnodeOption) *DeploymentNodeMutation {
	m := &DeploymentNodeMutation{
		config:        c,
		op:            op,
		typ:           TypeDeploymentNode,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withDeploymentNodeID sets the ID field of the mutation.
func withDeploymentNodeID(id uuid.UUID) deploymentnodeOption {
	return func(m *DeploymentNodeMutation) {
		var (
			err   error
			once  sync.Once
			value *DeploymentNode
		)
		m.oldValue = func(ctx context.Context) (*DeploymentNode, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().DeploymentNode.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withDeploymentNode sets the old DeploymentNode of the mutation.
func withDeploymentNode(node *DeploymentNode) deploymentnodeOption {
	return func(m *DeploymentNodeMutation) {
		m.oldValue = func(context.Context) (*DeploymentNode, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m DeploymentNodeMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m DeploymentNodeMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of DeploymentNode entities.
func (m *DeploymentNodeMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *DeploymentNodeMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *DeploymentNodeMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().DeploymentNode.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *DeploymentNodeMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *DeploymentNodeMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the DeploymentNode entity.
// If the DeploymentNode object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DeploymentNodeMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *DeploymentNodeMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *DeploymentNodeMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *DeploymentNodeMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the DeploymentNode entity.
// If the DeploymentNode object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DeploymentNodeMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *DeploymentNodeMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetState sets the "state" field.
func (m *DeploymentNodeMutation) SetState(d deploymentnode.State) {
	m.state = &d
}

// State returns the value of the "state" field in the mutation.
func (m *DeploymentNodeMutation) State() (r deploymentnode.State, exists bool) {
	v := m.state
	if v == nil {
		return
	}
	return *v, true
}

// OldState returns the old "state" field's value of the DeploymentNode entity.
// If the DeploymentNode object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DeploymentNodeMutation) OldState(ctx context.Context) (v deploymentnode.State, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldState is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldState requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldState: %w", err)
	}
	return oldValue.State, nil
}

// ResetState resets all changes to the "state" field.
func (m *DeploymentNodeMutation) ResetState() {
	m.state = nil
}

// SetVars sets the "vars" field.
func (m *DeploymentNodeMutation) SetVars(value map[string]string) {
	m.vars = &value
}

// Vars returns the value of the "vars" field in the mutation.
func (m *DeploymentNodeMutation) Vars() (r map[string]string, exists bool) {
	v := m.vars
	if v == nil {
		return
	}
	return *v, true
}

// OldVars returns the old "vars" field's value of the DeploymentNode entity.
// If the DeploymentNode object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DeploymentNodeMutation) OldVars(ctx context.Context) (v map[string]string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldVars is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldVars requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVars: %w", err)
	}
	return oldValue.Vars, nil
}

// ResetVars resets all changes to the "vars" field.
func (m *DeploymentNodeMutation) ResetVars() {
	m.vars = nil
}

// SetDeploymentID sets the "deployment" edge to the Deployment entity by id.
func (m *DeploymentNodeMutation) SetDeploymentID(id uuid.UUID) {
	m.deployment = &id
}

// ClearDeployment clears the "deployment" edge to the Deployment entity.
func (m *DeploymentNodeMutation) ClearDeployment() {
	m.cleareddeployment = true
}

// DeploymentCleared reports if the "deployment" edge to the Deployment entity was cleared.
func (m *DeploymentNodeMutation) DeploymentCleared() bool {
	return m.cleareddeployment
}

// DeploymentID returns the "deployment" edge ID in the mutation.
func (m *DeploymentNodeMutation) DeploymentID() (id uuid.UUID, exists bool) {
	if m.deployment != nil {
		return *m.deployment, true
	}
	return
}

// DeploymentIDs returns the "deployment" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// DeploymentID instead. It exists only for internal usage by the builders.
func (m *DeploymentNodeMutation) DeploymentIDs() (ids []uuid.UUID) {
	if id := m.deployment; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetDeployment resets all changes to the "deployment" edge.
func (m *DeploymentNodeMutation) ResetDeployment() {
	m.deployment = nil
	m.cleareddeployment = false
}

// SetResourceID sets the "resource" edge to the Resource entity by id.
func (m *DeploymentNodeMutation) SetResourceID(id uuid.UUID) {
	m.resource = &id
}

// ClearResource clears the "resource" edge to the Resource entity.
func (m *DeploymentNodeMutation) ClearResource() {
	m.clearedresource = true
}

// ResourceCleared reports if the "resource" edge to the Resource entity was cleared.
func (m *DeploymentNodeMutation) ResourceCleared() bool {
	return m.clearedresource
}

// ResourceID returns the "resource" edge ID in the mutation.
func (m *DeploymentNodeMutation) ResourceID() (id uuid.UUID, exists bool) {
	if m.resource != nil {
		return *m.resource, true
	}
	return
}

// ResourceIDs returns the "resource" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ResourceID instead. It exists only for internal usage by the builders.
func (m *DeploymentNodeMutation) ResourceIDs() (ids []uuid.UUID) {
	if id := m.resource; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetResource resets all changes to the "resource" edge.
func (m *DeploymentNodeMutation) ResetResource() {
	m.resource = nil
	m.clearedresource = false
}

// AddPrevNodeIDs adds the "prev_nodes" edge to the DeploymentNode entity by ids.
func (m *DeploymentNodeMutation) AddPrevNodeIDs(ids ...uuid.UUID) {
	if m.prev_nodes == nil {
		m.prev_nodes = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.prev_nodes[ids[i]] = struct{}{}
	}
}

// ClearPrevNodes clears the "prev_nodes" edge to the DeploymentNode entity.
func (m *DeploymentNodeMutation) ClearPrevNodes() {
	m.clearedprev_nodes = true
}

// PrevNodesCleared reports if the "prev_nodes" edge to the DeploymentNode entity was cleared.
func (m *DeploymentNodeMutation) PrevNodesCleared() bool {
	return m.clearedprev_nodes
}

// RemovePrevNodeIDs removes the "prev_nodes" edge to the DeploymentNode entity by IDs.
func (m *DeploymentNodeMutation) RemovePrevNodeIDs(ids ...uuid.UUID) {
	if m.removedprev_nodes == nil {
		m.removedprev_nodes = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.prev_nodes, ids[i])
		m.removedprev_nodes[ids[i]] = struct{}{}
	}
}

// RemovedPrevNodes returns the removed IDs of the "prev_nodes" edge to the DeploymentNode entity.
func (m *DeploymentNodeMutation) RemovedPrevNodesIDs() (ids []uuid.UUID) {
	for id := range m.removedprev_nodes {
		ids = append(ids, id)
	}
	return
}

// PrevNodesIDs returns the "prev_nodes" edge IDs in the mutation.
func (m *DeploymentNodeMutation) PrevNodesIDs() (ids []uuid.UUID) {
	for id := range m.prev_nodes {
		ids = append(ids, id)
	}
	return
}

// ResetPrevNodes resets all changes to the "prev_nodes" edge.
func (m *DeploymentNodeMutation) ResetPrevNodes() {
	m.prev_nodes = nil
	m.clearedprev_nodes = false
	m.removedprev_nodes = nil
}

// AddNextNodeIDs adds the "next_nodes" edge to the DeploymentNode entity by ids.
func (m *DeploymentNodeMutation) AddNextNodeIDs(ids ...uuid.UUID) {
	if m.next_nodes == nil {
		m.next_nodes = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.next_nodes[ids[i]] = struct{}{}
	}
}

// ClearNextNodes clears the "next_nodes" edge to the DeploymentNode entity.
func (m *DeploymentNodeMutation) ClearNextNodes() {
	m.clearednext_nodes = true
}

// NextNodesCleared reports if the "next_nodes" edge to the DeploymentNode entity was cleared.
func (m *DeploymentNodeMutation) NextNodesCleared() bool {
	return m.clearednext_nodes
}

// RemoveNextNodeIDs removes the "next_nodes" edge to the DeploymentNode entity by IDs.
func (m *DeploymentNodeMutation) RemoveNextNodeIDs(ids ...uuid.UUID) {
	if m.removednext_nodes == nil {
		m.removednext_nodes = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.next_nodes, ids[i])
		m.removednext_nodes[ids[i]] = struct{}{}
	}
}

// RemovedNextNodes returns the removed IDs of the "next_nodes" edge to the DeploymentNode entity.
func (m *DeploymentNodeMutation) RemovedNextNodesIDs() (ids []uuid.UUID) {
	for id := range m.removednext_nodes {
		ids = append(ids, id)
	}
	return
}

// NextNodesIDs returns the "next_nodes" edge IDs in the mutation.
func (m *DeploymentNodeMutation) NextNodesIDs() (ids []uuid.UUID) {
	for id := range m.next_nodes {
		ids = append(ids, id)
	}
	return
}

// ResetNextNodes resets all changes to the "next_nodes" edge.
func (m *DeploymentNodeMutation) ResetNextNodes() {
	m.next_nodes = nil
	m.clearednext_nodes = false
	m.removednext_nodes = nil
}

// Where appends a list predicates to the DeploymentNodeMutation builder.
func (m *DeploymentNodeMutation) Where(ps ...predicate.DeploymentNode) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the DeploymentNodeMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *DeploymentNodeMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.DeploymentNode, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *DeploymentNodeMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *DeploymentNodeMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (DeploymentNode).
func (m *DeploymentNodeMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *DeploymentNodeMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.created_at != nil {
		fields = append(fields, deploymentnode.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, deploymentnode.FieldUpdatedAt)
	}
	if m.state != nil {
		fields = append(fields, deploymentnode.FieldState)
	}
	if m.vars != nil {
		fields = append(fields, deploymentnode.FieldVars)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *DeploymentNodeMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case deploymentnode.FieldCreatedAt:
		return m.CreatedAt()
	case deploymentnode.FieldUpdatedAt:
		return m.UpdatedAt()
	case deploymentnode.FieldState:
		return m.State()
	case deploymentnode.FieldVars:
		return m.Vars()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *DeploymentNodeMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case deploymentnode.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case deploymentnode.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case deploymentnode.FieldState:
		return m.OldState(ctx)
	case deploymentnode.FieldVars:
		return m.OldVars(ctx)
	}
	return nil, fmt.Errorf("unknown DeploymentNode field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DeploymentNodeMutation) SetField(name string, value ent.Value) error {
	switch name {
	case deploymentnode.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case deploymentnode.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case deploymentnode.FieldState:
		v, ok := value.(deploymentnode.State)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetState(v)
		return nil
	case deploymentnode.FieldVars:
		v, ok := value.(map[string]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVars(v)
		return nil
	}
	return fmt.Errorf("unknown DeploymentNode field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *DeploymentNodeMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *DeploymentNodeMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DeploymentNodeMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown DeploymentNode numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *DeploymentNodeMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *DeploymentNodeMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *DeploymentNodeMutation) ClearField(name string) error {
	return fmt.Errorf("unknown DeploymentNode nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *DeploymentNodeMutation) ResetField(name string) error {
	switch name {
	case deploymentnode.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case deploymentnode.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case deploymentnode.FieldState:
		m.ResetState()
		return nil
	case deploymentnode.FieldVars:
		m.ResetVars()
		return nil
	}
	return fmt.Errorf("unknown DeploymentNode field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *DeploymentNodeMutation) AddedEdges() []string {
	edges := make([]string, 0, 4)
	if m.deployment != nil {
		edges = append(edges, deploymentnode.EdgeDeployment)
	}
	if m.resource != nil {
		edges = append(edges, deploymentnode.EdgeResource)
	}
	if m.prev_nodes != nil {
		edges = append(edges, deploymentnode.EdgePrevNodes)
	}
	if m.next_nodes != nil {
		edges = append(edges, deploymentnode.EdgeNextNodes)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *DeploymentNodeMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case deploymentnode.EdgeDeployment:
		if id := m.deployment; id != nil {
			return []ent.Value{*id}
		}
	case deploymentnode.EdgeResource:
		if id := m.resource; id != nil {
			return []ent.Value{*id}
		}
	case deploymentnode.EdgePrevNodes:
		ids := make([]ent.Value, 0, len(m.prev_nodes))
		for id := range m.prev_nodes {
			ids = append(ids, id)
		}
		return ids
	case deploymentnode.EdgeNextNodes:
		ids := make([]ent.Value, 0, len(m.next_nodes))
		for id := range m.next_nodes {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *DeploymentNodeMutation) RemovedEdges() []string {
	edges := make([]string, 0, 4)
	if m.removedprev_nodes != nil {
		edges = append(edges, deploymentnode.EdgePrevNodes)
	}
	if m.removednext_nodes != nil {
		edges = append(edges, deploymentnode.EdgeNextNodes)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *DeploymentNodeMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case deploymentnode.EdgePrevNodes:
		ids := make([]ent.Value, 0, len(m.removedprev_nodes))
		for id := range m.removedprev_nodes {
			ids = append(ids, id)
		}
		return ids
	case deploymentnode.EdgeNextNodes:
		ids := make([]ent.Value, 0, len(m.removednext_nodes))
		for id := range m.removednext_nodes {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *DeploymentNodeMutation) ClearedEdges() []string {
	edges := make([]string, 0, 4)
	if m.cleareddeployment {
		edges = append(edges, deploymentnode.EdgeDeployment)
	}
	if m.clearedresource {
		edges = append(edges, deploymentnode.EdgeResource)
	}
	if m.clearedprev_nodes {
		edges = append(edges, deploymentnode.EdgePrevNodes)
	}
	if m.clearednext_nodes {
		edges = append(edges, deploymentnode.EdgeNextNodes)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *DeploymentNodeMutation) EdgeCleared(name string) bool {
	switch name {
	case deploymentnode.EdgeDeployment:
		return m.cleareddeployment
	case deploymentnode.EdgeResource:
		return m.clearedresource
	case deploymentnode.EdgePrevNodes:
		return m.clearedprev_nodes
	case deploymentnode.EdgeNextNodes:
		return m.clearednext_nodes
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *DeploymentNodeMutation) ClearEdge(name string) error {
	switch name {
	case deploymentnode.EdgeDeployment:
		m.ClearDeployment()
		return nil
	case deploymentnode.EdgeResource:
		m.ClearResource()
		return nil
	}
	return fmt.Errorf("unknown DeploymentNode unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *DeploymentNodeMutation) ResetEdge(name string) error {
	switch name {
	case deploymentnode.EdgeDeployment:
		m.ResetDeployment()
		return nil
	case deploymentnode.EdgeResource:
		m.ResetResource()
		return nil
	case deploymentnode.EdgePrevNodes:
		m.ResetPrevNodes()
		return nil
	case deploymentnode.EdgeNextNodes:
		m.ResetNextNodes()
		return nil
	}
	return fmt.Errorf("unknown DeploymentNode edge %s", name)
}

// GrantedPermissionMutation represents an operation that mutates the GrantedPermission nodes in the graph.
type GrantedPermissionMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	created_at    *time.Time
	updated_at    *time.Time
	subject_type  *grantedpermission.SubjectType
	subject_id    *uuid.UUID
	object_type   *grantedpermission.ObjectType
	object_id     *uuid.UUID
	action        *actions.PermissionAction
	clearedFields map[string]struct{}
	user          *uuid.UUID
	cleareduser   bool
	group         *uuid.UUID
	clearedgroup  bool
	done          bool
	oldValue      func(context.Context) (*GrantedPermission, error)
	predicates    []predicate.GrantedPermission
}

var _ ent.Mutation = (*GrantedPermissionMutation)(nil)

// grantedpermissionOption allows management of the mutation configuration using functional options.
type grantedpermissionOption func(*GrantedPermissionMutation)

// newGrantedPermissionMutation creates new mutation for the GrantedPermission entity.
func newGrantedPermissionMutation(c config, op Op, opts ...grantedpermissionOption) *GrantedPermissionMutation {
	m := &GrantedPermissionMutation{
		config:        c,
		op:            op,
		typ:           TypeGrantedPermission,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withGrantedPermissionID sets the ID field of the mutation.
func withGrantedPermissionID(id uuid.UUID) grantedpermissionOption {
	return func(m *GrantedPermissionMutation) {
		var (
			err   error
			once  sync.Once
			value *GrantedPermission
		)
		m.oldValue = func(ctx context.Context) (*GrantedPermission, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().GrantedPermission.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withGrantedPermission sets the old GrantedPermission of the mutation.
func withGrantedPermission(node *GrantedPermission) grantedpermissionOption {
	return func(m *GrantedPermissionMutation) {
		m.oldValue = func(context.Context) (*GrantedPermission, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m GrantedPermissionMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m GrantedPermissionMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of GrantedPermission entities.
func (m *GrantedPermissionMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *GrantedPermissionMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *GrantedPermissionMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().GrantedPermission.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *GrantedPermissionMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *GrantedPermissionMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the GrantedPermission entity.
// If the GrantedPermission object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GrantedPermissionMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *GrantedPermissionMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *GrantedPermissionMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *GrantedPermissionMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the GrantedPermission entity.
// If the GrantedPermission object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GrantedPermissionMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *GrantedPermissionMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetSubjectType sets the "subject_type" field.
func (m *GrantedPermissionMutation) SetSubjectType(gt grantedpermission.SubjectType) {
	m.subject_type = &gt
}

// SubjectType returns the value of the "subject_type" field in the mutation.
func (m *GrantedPermissionMutation) SubjectType() (r grantedpermission.SubjectType, exists bool) {
	v := m.subject_type
	if v == nil {
		return
	}
	return *v, true
}

// OldSubjectType returns the old "subject_type" field's value of the GrantedPermission entity.
// If the GrantedPermission object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GrantedPermissionMutation) OldSubjectType(ctx context.Context) (v grantedpermission.SubjectType, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSubjectType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSubjectType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSubjectType: %w", err)
	}
	return oldValue.SubjectType, nil
}

// ResetSubjectType resets all changes to the "subject_type" field.
func (m *GrantedPermissionMutation) ResetSubjectType() {
	m.subject_type = nil
}

// SetSubjectID sets the "subject_id" field.
func (m *GrantedPermissionMutation) SetSubjectID(u uuid.UUID) {
	m.subject_id = &u
}

// SubjectID returns the value of the "subject_id" field in the mutation.
func (m *GrantedPermissionMutation) SubjectID() (r uuid.UUID, exists bool) {
	v := m.subject_id
	if v == nil {
		return
	}
	return *v, true
}

// OldSubjectID returns the old "subject_id" field's value of the GrantedPermission entity.
// If the GrantedPermission object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GrantedPermissionMutation) OldSubjectID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSubjectID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSubjectID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSubjectID: %w", err)
	}
	return oldValue.SubjectID, nil
}

// ResetSubjectID resets all changes to the "subject_id" field.
func (m *GrantedPermissionMutation) ResetSubjectID() {
	m.subject_id = nil
}

// SetObjectType sets the "object_type" field.
func (m *GrantedPermissionMutation) SetObjectType(gt grantedpermission.ObjectType) {
	m.object_type = &gt
}

// ObjectType returns the value of the "object_type" field in the mutation.
func (m *GrantedPermissionMutation) ObjectType() (r grantedpermission.ObjectType, exists bool) {
	v := m.object_type
	if v == nil {
		return
	}
	return *v, true
}

// OldObjectType returns the old "object_type" field's value of the GrantedPermission entity.
// If the GrantedPermission object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GrantedPermissionMutation) OldObjectType(ctx context.Context) (v grantedpermission.ObjectType, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldObjectType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldObjectType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldObjectType: %w", err)
	}
	return oldValue.ObjectType, nil
}

// ResetObjectType resets all changes to the "object_type" field.
func (m *GrantedPermissionMutation) ResetObjectType() {
	m.object_type = nil
}

// SetObjectID sets the "object_id" field.
func (m *GrantedPermissionMutation) SetObjectID(u uuid.UUID) {
	m.object_id = &u
}

// ObjectID returns the value of the "object_id" field in the mutation.
func (m *GrantedPermissionMutation) ObjectID() (r uuid.UUID, exists bool) {
	v := m.object_id
	if v == nil {
		return
	}
	return *v, true
}

// OldObjectID returns the old "object_id" field's value of the GrantedPermission entity.
// If the GrantedPermission object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GrantedPermissionMutation) OldObjectID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldObjectID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldObjectID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldObjectID: %w", err)
	}
	return oldValue.ObjectID, nil
}

// ResetObjectID resets all changes to the "object_id" field.
func (m *GrantedPermissionMutation) ResetObjectID() {
	m.object_id = nil
}

// SetAction sets the "action" field.
func (m *GrantedPermissionMutation) SetAction(aa actions.PermissionAction) {
	m.action = &aa
}

// Action returns the value of the "action" field in the mutation.
func (m *GrantedPermissionMutation) Action() (r actions.PermissionAction, exists bool) {
	v := m.action
	if v == nil {
		return
	}
	return *v, true
}

// OldAction returns the old "action" field's value of the GrantedPermission entity.
// If the GrantedPermission object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GrantedPermissionMutation) OldAction(ctx context.Context) (v actions.PermissionAction, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAction is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAction requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAction: %w", err)
	}
	return oldValue.Action, nil
}

// ResetAction resets all changes to the "action" field.
func (m *GrantedPermissionMutation) ResetAction() {
	m.action = nil
}

// SetUserID sets the "user" edge to the User entity by id.
func (m *GrantedPermissionMutation) SetUserID(id uuid.UUID) {
	m.user = &id
}

// ClearUser clears the "user" edge to the User entity.
func (m *GrantedPermissionMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *GrantedPermissionMutation) UserCleared() bool {
	return m.cleareduser
}

// UserID returns the "user" edge ID in the mutation.
func (m *GrantedPermissionMutation) UserID() (id uuid.UUID, exists bool) {
	if m.user != nil {
		return *m.user, true
	}
	return
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *GrantedPermissionMutation) UserIDs() (ids []uuid.UUID) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *GrantedPermissionMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// SetGroupID sets the "group" edge to the Group entity by id.
func (m *GrantedPermissionMutation) SetGroupID(id uuid.UUID) {
	m.group = &id
}

// ClearGroup clears the "group" edge to the Group entity.
func (m *GrantedPermissionMutation) ClearGroup() {
	m.clearedgroup = true
}

// GroupCleared reports if the "group" edge to the Group entity was cleared.
func (m *GrantedPermissionMutation) GroupCleared() bool {
	return m.clearedgroup
}

// GroupID returns the "group" edge ID in the mutation.
func (m *GrantedPermissionMutation) GroupID() (id uuid.UUID, exists bool) {
	if m.group != nil {
		return *m.group, true
	}
	return
}

// GroupIDs returns the "group" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// GroupID instead. It exists only for internal usage by the builders.
func (m *GrantedPermissionMutation) GroupIDs() (ids []uuid.UUID) {
	if id := m.group; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetGroup resets all changes to the "group" edge.
func (m *GrantedPermissionMutation) ResetGroup() {
	m.group = nil
	m.clearedgroup = false
}

// Where appends a list predicates to the GrantedPermissionMutation builder.
func (m *GrantedPermissionMutation) Where(ps ...predicate.GrantedPermission) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the GrantedPermissionMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *GrantedPermissionMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.GrantedPermission, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *GrantedPermissionMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *GrantedPermissionMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (GrantedPermission).
func (m *GrantedPermissionMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *GrantedPermissionMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.created_at != nil {
		fields = append(fields, grantedpermission.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, grantedpermission.FieldUpdatedAt)
	}
	if m.subject_type != nil {
		fields = append(fields, grantedpermission.FieldSubjectType)
	}
	if m.subject_id != nil {
		fields = append(fields, grantedpermission.FieldSubjectID)
	}
	if m.object_type != nil {
		fields = append(fields, grantedpermission.FieldObjectType)
	}
	if m.object_id != nil {
		fields = append(fields, grantedpermission.FieldObjectID)
	}
	if m.action != nil {
		fields = append(fields, grantedpermission.FieldAction)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *GrantedPermissionMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case grantedpermission.FieldCreatedAt:
		return m.CreatedAt()
	case grantedpermission.FieldUpdatedAt:
		return m.UpdatedAt()
	case grantedpermission.FieldSubjectType:
		return m.SubjectType()
	case grantedpermission.FieldSubjectID:
		return m.SubjectID()
	case grantedpermission.FieldObjectType:
		return m.ObjectType()
	case grantedpermission.FieldObjectID:
		return m.ObjectID()
	case grantedpermission.FieldAction:
		return m.Action()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *GrantedPermissionMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case grantedpermission.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case grantedpermission.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case grantedpermission.FieldSubjectType:
		return m.OldSubjectType(ctx)
	case grantedpermission.FieldSubjectID:
		return m.OldSubjectID(ctx)
	case grantedpermission.FieldObjectType:
		return m.OldObjectType(ctx)
	case grantedpermission.FieldObjectID:
		return m.OldObjectID(ctx)
	case grantedpermission.FieldAction:
		return m.OldAction(ctx)
	}
	return nil, fmt.Errorf("unknown GrantedPermission field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GrantedPermissionMutation) SetField(name string, value ent.Value) error {
	switch name {
	case grantedpermission.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case grantedpermission.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case grantedpermission.FieldSubjectType:
		v, ok := value.(grantedpermission.SubjectType)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSubjectType(v)
		return nil
	case grantedpermission.FieldSubjectID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSubjectID(v)
		return nil
	case grantedpermission.FieldObjectType:
		v, ok := value.(grantedpermission.ObjectType)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetObjectType(v)
		return nil
	case grantedpermission.FieldObjectID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetObjectID(v)
		return nil
	case grantedpermission.FieldAction:
		v, ok := value.(actions.PermissionAction)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAction(v)
		return nil
	}
	return fmt.Errorf("unknown GrantedPermission field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *GrantedPermissionMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *GrantedPermissionMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GrantedPermissionMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown GrantedPermission numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *GrantedPermissionMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *GrantedPermissionMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *GrantedPermissionMutation) ClearField(name string) error {
	return fmt.Errorf("unknown GrantedPermission nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *GrantedPermissionMutation) ResetField(name string) error {
	switch name {
	case grantedpermission.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case grantedpermission.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case grantedpermission.FieldSubjectType:
		m.ResetSubjectType()
		return nil
	case grantedpermission.FieldSubjectID:
		m.ResetSubjectID()
		return nil
	case grantedpermission.FieldObjectType:
		m.ResetObjectType()
		return nil
	case grantedpermission.FieldObjectID:
		m.ResetObjectID()
		return nil
	case grantedpermission.FieldAction:
		m.ResetAction()
		return nil
	}
	return fmt.Errorf("unknown GrantedPermission field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *GrantedPermissionMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.user != nil {
		edges = append(edges, grantedpermission.EdgeUser)
	}
	if m.group != nil {
		edges = append(edges, grantedpermission.EdgeGroup)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *GrantedPermissionMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case grantedpermission.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	case grantedpermission.EdgeGroup:
		if id := m.group; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *GrantedPermissionMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *GrantedPermissionMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *GrantedPermissionMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.cleareduser {
		edges = append(edges, grantedpermission.EdgeUser)
	}
	if m.clearedgroup {
		edges = append(edges, grantedpermission.EdgeGroup)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *GrantedPermissionMutation) EdgeCleared(name string) bool {
	switch name {
	case grantedpermission.EdgeUser:
		return m.cleareduser
	case grantedpermission.EdgeGroup:
		return m.clearedgroup
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *GrantedPermissionMutation) ClearEdge(name string) error {
	switch name {
	case grantedpermission.EdgeUser:
		m.ClearUser()
		return nil
	case grantedpermission.EdgeGroup:
		m.ClearGroup()
		return nil
	}
	return fmt.Errorf("unknown GrantedPermission unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *GrantedPermissionMutation) ResetEdge(name string) error {
	switch name {
	case grantedpermission.EdgeUser:
		m.ResetUser()
		return nil
	case grantedpermission.EdgeGroup:
		m.ResetGroup()
		return nil
	}
	return fmt.Errorf("unknown GrantedPermission edge %s", name)
}

// GroupMutation represents an operation that mutates the Group nodes in the graph.
type GroupMutation struct {
	config
	op              Op
	typ             string
	id              *uuid.UUID
	created_at      *time.Time
	updated_at      *time.Time
	name            *string
	clearedFields   map[string]struct{}
	parent          *uuid.UUID
	clearedparent   bool
	children        map[uuid.UUID]struct{}
	removedchildren map[uuid.UUID]struct{}
	clearedchildren bool
	users           map[uuid.UUID]struct{}
	removedusers    map[uuid.UUID]struct{}
	clearedusers    bool
	done            bool
	oldValue        func(context.Context) (*Group, error)
	predicates      []predicate.Group
}

var _ ent.Mutation = (*GroupMutation)(nil)

// groupOption allows management of the mutation configuration using functional options.
type groupOption func(*GroupMutation)

// newGroupMutation creates new mutation for the Group entity.
func newGroupMutation(c config, op Op, opts ...groupOption) *GroupMutation {
	m := &GroupMutation{
		config:        c,
		op:            op,
		typ:           TypeGroup,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withGroupID sets the ID field of the mutation.
func withGroupID(id uuid.UUID) groupOption {
	return func(m *GroupMutation) {
		var (
			err   error
			once  sync.Once
			value *Group
		)
		m.oldValue = func(ctx context.Context) (*Group, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Group.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withGroup sets the old Group of the mutation.
func withGroup(node *Group) groupOption {
	return func(m *GroupMutation) {
		m.oldValue = func(context.Context) (*Group, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m GroupMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m GroupMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Group entities.
func (m *GroupMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *GroupMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *GroupMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Group.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *GroupMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *GroupMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Group entity.
// If the Group object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GroupMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *GroupMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *GroupMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *GroupMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Group entity.
// If the Group object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GroupMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *GroupMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetName sets the "name" field.
func (m *GroupMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *GroupMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Group entity.
// If the Group object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GroupMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *GroupMutation) ResetName() {
	m.name = nil
}

// SetParentID sets the "parent" edge to the Group entity by id.
func (m *GroupMutation) SetParentID(id uuid.UUID) {
	m.parent = &id
}

// ClearParent clears the "parent" edge to the Group entity.
func (m *GroupMutation) ClearParent() {
	m.clearedparent = true
}

// ParentCleared reports if the "parent" edge to the Group entity was cleared.
func (m *GroupMutation) ParentCleared() bool {
	return m.clearedparent
}

// ParentID returns the "parent" edge ID in the mutation.
func (m *GroupMutation) ParentID() (id uuid.UUID, exists bool) {
	if m.parent != nil {
		return *m.parent, true
	}
	return
}

// ParentIDs returns the "parent" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ParentID instead. It exists only for internal usage by the builders.
func (m *GroupMutation) ParentIDs() (ids []uuid.UUID) {
	if id := m.parent; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetParent resets all changes to the "parent" edge.
func (m *GroupMutation) ResetParent() {
	m.parent = nil
	m.clearedparent = false
}

// AddChildIDs adds the "children" edge to the Group entity by ids.
func (m *GroupMutation) AddChildIDs(ids ...uuid.UUID) {
	if m.children == nil {
		m.children = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.children[ids[i]] = struct{}{}
	}
}

// ClearChildren clears the "children" edge to the Group entity.
func (m *GroupMutation) ClearChildren() {
	m.clearedchildren = true
}

// ChildrenCleared reports if the "children" edge to the Group entity was cleared.
func (m *GroupMutation) ChildrenCleared() bool {
	return m.clearedchildren
}

// RemoveChildIDs removes the "children" edge to the Group entity by IDs.
func (m *GroupMutation) RemoveChildIDs(ids ...uuid.UUID) {
	if m.removedchildren == nil {
		m.removedchildren = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.children, ids[i])
		m.removedchildren[ids[i]] = struct{}{}
	}
}

// RemovedChildren returns the removed IDs of the "children" edge to the Group entity.
func (m *GroupMutation) RemovedChildrenIDs() (ids []uuid.UUID) {
	for id := range m.removedchildren {
		ids = append(ids, id)
	}
	return
}

// ChildrenIDs returns the "children" edge IDs in the mutation.
func (m *GroupMutation) ChildrenIDs() (ids []uuid.UUID) {
	for id := range m.children {
		ids = append(ids, id)
	}
	return
}

// ResetChildren resets all changes to the "children" edge.
func (m *GroupMutation) ResetChildren() {
	m.children = nil
	m.clearedchildren = false
	m.removedchildren = nil
}

// AddUserIDs adds the "users" edge to the User entity by ids.
func (m *GroupMutation) AddUserIDs(ids ...uuid.UUID) {
	if m.users == nil {
		m.users = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.users[ids[i]] = struct{}{}
	}
}

// ClearUsers clears the "users" edge to the User entity.
func (m *GroupMutation) ClearUsers() {
	m.clearedusers = true
}

// UsersCleared reports if the "users" edge to the User entity was cleared.
func (m *GroupMutation) UsersCleared() bool {
	return m.clearedusers
}

// RemoveUserIDs removes the "users" edge to the User entity by IDs.
func (m *GroupMutation) RemoveUserIDs(ids ...uuid.UUID) {
	if m.removedusers == nil {
		m.removedusers = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.users, ids[i])
		m.removedusers[ids[i]] = struct{}{}
	}
}

// RemovedUsers returns the removed IDs of the "users" edge to the User entity.
func (m *GroupMutation) RemovedUsersIDs() (ids []uuid.UUID) {
	for id := range m.removedusers {
		ids = append(ids, id)
	}
	return
}

// UsersIDs returns the "users" edge IDs in the mutation.
func (m *GroupMutation) UsersIDs() (ids []uuid.UUID) {
	for id := range m.users {
		ids = append(ids, id)
	}
	return
}

// ResetUsers resets all changes to the "users" edge.
func (m *GroupMutation) ResetUsers() {
	m.users = nil
	m.clearedusers = false
	m.removedusers = nil
}

// Where appends a list predicates to the GroupMutation builder.
func (m *GroupMutation) Where(ps ...predicate.Group) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the GroupMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *GroupMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Group, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *GroupMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *GroupMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Group).
func (m *GroupMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *GroupMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.created_at != nil {
		fields = append(fields, group.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, group.FieldUpdatedAt)
	}
	if m.name != nil {
		fields = append(fields, group.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *GroupMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case group.FieldCreatedAt:
		return m.CreatedAt()
	case group.FieldUpdatedAt:
		return m.UpdatedAt()
	case group.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *GroupMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case group.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case group.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case group.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown Group field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GroupMutation) SetField(name string, value ent.Value) error {
	switch name {
	case group.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case group.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case group.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown Group field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *GroupMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *GroupMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GroupMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Group numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *GroupMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *GroupMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *GroupMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Group nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *GroupMutation) ResetField(name string) error {
	switch name {
	case group.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case group.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case group.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown Group field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *GroupMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.parent != nil {
		edges = append(edges, group.EdgeParent)
	}
	if m.children != nil {
		edges = append(edges, group.EdgeChildren)
	}
	if m.users != nil {
		edges = append(edges, group.EdgeUsers)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *GroupMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case group.EdgeParent:
		if id := m.parent; id != nil {
			return []ent.Value{*id}
		}
	case group.EdgeChildren:
		ids := make([]ent.Value, 0, len(m.children))
		for id := range m.children {
			ids = append(ids, id)
		}
		return ids
	case group.EdgeUsers:
		ids := make([]ent.Value, 0, len(m.users))
		for id := range m.users {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *GroupMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removedchildren != nil {
		edges = append(edges, group.EdgeChildren)
	}
	if m.removedusers != nil {
		edges = append(edges, group.EdgeUsers)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *GroupMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case group.EdgeChildren:
		ids := make([]ent.Value, 0, len(m.removedchildren))
		for id := range m.removedchildren {
			ids = append(ids, id)
		}
		return ids
	case group.EdgeUsers:
		ids := make([]ent.Value, 0, len(m.removedusers))
		for id := range m.removedusers {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *GroupMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedparent {
		edges = append(edges, group.EdgeParent)
	}
	if m.clearedchildren {
		edges = append(edges, group.EdgeChildren)
	}
	if m.clearedusers {
		edges = append(edges, group.EdgeUsers)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *GroupMutation) EdgeCleared(name string) bool {
	switch name {
	case group.EdgeParent:
		return m.clearedparent
	case group.EdgeChildren:
		return m.clearedchildren
	case group.EdgeUsers:
		return m.clearedusers
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *GroupMutation) ClearEdge(name string) error {
	switch name {
	case group.EdgeParent:
		m.ClearParent()
		return nil
	}
	return fmt.Errorf("unknown Group unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *GroupMutation) ResetEdge(name string) error {
	switch name {
	case group.EdgeParent:
		m.ResetParent()
		return nil
	case group.EdgeChildren:
		m.ResetChildren()
		return nil
	case group.EdgeUsers:
		m.ResetUsers()
		return nil
	}
	return fmt.Errorf("unknown Group edge %s", name)
}

// ProviderMutation represents an operation that mutates the Provider nodes in the graph.
type ProviderMutation struct {
	config
	op                Op
	typ               string
	id                *uuid.UUID
	created_at        *time.Time
	updated_at        *time.Time
	display_name      *string
	provider_git_url  *string
	provider_version  *string
	config_bytes      *[]byte
	is_loaded         *bool
	clearedFields     map[string]struct{}
	blueprints        map[uuid.UUID]struct{}
	removedblueprints map[uuid.UUID]struct{}
	clearedblueprints bool
	done              bool
	oldValue          func(context.Context) (*Provider, error)
	predicates        []predicate.Provider
}

var _ ent.Mutation = (*ProviderMutation)(nil)

// providerOption allows management of the mutation configuration using functional options.
type providerOption func(*ProviderMutation)

// newProviderMutation creates new mutation for the Provider entity.
func newProviderMutation(c config, op Op, opts ...providerOption) *ProviderMutation {
	m := &ProviderMutation{
		config:        c,
		op:            op,
		typ:           TypeProvider,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withProviderID sets the ID field of the mutation.
func withProviderID(id uuid.UUID) providerOption {
	return func(m *ProviderMutation) {
		var (
			err   error
			once  sync.Once
			value *Provider
		)
		m.oldValue = func(ctx context.Context) (*Provider, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Provider.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withProvider sets the old Provider of the mutation.
func withProvider(node *Provider) providerOption {
	return func(m *ProviderMutation) {
		m.oldValue = func(context.Context) (*Provider, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ProviderMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ProviderMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Provider entities.
func (m *ProviderMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ProviderMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ProviderMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Provider.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *ProviderMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *ProviderMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Provider entity.
// If the Provider object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProviderMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *ProviderMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *ProviderMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *ProviderMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Provider entity.
// If the Provider object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProviderMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *ProviderMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetDisplayName sets the "display_name" field.
func (m *ProviderMutation) SetDisplayName(s string) {
	m.display_name = &s
}

// DisplayName returns the value of the "display_name" field in the mutation.
func (m *ProviderMutation) DisplayName() (r string, exists bool) {
	v := m.display_name
	if v == nil {
		return
	}
	return *v, true
}

// OldDisplayName returns the old "display_name" field's value of the Provider entity.
// If the Provider object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProviderMutation) OldDisplayName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDisplayName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDisplayName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDisplayName: %w", err)
	}
	return oldValue.DisplayName, nil
}

// ResetDisplayName resets all changes to the "display_name" field.
func (m *ProviderMutation) ResetDisplayName() {
	m.display_name = nil
}

// SetProviderGitURL sets the "provider_git_url" field.
func (m *ProviderMutation) SetProviderGitURL(s string) {
	m.provider_git_url = &s
}

// ProviderGitURL returns the value of the "provider_git_url" field in the mutation.
func (m *ProviderMutation) ProviderGitURL() (r string, exists bool) {
	v := m.provider_git_url
	if v == nil {
		return
	}
	return *v, true
}

// OldProviderGitURL returns the old "provider_git_url" field's value of the Provider entity.
// If the Provider object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProviderMutation) OldProviderGitURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProviderGitURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProviderGitURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProviderGitURL: %w", err)
	}
	return oldValue.ProviderGitURL, nil
}

// ResetProviderGitURL resets all changes to the "provider_git_url" field.
func (m *ProviderMutation) ResetProviderGitURL() {
	m.provider_git_url = nil
}

// SetProviderVersion sets the "provider_version" field.
func (m *ProviderMutation) SetProviderVersion(s string) {
	m.provider_version = &s
}

// ProviderVersion returns the value of the "provider_version" field in the mutation.
func (m *ProviderMutation) ProviderVersion() (r string, exists bool) {
	v := m.provider_version
	if v == nil {
		return
	}
	return *v, true
}

// OldProviderVersion returns the old "provider_version" field's value of the Provider entity.
// If the Provider object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProviderMutation) OldProviderVersion(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProviderVersion is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProviderVersion requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProviderVersion: %w", err)
	}
	return oldValue.ProviderVersion, nil
}

// ResetProviderVersion resets all changes to the "provider_version" field.
func (m *ProviderMutation) ResetProviderVersion() {
	m.provider_version = nil
}

// SetConfigBytes sets the "config_bytes" field.
func (m *ProviderMutation) SetConfigBytes(b []byte) {
	m.config_bytes = &b
}

// ConfigBytes returns the value of the "config_bytes" field in the mutation.
func (m *ProviderMutation) ConfigBytes() (r []byte, exists bool) {
	v := m.config_bytes
	if v == nil {
		return
	}
	return *v, true
}

// OldConfigBytes returns the old "config_bytes" field's value of the Provider entity.
// If the Provider object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProviderMutation) OldConfigBytes(ctx context.Context) (v []byte, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldConfigBytes is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldConfigBytes requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldConfigBytes: %w", err)
	}
	return oldValue.ConfigBytes, nil
}

// ResetConfigBytes resets all changes to the "config_bytes" field.
func (m *ProviderMutation) ResetConfigBytes() {
	m.config_bytes = nil
}

// SetIsLoaded sets the "is_loaded" field.
func (m *ProviderMutation) SetIsLoaded(b bool) {
	m.is_loaded = &b
}

// IsLoaded returns the value of the "is_loaded" field in the mutation.
func (m *ProviderMutation) IsLoaded() (r bool, exists bool) {
	v := m.is_loaded
	if v == nil {
		return
	}
	return *v, true
}

// OldIsLoaded returns the old "is_loaded" field's value of the Provider entity.
// If the Provider object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProviderMutation) OldIsLoaded(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsLoaded is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsLoaded requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsLoaded: %w", err)
	}
	return oldValue.IsLoaded, nil
}

// ResetIsLoaded resets all changes to the "is_loaded" field.
func (m *ProviderMutation) ResetIsLoaded() {
	m.is_loaded = nil
}

// AddBlueprintIDs adds the "blueprints" edge to the Blueprint entity by ids.
func (m *ProviderMutation) AddBlueprintIDs(ids ...uuid.UUID) {
	if m.blueprints == nil {
		m.blueprints = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.blueprints[ids[i]] = struct{}{}
	}
}

// ClearBlueprints clears the "blueprints" edge to the Blueprint entity.
func (m *ProviderMutation) ClearBlueprints() {
	m.clearedblueprints = true
}

// BlueprintsCleared reports if the "blueprints" edge to the Blueprint entity was cleared.
func (m *ProviderMutation) BlueprintsCleared() bool {
	return m.clearedblueprints
}

// RemoveBlueprintIDs removes the "blueprints" edge to the Blueprint entity by IDs.
func (m *ProviderMutation) RemoveBlueprintIDs(ids ...uuid.UUID) {
	if m.removedblueprints == nil {
		m.removedblueprints = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.blueprints, ids[i])
		m.removedblueprints[ids[i]] = struct{}{}
	}
}

// RemovedBlueprints returns the removed IDs of the "blueprints" edge to the Blueprint entity.
func (m *ProviderMutation) RemovedBlueprintsIDs() (ids []uuid.UUID) {
	for id := range m.removedblueprints {
		ids = append(ids, id)
	}
	return
}

// BlueprintsIDs returns the "blueprints" edge IDs in the mutation.
func (m *ProviderMutation) BlueprintsIDs() (ids []uuid.UUID) {
	for id := range m.blueprints {
		ids = append(ids, id)
	}
	return
}

// ResetBlueprints resets all changes to the "blueprints" edge.
func (m *ProviderMutation) ResetBlueprints() {
	m.blueprints = nil
	m.clearedblueprints = false
	m.removedblueprints = nil
}

// Where appends a list predicates to the ProviderMutation builder.
func (m *ProviderMutation) Where(ps ...predicate.Provider) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ProviderMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ProviderMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Provider, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ProviderMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ProviderMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Provider).
func (m *ProviderMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ProviderMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.created_at != nil {
		fields = append(fields, provider.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, provider.FieldUpdatedAt)
	}
	if m.display_name != nil {
		fields = append(fields, provider.FieldDisplayName)
	}
	if m.provider_git_url != nil {
		fields = append(fields, provider.FieldProviderGitURL)
	}
	if m.provider_version != nil {
		fields = append(fields, provider.FieldProviderVersion)
	}
	if m.config_bytes != nil {
		fields = append(fields, provider.FieldConfigBytes)
	}
	if m.is_loaded != nil {
		fields = append(fields, provider.FieldIsLoaded)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ProviderMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case provider.FieldCreatedAt:
		return m.CreatedAt()
	case provider.FieldUpdatedAt:
		return m.UpdatedAt()
	case provider.FieldDisplayName:
		return m.DisplayName()
	case provider.FieldProviderGitURL:
		return m.ProviderGitURL()
	case provider.FieldProviderVersion:
		return m.ProviderVersion()
	case provider.FieldConfigBytes:
		return m.ConfigBytes()
	case provider.FieldIsLoaded:
		return m.IsLoaded()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ProviderMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case provider.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case provider.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case provider.FieldDisplayName:
		return m.OldDisplayName(ctx)
	case provider.FieldProviderGitURL:
		return m.OldProviderGitURL(ctx)
	case provider.FieldProviderVersion:
		return m.OldProviderVersion(ctx)
	case provider.FieldConfigBytes:
		return m.OldConfigBytes(ctx)
	case provider.FieldIsLoaded:
		return m.OldIsLoaded(ctx)
	}
	return nil, fmt.Errorf("unknown Provider field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProviderMutation) SetField(name string, value ent.Value) error {
	switch name {
	case provider.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case provider.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case provider.FieldDisplayName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDisplayName(v)
		return nil
	case provider.FieldProviderGitURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProviderGitURL(v)
		return nil
	case provider.FieldProviderVersion:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProviderVersion(v)
		return nil
	case provider.FieldConfigBytes:
		v, ok := value.([]byte)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetConfigBytes(v)
		return nil
	case provider.FieldIsLoaded:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsLoaded(v)
		return nil
	}
	return fmt.Errorf("unknown Provider field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ProviderMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ProviderMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProviderMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Provider numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ProviderMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ProviderMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ProviderMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Provider nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ProviderMutation) ResetField(name string) error {
	switch name {
	case provider.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case provider.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case provider.FieldDisplayName:
		m.ResetDisplayName()
		return nil
	case provider.FieldProviderGitURL:
		m.ResetProviderGitURL()
		return nil
	case provider.FieldProviderVersion:
		m.ResetProviderVersion()
		return nil
	case provider.FieldConfigBytes:
		m.ResetConfigBytes()
		return nil
	case provider.FieldIsLoaded:
		m.ResetIsLoaded()
		return nil
	}
	return fmt.Errorf("unknown Provider field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ProviderMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.blueprints != nil {
		edges = append(edges, provider.EdgeBlueprints)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ProviderMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case provider.EdgeBlueprints:
		ids := make([]ent.Value, 0, len(m.blueprints))
		for id := range m.blueprints {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ProviderMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedblueprints != nil {
		edges = append(edges, provider.EdgeBlueprints)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ProviderMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case provider.EdgeBlueprints:
		ids := make([]ent.Value, 0, len(m.removedblueprints))
		for id := range m.removedblueprints {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ProviderMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedblueprints {
		edges = append(edges, provider.EdgeBlueprints)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ProviderMutation) EdgeCleared(name string) bool {
	switch name {
	case provider.EdgeBlueprints:
		return m.clearedblueprints
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ProviderMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Provider unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ProviderMutation) ResetEdge(name string) error {
	switch name {
	case provider.EdgeBlueprints:
		m.ResetBlueprints()
		return nil
	}
	return fmt.Errorf("unknown Provider edge %s", name)
}

// ResourceMutation represents an operation that mutates the Resource nodes in the graph.
type ResourceMutation struct {
	config
	op                 Op
	typ                string
	id                 *uuid.UUID
	created_at         *time.Time
	updated_at         *time.Time
	_type              *resource.Type
	key                *string
	resource_type      *string
	object             **models.Object
	clearedFields      map[string]struct{}
	blueprint          *uuid.UUID
	clearedblueprint   bool
	depends_on         map[uuid.UUID]struct{}
	removeddepends_on  map[uuid.UUID]struct{}
	cleareddepends_on  bool
	required_by        map[uuid.UUID]struct{}
	removedrequired_by map[uuid.UUID]struct{}
	clearedrequired_by bool
	done               bool
	oldValue           func(context.Context) (*Resource, error)
	predicates         []predicate.Resource
}

var _ ent.Mutation = (*ResourceMutation)(nil)

// resourceOption allows management of the mutation configuration using functional options.
type resourceOption func(*ResourceMutation)

// newResourceMutation creates new mutation for the Resource entity.
func newResourceMutation(c config, op Op, opts ...resourceOption) *ResourceMutation {
	m := &ResourceMutation{
		config:        c,
		op:            op,
		typ:           TypeResource,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withResourceID sets the ID field of the mutation.
func withResourceID(id uuid.UUID) resourceOption {
	return func(m *ResourceMutation) {
		var (
			err   error
			once  sync.Once
			value *Resource
		)
		m.oldValue = func(ctx context.Context) (*Resource, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Resource.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withResource sets the old Resource of the mutation.
func withResource(node *Resource) resourceOption {
	return func(m *ResourceMutation) {
		m.oldValue = func(context.Context) (*Resource, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ResourceMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ResourceMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Resource entities.
func (m *ResourceMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ResourceMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ResourceMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Resource.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *ResourceMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *ResourceMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Resource entity.
// If the Resource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ResourceMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *ResourceMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *ResourceMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *ResourceMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Resource entity.
// If the Resource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ResourceMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *ResourceMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetType sets the "type" field.
func (m *ResourceMutation) SetType(r resource.Type) {
	m._type = &r
}

// GetType returns the value of the "type" field in the mutation.
func (m *ResourceMutation) GetType() (r resource.Type, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the Resource entity.
// If the Resource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ResourceMutation) OldType(ctx context.Context) (v resource.Type, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ResetType resets all changes to the "type" field.
func (m *ResourceMutation) ResetType() {
	m._type = nil
}

// SetKey sets the "key" field.
func (m *ResourceMutation) SetKey(s string) {
	m.key = &s
}

// Key returns the value of the "key" field in the mutation.
func (m *ResourceMutation) Key() (r string, exists bool) {
	v := m.key
	if v == nil {
		return
	}
	return *v, true
}

// OldKey returns the old "key" field's value of the Resource entity.
// If the Resource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ResourceMutation) OldKey(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldKey is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldKey requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldKey: %w", err)
	}
	return oldValue.Key, nil
}

// ResetKey resets all changes to the "key" field.
func (m *ResourceMutation) ResetKey() {
	m.key = nil
}

// SetResourceType sets the "resource_type" field.
func (m *ResourceMutation) SetResourceType(s string) {
	m.resource_type = &s
}

// ResourceType returns the value of the "resource_type" field in the mutation.
func (m *ResourceMutation) ResourceType() (r string, exists bool) {
	v := m.resource_type
	if v == nil {
		return
	}
	return *v, true
}

// OldResourceType returns the old "resource_type" field's value of the Resource entity.
// If the Resource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ResourceMutation) OldResourceType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldResourceType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldResourceType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldResourceType: %w", err)
	}
	return oldValue.ResourceType, nil
}

// ResetResourceType resets all changes to the "resource_type" field.
func (m *ResourceMutation) ResetResourceType() {
	m.resource_type = nil
}

// SetObject sets the "object" field.
func (m *ResourceMutation) SetObject(value *models.Object) {
	m.object = &value
}

// Object returns the value of the "object" field in the mutation.
func (m *ResourceMutation) Object() (r *models.Object, exists bool) {
	v := m.object
	if v == nil {
		return
	}
	return *v, true
}

// OldObject returns the old "object" field's value of the Resource entity.
// If the Resource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ResourceMutation) OldObject(ctx context.Context) (v *models.Object, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldObject is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldObject requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldObject: %w", err)
	}
	return oldValue.Object, nil
}

// ResetObject resets all changes to the "object" field.
func (m *ResourceMutation) ResetObject() {
	m.object = nil
}

// SetBlueprintID sets the "blueprint" edge to the Blueprint entity by id.
func (m *ResourceMutation) SetBlueprintID(id uuid.UUID) {
	m.blueprint = &id
}

// ClearBlueprint clears the "blueprint" edge to the Blueprint entity.
func (m *ResourceMutation) ClearBlueprint() {
	m.clearedblueprint = true
}

// BlueprintCleared reports if the "blueprint" edge to the Blueprint entity was cleared.
func (m *ResourceMutation) BlueprintCleared() bool {
	return m.clearedblueprint
}

// BlueprintID returns the "blueprint" edge ID in the mutation.
func (m *ResourceMutation) BlueprintID() (id uuid.UUID, exists bool) {
	if m.blueprint != nil {
		return *m.blueprint, true
	}
	return
}

// BlueprintIDs returns the "blueprint" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// BlueprintID instead. It exists only for internal usage by the builders.
func (m *ResourceMutation) BlueprintIDs() (ids []uuid.UUID) {
	if id := m.blueprint; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetBlueprint resets all changes to the "blueprint" edge.
func (m *ResourceMutation) ResetBlueprint() {
	m.blueprint = nil
	m.clearedblueprint = false
}

// AddDependsOnIDs adds the "depends_on" edge to the Resource entity by ids.
func (m *ResourceMutation) AddDependsOnIDs(ids ...uuid.UUID) {
	if m.depends_on == nil {
		m.depends_on = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.depends_on[ids[i]] = struct{}{}
	}
}

// ClearDependsOn clears the "depends_on" edge to the Resource entity.
func (m *ResourceMutation) ClearDependsOn() {
	m.cleareddepends_on = true
}

// DependsOnCleared reports if the "depends_on" edge to the Resource entity was cleared.
func (m *ResourceMutation) DependsOnCleared() bool {
	return m.cleareddepends_on
}

// RemoveDependsOnIDs removes the "depends_on" edge to the Resource entity by IDs.
func (m *ResourceMutation) RemoveDependsOnIDs(ids ...uuid.UUID) {
	if m.removeddepends_on == nil {
		m.removeddepends_on = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.depends_on, ids[i])
		m.removeddepends_on[ids[i]] = struct{}{}
	}
}

// RemovedDependsOn returns the removed IDs of the "depends_on" edge to the Resource entity.
func (m *ResourceMutation) RemovedDependsOnIDs() (ids []uuid.UUID) {
	for id := range m.removeddepends_on {
		ids = append(ids, id)
	}
	return
}

// DependsOnIDs returns the "depends_on" edge IDs in the mutation.
func (m *ResourceMutation) DependsOnIDs() (ids []uuid.UUID) {
	for id := range m.depends_on {
		ids = append(ids, id)
	}
	return
}

// ResetDependsOn resets all changes to the "depends_on" edge.
func (m *ResourceMutation) ResetDependsOn() {
	m.depends_on = nil
	m.cleareddepends_on = false
	m.removeddepends_on = nil
}

// AddRequiredByIDs adds the "required_by" edge to the Resource entity by ids.
func (m *ResourceMutation) AddRequiredByIDs(ids ...uuid.UUID) {
	if m.required_by == nil {
		m.required_by = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.required_by[ids[i]] = struct{}{}
	}
}

// ClearRequiredBy clears the "required_by" edge to the Resource entity.
func (m *ResourceMutation) ClearRequiredBy() {
	m.clearedrequired_by = true
}

// RequiredByCleared reports if the "required_by" edge to the Resource entity was cleared.
func (m *ResourceMutation) RequiredByCleared() bool {
	return m.clearedrequired_by
}

// RemoveRequiredByIDs removes the "required_by" edge to the Resource entity by IDs.
func (m *ResourceMutation) RemoveRequiredByIDs(ids ...uuid.UUID) {
	if m.removedrequired_by == nil {
		m.removedrequired_by = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.required_by, ids[i])
		m.removedrequired_by[ids[i]] = struct{}{}
	}
}

// RemovedRequiredBy returns the removed IDs of the "required_by" edge to the Resource entity.
func (m *ResourceMutation) RemovedRequiredByIDs() (ids []uuid.UUID) {
	for id := range m.removedrequired_by {
		ids = append(ids, id)
	}
	return
}

// RequiredByIDs returns the "required_by" edge IDs in the mutation.
func (m *ResourceMutation) RequiredByIDs() (ids []uuid.UUID) {
	for id := range m.required_by {
		ids = append(ids, id)
	}
	return
}

// ResetRequiredBy resets all changes to the "required_by" edge.
func (m *ResourceMutation) ResetRequiredBy() {
	m.required_by = nil
	m.clearedrequired_by = false
	m.removedrequired_by = nil
}

// Where appends a list predicates to the ResourceMutation builder.
func (m *ResourceMutation) Where(ps ...predicate.Resource) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ResourceMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ResourceMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Resource, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ResourceMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ResourceMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Resource).
func (m *ResourceMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ResourceMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.created_at != nil {
		fields = append(fields, resource.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, resource.FieldUpdatedAt)
	}
	if m._type != nil {
		fields = append(fields, resource.FieldType)
	}
	if m.key != nil {
		fields = append(fields, resource.FieldKey)
	}
	if m.resource_type != nil {
		fields = append(fields, resource.FieldResourceType)
	}
	if m.object != nil {
		fields = append(fields, resource.FieldObject)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ResourceMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case resource.FieldCreatedAt:
		return m.CreatedAt()
	case resource.FieldUpdatedAt:
		return m.UpdatedAt()
	case resource.FieldType:
		return m.GetType()
	case resource.FieldKey:
		return m.Key()
	case resource.FieldResourceType:
		return m.ResourceType()
	case resource.FieldObject:
		return m.Object()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ResourceMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case resource.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case resource.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case resource.FieldType:
		return m.OldType(ctx)
	case resource.FieldKey:
		return m.OldKey(ctx)
	case resource.FieldResourceType:
		return m.OldResourceType(ctx)
	case resource.FieldObject:
		return m.OldObject(ctx)
	}
	return nil, fmt.Errorf("unknown Resource field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ResourceMutation) SetField(name string, value ent.Value) error {
	switch name {
	case resource.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case resource.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case resource.FieldType:
		v, ok := value.(resource.Type)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case resource.FieldKey:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetKey(v)
		return nil
	case resource.FieldResourceType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetResourceType(v)
		return nil
	case resource.FieldObject:
		v, ok := value.(*models.Object)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetObject(v)
		return nil
	}
	return fmt.Errorf("unknown Resource field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ResourceMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ResourceMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ResourceMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Resource numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ResourceMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ResourceMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ResourceMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Resource nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ResourceMutation) ResetField(name string) error {
	switch name {
	case resource.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case resource.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case resource.FieldType:
		m.ResetType()
		return nil
	case resource.FieldKey:
		m.ResetKey()
		return nil
	case resource.FieldResourceType:
		m.ResetResourceType()
		return nil
	case resource.FieldObject:
		m.ResetObject()
		return nil
	}
	return fmt.Errorf("unknown Resource field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ResourceMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.blueprint != nil {
		edges = append(edges, resource.EdgeBlueprint)
	}
	if m.depends_on != nil {
		edges = append(edges, resource.EdgeDependsOn)
	}
	if m.required_by != nil {
		edges = append(edges, resource.EdgeRequiredBy)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ResourceMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case resource.EdgeBlueprint:
		if id := m.blueprint; id != nil {
			return []ent.Value{*id}
		}
	case resource.EdgeDependsOn:
		ids := make([]ent.Value, 0, len(m.depends_on))
		for id := range m.depends_on {
			ids = append(ids, id)
		}
		return ids
	case resource.EdgeRequiredBy:
		ids := make([]ent.Value, 0, len(m.required_by))
		for id := range m.required_by {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ResourceMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removeddepends_on != nil {
		edges = append(edges, resource.EdgeDependsOn)
	}
	if m.removedrequired_by != nil {
		edges = append(edges, resource.EdgeRequiredBy)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ResourceMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case resource.EdgeDependsOn:
		ids := make([]ent.Value, 0, len(m.removeddepends_on))
		for id := range m.removeddepends_on {
			ids = append(ids, id)
		}
		return ids
	case resource.EdgeRequiredBy:
		ids := make([]ent.Value, 0, len(m.removedrequired_by))
		for id := range m.removedrequired_by {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ResourceMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedblueprint {
		edges = append(edges, resource.EdgeBlueprint)
	}
	if m.cleareddepends_on {
		edges = append(edges, resource.EdgeDependsOn)
	}
	if m.clearedrequired_by {
		edges = append(edges, resource.EdgeRequiredBy)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ResourceMutation) EdgeCleared(name string) bool {
	switch name {
	case resource.EdgeBlueprint:
		return m.clearedblueprint
	case resource.EdgeDependsOn:
		return m.cleareddepends_on
	case resource.EdgeRequiredBy:
		return m.clearedrequired_by
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ResourceMutation) ClearEdge(name string) error {
	switch name {
	case resource.EdgeBlueprint:
		m.ClearBlueprint()
		return nil
	}
	return fmt.Errorf("unknown Resource unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ResourceMutation) ResetEdge(name string) error {
	switch name {
	case resource.EdgeBlueprint:
		m.ResetBlueprint()
		return nil
	case resource.EdgeDependsOn:
		m.ResetDependsOn()
		return nil
	case resource.EdgeRequiredBy:
		m.ResetRequiredBy()
		return nil
	}
	return fmt.Errorf("unknown Resource edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op                 Op
	typ                string
	id                 *uuid.UUID
	created_at         *time.Time
	updated_at         *time.Time
	username           *string
	email              *string
	password           *string
	first_name         *string
	last_name          *string
	clearedFields      map[string]struct{}
	groups             map[uuid.UUID]struct{}
	removedgroups      map[uuid.UUID]struct{}
	clearedgroups      bool
	deployments        map[uuid.UUID]struct{}
	removeddeployments map[uuid.UUID]struct{}
	cleareddeployments bool
	done               bool
	oldValue           func(context.Context) (*User, error)
	predicates         []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id uuid.UUID) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of User entities.
func (m *UserMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *UserMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *UserMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *UserMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *UserMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *UserMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *UserMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetUsername sets the "username" field.
func (m *UserMutation) SetUsername(s string) {
	m.username = &s
}

// Username returns the value of the "username" field in the mutation.
func (m *UserMutation) Username() (r string, exists bool) {
	v := m.username
	if v == nil {
		return
	}
	return *v, true
}

// OldUsername returns the old "username" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUsername(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUsername is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUsername requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUsername: %w", err)
	}
	return oldValue.Username, nil
}

// ResetUsername resets all changes to the "username" field.
func (m *UserMutation) ResetUsername() {
	m.username = nil
}

// SetEmail sets the "email" field.
func (m *UserMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the value of the "email" field in the mutation.
func (m *UserMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "email" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ResetEmail resets all changes to the "email" field.
func (m *UserMutation) ResetEmail() {
	m.email = nil
}

// SetPassword sets the "password" field.
func (m *UserMutation) SetPassword(s string) {
	m.password = &s
}

// Password returns the value of the "password" field in the mutation.
func (m *UserMutation) Password() (r string, exists bool) {
	v := m.password
	if v == nil {
		return
	}
	return *v, true
}

// OldPassword returns the old "password" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldPassword(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPassword is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPassword requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPassword: %w", err)
	}
	return oldValue.Password, nil
}

// ResetPassword resets all changes to the "password" field.
func (m *UserMutation) ResetPassword() {
	m.password = nil
}

// SetFirstName sets the "first_name" field.
func (m *UserMutation) SetFirstName(s string) {
	m.first_name = &s
}

// FirstName returns the value of the "first_name" field in the mutation.
func (m *UserMutation) FirstName() (r string, exists bool) {
	v := m.first_name
	if v == nil {
		return
	}
	return *v, true
}

// OldFirstName returns the old "first_name" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldFirstName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFirstName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFirstName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFirstName: %w", err)
	}
	return oldValue.FirstName, nil
}

// ResetFirstName resets all changes to the "first_name" field.
func (m *UserMutation) ResetFirstName() {
	m.first_name = nil
}

// SetLastName sets the "last_name" field.
func (m *UserMutation) SetLastName(s string) {
	m.last_name = &s
}

// LastName returns the value of the "last_name" field in the mutation.
func (m *UserMutation) LastName() (r string, exists bool) {
	v := m.last_name
	if v == nil {
		return
	}
	return *v, true
}

// OldLastName returns the old "last_name" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldLastName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastName: %w", err)
	}
	return oldValue.LastName, nil
}

// ResetLastName resets all changes to the "last_name" field.
func (m *UserMutation) ResetLastName() {
	m.last_name = nil
}

// AddGroupIDs adds the "groups" edge to the Group entity by ids.
func (m *UserMutation) AddGroupIDs(ids ...uuid.UUID) {
	if m.groups == nil {
		m.groups = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.groups[ids[i]] = struct{}{}
	}
}

// ClearGroups clears the "groups" edge to the Group entity.
func (m *UserMutation) ClearGroups() {
	m.clearedgroups = true
}

// GroupsCleared reports if the "groups" edge to the Group entity was cleared.
func (m *UserMutation) GroupsCleared() bool {
	return m.clearedgroups
}

// RemoveGroupIDs removes the "groups" edge to the Group entity by IDs.
func (m *UserMutation) RemoveGroupIDs(ids ...uuid.UUID) {
	if m.removedgroups == nil {
		m.removedgroups = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.groups, ids[i])
		m.removedgroups[ids[i]] = struct{}{}
	}
}

// RemovedGroups returns the removed IDs of the "groups" edge to the Group entity.
func (m *UserMutation) RemovedGroupsIDs() (ids []uuid.UUID) {
	for id := range m.removedgroups {
		ids = append(ids, id)
	}
	return
}

// GroupsIDs returns the "groups" edge IDs in the mutation.
func (m *UserMutation) GroupsIDs() (ids []uuid.UUID) {
	for id := range m.groups {
		ids = append(ids, id)
	}
	return
}

// ResetGroups resets all changes to the "groups" edge.
func (m *UserMutation) ResetGroups() {
	m.groups = nil
	m.clearedgroups = false
	m.removedgroups = nil
}

// AddDeploymentIDs adds the "deployments" edge to the Deployment entity by ids.
func (m *UserMutation) AddDeploymentIDs(ids ...uuid.UUID) {
	if m.deployments == nil {
		m.deployments = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.deployments[ids[i]] = struct{}{}
	}
}

// ClearDeployments clears the "deployments" edge to the Deployment entity.
func (m *UserMutation) ClearDeployments() {
	m.cleareddeployments = true
}

// DeploymentsCleared reports if the "deployments" edge to the Deployment entity was cleared.
func (m *UserMutation) DeploymentsCleared() bool {
	return m.cleareddeployments
}

// RemoveDeploymentIDs removes the "deployments" edge to the Deployment entity by IDs.
func (m *UserMutation) RemoveDeploymentIDs(ids ...uuid.UUID) {
	if m.removeddeployments == nil {
		m.removeddeployments = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.deployments, ids[i])
		m.removeddeployments[ids[i]] = struct{}{}
	}
}

// RemovedDeployments returns the removed IDs of the "deployments" edge to the Deployment entity.
func (m *UserMutation) RemovedDeploymentsIDs() (ids []uuid.UUID) {
	for id := range m.removeddeployments {
		ids = append(ids, id)
	}
	return
}

// DeploymentsIDs returns the "deployments" edge IDs in the mutation.
func (m *UserMutation) DeploymentsIDs() (ids []uuid.UUID) {
	for id := range m.deployments {
		ids = append(ids, id)
	}
	return
}

// ResetDeployments resets all changes to the "deployments" edge.
func (m *UserMutation) ResetDeployments() {
	m.deployments = nil
	m.cleareddeployments = false
	m.removeddeployments = nil
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.User, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.created_at != nil {
		fields = append(fields, user.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, user.FieldUpdatedAt)
	}
	if m.username != nil {
		fields = append(fields, user.FieldUsername)
	}
	if m.email != nil {
		fields = append(fields, user.FieldEmail)
	}
	if m.password != nil {
		fields = append(fields, user.FieldPassword)
	}
	if m.first_name != nil {
		fields = append(fields, user.FieldFirstName)
	}
	if m.last_name != nil {
		fields = append(fields, user.FieldLastName)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldCreatedAt:
		return m.CreatedAt()
	case user.FieldUpdatedAt:
		return m.UpdatedAt()
	case user.FieldUsername:
		return m.Username()
	case user.FieldEmail:
		return m.Email()
	case user.FieldPassword:
		return m.Password()
	case user.FieldFirstName:
		return m.FirstName()
	case user.FieldLastName:
		return m.LastName()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case user.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case user.FieldUsername:
		return m.OldUsername(ctx)
	case user.FieldEmail:
		return m.OldEmail(ctx)
	case user.FieldPassword:
		return m.OldPassword(ctx)
	case user.FieldFirstName:
		return m.OldFirstName(ctx)
	case user.FieldLastName:
		return m.OldLastName(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case user.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case user.FieldUsername:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUsername(v)
		return nil
	case user.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case user.FieldPassword:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPassword(v)
		return nil
	case user.FieldFirstName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFirstName(v)
		return nil
	case user.FieldLastName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastName(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case user.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case user.FieldUsername:
		m.ResetUsername()
		return nil
	case user.FieldEmail:
		m.ResetEmail()
		return nil
	case user.FieldPassword:
		m.ResetPassword()
		return nil
	case user.FieldFirstName:
		m.ResetFirstName()
		return nil
	case user.FieldLastName:
		m.ResetLastName()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.groups != nil {
		edges = append(edges, user.EdgeGroups)
	}
	if m.deployments != nil {
		edges = append(edges, user.EdgeDeployments)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeGroups:
		ids := make([]ent.Value, 0, len(m.groups))
		for id := range m.groups {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeDeployments:
		ids := make([]ent.Value, 0, len(m.deployments))
		for id := range m.deployments {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedgroups != nil {
		edges = append(edges, user.EdgeGroups)
	}
	if m.removeddeployments != nil {
		edges = append(edges, user.EdgeDeployments)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeGroups:
		ids := make([]ent.Value, 0, len(m.removedgroups))
		for id := range m.removedgroups {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeDeployments:
		ids := make([]ent.Value, 0, len(m.removeddeployments))
		for id := range m.removeddeployments {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedgroups {
		edges = append(edges, user.EdgeGroups)
	}
	if m.cleareddeployments {
		edges = append(edges, user.EdgeDeployments)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	case user.EdgeGroups:
		return m.clearedgroups
	case user.EdgeDeployments:
		return m.cleareddeployments
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgeGroups:
		m.ResetGroups()
		return nil
	case user.EdgeDeployments:
		m.ResetDeployments()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}
