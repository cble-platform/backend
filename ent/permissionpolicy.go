// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/cble-platform/cble-backend/ent/group"
	"github.com/cble-platform/cble-backend/ent/permission"
	"github.com/cble-platform/cble-backend/ent/permissionpolicy"
	"github.com/google/uuid"
)

// PermissionPolicy is the model entity for the PermissionPolicy schema.
type PermissionPolicy struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Type holds the value of the "type" field.
	Type permissionpolicy.Type `json:"type,omitempty"`
	// IsInherited holds the value of the "is_inherited" field.
	IsInherited bool `json:"is_inherited,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PermissionPolicyQuery when eager-loading is set.
	Edges                        PermissionPolicyEdges `json:"edges"`
	permission_policy_permission *uuid.UUID
	permission_policy_group      *uuid.UUID
	selectValues                 sql.SelectValues
}

// PermissionPolicyEdges holds the relations/edges for other nodes in the graph.
type PermissionPolicyEdges struct {
	// Permission holds the value of the permission edge.
	Permission *Permission `json:"permission,omitempty"`
	// Group holds the value of the group edge.
	Group *Group `json:"group,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// PermissionOrErr returns the Permission value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PermissionPolicyEdges) PermissionOrErr() (*Permission, error) {
	if e.loadedTypes[0] {
		if e.Permission == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: permission.Label}
		}
		return e.Permission, nil
	}
	return nil, &NotLoadedError{edge: "permission"}
}

// GroupOrErr returns the Group value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PermissionPolicyEdges) GroupOrErr() (*Group, error) {
	if e.loadedTypes[1] {
		if e.Group == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: group.Label}
		}
		return e.Group, nil
	}
	return nil, &NotLoadedError{edge: "group"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PermissionPolicy) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case permissionpolicy.FieldIsInherited:
			values[i] = new(sql.NullBool)
		case permissionpolicy.FieldType:
			values[i] = new(sql.NullString)
		case permissionpolicy.FieldID:
			values[i] = new(uuid.UUID)
		case permissionpolicy.ForeignKeys[0]: // permission_policy_permission
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case permissionpolicy.ForeignKeys[1]: // permission_policy_group
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PermissionPolicy fields.
func (pp *PermissionPolicy) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case permissionpolicy.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				pp.ID = *value
			}
		case permissionpolicy.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				pp.Type = permissionpolicy.Type(value.String)
			}
		case permissionpolicy.FieldIsInherited:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_inherited", values[i])
			} else if value.Valid {
				pp.IsInherited = value.Bool
			}
		case permissionpolicy.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field permission_policy_permission", values[i])
			} else if value.Valid {
				pp.permission_policy_permission = new(uuid.UUID)
				*pp.permission_policy_permission = *value.S.(*uuid.UUID)
			}
		case permissionpolicy.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field permission_policy_group", values[i])
			} else if value.Valid {
				pp.permission_policy_group = new(uuid.UUID)
				*pp.permission_policy_group = *value.S.(*uuid.UUID)
			}
		default:
			pp.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the PermissionPolicy.
// This includes values selected through modifiers, order, etc.
func (pp *PermissionPolicy) Value(name string) (ent.Value, error) {
	return pp.selectValues.Get(name)
}

// QueryPermission queries the "permission" edge of the PermissionPolicy entity.
func (pp *PermissionPolicy) QueryPermission() *PermissionQuery {
	return NewPermissionPolicyClient(pp.config).QueryPermission(pp)
}

// QueryGroup queries the "group" edge of the PermissionPolicy entity.
func (pp *PermissionPolicy) QueryGroup() *GroupQuery {
	return NewPermissionPolicyClient(pp.config).QueryGroup(pp)
}

// Update returns a builder for updating this PermissionPolicy.
// Note that you need to call PermissionPolicy.Unwrap() before calling this method if this PermissionPolicy
// was returned from a transaction, and the transaction was committed or rolled back.
func (pp *PermissionPolicy) Update() *PermissionPolicyUpdateOne {
	return NewPermissionPolicyClient(pp.config).UpdateOne(pp)
}

// Unwrap unwraps the PermissionPolicy entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pp *PermissionPolicy) Unwrap() *PermissionPolicy {
	_tx, ok := pp.config.driver.(*txDriver)
	if !ok {
		panic("ent: PermissionPolicy is not a transactional entity")
	}
	pp.config.driver = _tx.drv
	return pp
}

// String implements the fmt.Stringer.
func (pp *PermissionPolicy) String() string {
	var builder strings.Builder
	builder.WriteString("PermissionPolicy(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pp.ID))
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", pp.Type))
	builder.WriteString(", ")
	builder.WriteString("is_inherited=")
	builder.WriteString(fmt.Sprintf("%v", pp.IsInherited))
	builder.WriteByte(')')
	return builder.String()
}

// PermissionPolicies is a parsable slice of PermissionPolicy.
type PermissionPolicies []*PermissionPolicy
