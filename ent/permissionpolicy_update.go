// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/cble-platform/backend/ent/group"
	"github.com/cble-platform/backend/ent/permission"
	"github.com/cble-platform/backend/ent/permissionpolicy"
	"github.com/cble-platform/backend/ent/predicate"
	"github.com/google/uuid"
)

// PermissionPolicyUpdate is the builder for updating PermissionPolicy entities.
type PermissionPolicyUpdate struct {
	config
	hooks    []Hook
	mutation *PermissionPolicyMutation
}

// Where appends a list predicates to the PermissionPolicyUpdate builder.
func (ppu *PermissionPolicyUpdate) Where(ps ...predicate.PermissionPolicy) *PermissionPolicyUpdate {
	ppu.mutation.Where(ps...)
	return ppu
}

// SetType sets the "type" field.
func (ppu *PermissionPolicyUpdate) SetType(pe permissionpolicy.Type) *PermissionPolicyUpdate {
	ppu.mutation.SetType(pe)
	return ppu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (ppu *PermissionPolicyUpdate) SetNillableType(pe *permissionpolicy.Type) *PermissionPolicyUpdate {
	if pe != nil {
		ppu.SetType(*pe)
	}
	return ppu
}

// ClearType clears the value of the "type" field.
func (ppu *PermissionPolicyUpdate) ClearType() *PermissionPolicyUpdate {
	ppu.mutation.ClearType()
	return ppu
}

// SetIsInherited sets the "is_inherited" field.
func (ppu *PermissionPolicyUpdate) SetIsInherited(b bool) *PermissionPolicyUpdate {
	ppu.mutation.SetIsInherited(b)
	return ppu
}

// SetNillableIsInherited sets the "is_inherited" field if the given value is not nil.
func (ppu *PermissionPolicyUpdate) SetNillableIsInherited(b *bool) *PermissionPolicyUpdate {
	if b != nil {
		ppu.SetIsInherited(*b)
	}
	return ppu
}

// ClearIsInherited clears the value of the "is_inherited" field.
func (ppu *PermissionPolicyUpdate) ClearIsInherited() *PermissionPolicyUpdate {
	ppu.mutation.ClearIsInherited()
	return ppu
}

// SetPermissionID sets the "permission" edge to the Permission entity by ID.
func (ppu *PermissionPolicyUpdate) SetPermissionID(id uuid.UUID) *PermissionPolicyUpdate {
	ppu.mutation.SetPermissionID(id)
	return ppu
}

// SetPermission sets the "permission" edge to the Permission entity.
func (ppu *PermissionPolicyUpdate) SetPermission(p *Permission) *PermissionPolicyUpdate {
	return ppu.SetPermissionID(p.ID)
}

// SetGroupID sets the "group" edge to the Group entity by ID.
func (ppu *PermissionPolicyUpdate) SetGroupID(id uuid.UUID) *PermissionPolicyUpdate {
	ppu.mutation.SetGroupID(id)
	return ppu
}

// SetGroup sets the "group" edge to the Group entity.
func (ppu *PermissionPolicyUpdate) SetGroup(g *Group) *PermissionPolicyUpdate {
	return ppu.SetGroupID(g.ID)
}

// Mutation returns the PermissionPolicyMutation object of the builder.
func (ppu *PermissionPolicyUpdate) Mutation() *PermissionPolicyMutation {
	return ppu.mutation
}

// ClearPermission clears the "permission" edge to the Permission entity.
func (ppu *PermissionPolicyUpdate) ClearPermission() *PermissionPolicyUpdate {
	ppu.mutation.ClearPermission()
	return ppu
}

// ClearGroup clears the "group" edge to the Group entity.
func (ppu *PermissionPolicyUpdate) ClearGroup() *PermissionPolicyUpdate {
	ppu.mutation.ClearGroup()
	return ppu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ppu *PermissionPolicyUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ppu.sqlSave, ppu.mutation, ppu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ppu *PermissionPolicyUpdate) SaveX(ctx context.Context) int {
	affected, err := ppu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ppu *PermissionPolicyUpdate) Exec(ctx context.Context) error {
	_, err := ppu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ppu *PermissionPolicyUpdate) ExecX(ctx context.Context) {
	if err := ppu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ppu *PermissionPolicyUpdate) check() error {
	if v, ok := ppu.mutation.GetType(); ok {
		if err := permissionpolicy.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "PermissionPolicy.type": %w`, err)}
		}
	}
	if _, ok := ppu.mutation.PermissionID(); ppu.mutation.PermissionCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "PermissionPolicy.permission"`)
	}
	if _, ok := ppu.mutation.GroupID(); ppu.mutation.GroupCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "PermissionPolicy.group"`)
	}
	return nil
}

func (ppu *PermissionPolicyUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ppu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(permissionpolicy.Table, permissionpolicy.Columns, sqlgraph.NewFieldSpec(permissionpolicy.FieldID, field.TypeUUID))
	if ps := ppu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ppu.mutation.GetType(); ok {
		_spec.SetField(permissionpolicy.FieldType, field.TypeEnum, value)
	}
	if ppu.mutation.TypeCleared() {
		_spec.ClearField(permissionpolicy.FieldType, field.TypeEnum)
	}
	if value, ok := ppu.mutation.IsInherited(); ok {
		_spec.SetField(permissionpolicy.FieldIsInherited, field.TypeBool, value)
	}
	if ppu.mutation.IsInheritedCleared() {
		_spec.ClearField(permissionpolicy.FieldIsInherited, field.TypeBool)
	}
	if ppu.mutation.PermissionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   permissionpolicy.PermissionTable,
			Columns: []string{permissionpolicy.PermissionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permission.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ppu.mutation.PermissionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   permissionpolicy.PermissionTable,
			Columns: []string{permissionpolicy.PermissionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permission.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ppu.mutation.GroupCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   permissionpolicy.GroupTable,
			Columns: []string{permissionpolicy.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ppu.mutation.GroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   permissionpolicy.GroupTable,
			Columns: []string{permissionpolicy.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ppu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{permissionpolicy.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ppu.mutation.done = true
	return n, nil
}

// PermissionPolicyUpdateOne is the builder for updating a single PermissionPolicy entity.
type PermissionPolicyUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PermissionPolicyMutation
}

// SetType sets the "type" field.
func (ppuo *PermissionPolicyUpdateOne) SetType(pe permissionpolicy.Type) *PermissionPolicyUpdateOne {
	ppuo.mutation.SetType(pe)
	return ppuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (ppuo *PermissionPolicyUpdateOne) SetNillableType(pe *permissionpolicy.Type) *PermissionPolicyUpdateOne {
	if pe != nil {
		ppuo.SetType(*pe)
	}
	return ppuo
}

// ClearType clears the value of the "type" field.
func (ppuo *PermissionPolicyUpdateOne) ClearType() *PermissionPolicyUpdateOne {
	ppuo.mutation.ClearType()
	return ppuo
}

// SetIsInherited sets the "is_inherited" field.
func (ppuo *PermissionPolicyUpdateOne) SetIsInherited(b bool) *PermissionPolicyUpdateOne {
	ppuo.mutation.SetIsInherited(b)
	return ppuo
}

// SetNillableIsInherited sets the "is_inherited" field if the given value is not nil.
func (ppuo *PermissionPolicyUpdateOne) SetNillableIsInherited(b *bool) *PermissionPolicyUpdateOne {
	if b != nil {
		ppuo.SetIsInherited(*b)
	}
	return ppuo
}

// ClearIsInherited clears the value of the "is_inherited" field.
func (ppuo *PermissionPolicyUpdateOne) ClearIsInherited() *PermissionPolicyUpdateOne {
	ppuo.mutation.ClearIsInherited()
	return ppuo
}

// SetPermissionID sets the "permission" edge to the Permission entity by ID.
func (ppuo *PermissionPolicyUpdateOne) SetPermissionID(id uuid.UUID) *PermissionPolicyUpdateOne {
	ppuo.mutation.SetPermissionID(id)
	return ppuo
}

// SetPermission sets the "permission" edge to the Permission entity.
func (ppuo *PermissionPolicyUpdateOne) SetPermission(p *Permission) *PermissionPolicyUpdateOne {
	return ppuo.SetPermissionID(p.ID)
}

// SetGroupID sets the "group" edge to the Group entity by ID.
func (ppuo *PermissionPolicyUpdateOne) SetGroupID(id uuid.UUID) *PermissionPolicyUpdateOne {
	ppuo.mutation.SetGroupID(id)
	return ppuo
}

// SetGroup sets the "group" edge to the Group entity.
func (ppuo *PermissionPolicyUpdateOne) SetGroup(g *Group) *PermissionPolicyUpdateOne {
	return ppuo.SetGroupID(g.ID)
}

// Mutation returns the PermissionPolicyMutation object of the builder.
func (ppuo *PermissionPolicyUpdateOne) Mutation() *PermissionPolicyMutation {
	return ppuo.mutation
}

// ClearPermission clears the "permission" edge to the Permission entity.
func (ppuo *PermissionPolicyUpdateOne) ClearPermission() *PermissionPolicyUpdateOne {
	ppuo.mutation.ClearPermission()
	return ppuo
}

// ClearGroup clears the "group" edge to the Group entity.
func (ppuo *PermissionPolicyUpdateOne) ClearGroup() *PermissionPolicyUpdateOne {
	ppuo.mutation.ClearGroup()
	return ppuo
}

// Where appends a list predicates to the PermissionPolicyUpdate builder.
func (ppuo *PermissionPolicyUpdateOne) Where(ps ...predicate.PermissionPolicy) *PermissionPolicyUpdateOne {
	ppuo.mutation.Where(ps...)
	return ppuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ppuo *PermissionPolicyUpdateOne) Select(field string, fields ...string) *PermissionPolicyUpdateOne {
	ppuo.fields = append([]string{field}, fields...)
	return ppuo
}

// Save executes the query and returns the updated PermissionPolicy entity.
func (ppuo *PermissionPolicyUpdateOne) Save(ctx context.Context) (*PermissionPolicy, error) {
	return withHooks(ctx, ppuo.sqlSave, ppuo.mutation, ppuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ppuo *PermissionPolicyUpdateOne) SaveX(ctx context.Context) *PermissionPolicy {
	node, err := ppuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ppuo *PermissionPolicyUpdateOne) Exec(ctx context.Context) error {
	_, err := ppuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ppuo *PermissionPolicyUpdateOne) ExecX(ctx context.Context) {
	if err := ppuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ppuo *PermissionPolicyUpdateOne) check() error {
	if v, ok := ppuo.mutation.GetType(); ok {
		if err := permissionpolicy.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "PermissionPolicy.type": %w`, err)}
		}
	}
	if _, ok := ppuo.mutation.PermissionID(); ppuo.mutation.PermissionCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "PermissionPolicy.permission"`)
	}
	if _, ok := ppuo.mutation.GroupID(); ppuo.mutation.GroupCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "PermissionPolicy.group"`)
	}
	return nil
}

func (ppuo *PermissionPolicyUpdateOne) sqlSave(ctx context.Context) (_node *PermissionPolicy, err error) {
	if err := ppuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(permissionpolicy.Table, permissionpolicy.Columns, sqlgraph.NewFieldSpec(permissionpolicy.FieldID, field.TypeUUID))
	id, ok := ppuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PermissionPolicy.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ppuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, permissionpolicy.FieldID)
		for _, f := range fields {
			if !permissionpolicy.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != permissionpolicy.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ppuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ppuo.mutation.GetType(); ok {
		_spec.SetField(permissionpolicy.FieldType, field.TypeEnum, value)
	}
	if ppuo.mutation.TypeCleared() {
		_spec.ClearField(permissionpolicy.FieldType, field.TypeEnum)
	}
	if value, ok := ppuo.mutation.IsInherited(); ok {
		_spec.SetField(permissionpolicy.FieldIsInherited, field.TypeBool, value)
	}
	if ppuo.mutation.IsInheritedCleared() {
		_spec.ClearField(permissionpolicy.FieldIsInherited, field.TypeBool)
	}
	if ppuo.mutation.PermissionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   permissionpolicy.PermissionTable,
			Columns: []string{permissionpolicy.PermissionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permission.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ppuo.mutation.PermissionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   permissionpolicy.PermissionTable,
			Columns: []string{permissionpolicy.PermissionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permission.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ppuo.mutation.GroupCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   permissionpolicy.GroupTable,
			Columns: []string{permissionpolicy.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ppuo.mutation.GroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   permissionpolicy.GroupTable,
			Columns: []string{permissionpolicy.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &PermissionPolicy{config: ppuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ppuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{permissionpolicy.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ppuo.mutation.done = true
	return _node, nil
}
