// Code generated by ent, DO NOT EDIT.

package permission

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the permission type in the database.
	Label = "permission"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldKey holds the string denoting the key field in the database.
	FieldKey = "key"
	// FieldComponent holds the string denoting the component field in the database.
	FieldComponent = "component"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// EdgePermissionPolicies holds the string denoting the permission_policies edge name in mutations.
	EdgePermissionPolicies = "permission_policies"
	// Table holds the table name of the permission in the database.
	Table = "permissions"
	// PermissionPoliciesTable is the table that holds the permission_policies relation/edge.
	PermissionPoliciesTable = "permission_policies"
	// PermissionPoliciesInverseTable is the table name for the PermissionPolicy entity.
	// It exists in this package in order to avoid circular dependency with the "permissionpolicy" package.
	PermissionPoliciesInverseTable = "permission_policies"
	// PermissionPoliciesColumn is the table column denoting the permission_policies relation/edge.
	PermissionPoliciesColumn = "permission_policy_permission"
)

// Columns holds all SQL columns for permission fields.
var Columns = []string{
	FieldID,
	FieldKey,
	FieldComponent,
	FieldDescription,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the Permission queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByKey orders the results by the key field.
func ByKey(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldKey, opts...).ToFunc()
}

// ByComponent orders the results by the component field.
func ByComponent(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldComponent, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByPermissionPoliciesCount orders the results by permission_policies count.
func ByPermissionPoliciesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPermissionPoliciesStep(), opts...)
	}
}

// ByPermissionPolicies orders the results by permission_policies terms.
func ByPermissionPolicies(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPermissionPoliciesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newPermissionPoliciesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PermissionPoliciesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, PermissionPoliciesTable, PermissionPoliciesColumn),
	)
}
