// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/cble-platform/cble-backend/ent/deployment"
	"github.com/cble-platform/cble-backend/ent/provider"
	"github.com/cble-platform/cble-backend/ent/providercommand"
	"github.com/google/uuid"
)

// ProviderCommand is the model entity for the ProviderCommand schema.
type ProviderCommand struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CommandType holds the value of the "command_type" field.
	CommandType providercommand.CommandType `json:"command_type,omitempty"`
	// Status holds the value of the "status" field.
	Status providercommand.Status `json:"status,omitempty"`
	// StartTime holds the value of the "start_time" field.
	StartTime time.Time `json:"start_time,omitempty"`
	// EndTime holds the value of the "end_time" field.
	EndTime time.Time `json:"end_time,omitempty"`
	// Output holds the value of the "output" field.
	Output string `json:"output,omitempty"`
	// Error holds the value of the "error" field.
	Error string `json:"error,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ProviderCommandQuery when eager-loading is set.
	Edges                       ProviderCommandEdges `json:"edges"`
	provider_command_provider   *uuid.UUID
	provider_command_deployment *uuid.UUID
	selectValues                sql.SelectValues
}

// ProviderCommandEdges holds the relations/edges for other nodes in the graph.
type ProviderCommandEdges struct {
	// Provider holds the value of the provider edge.
	Provider *Provider `json:"provider,omitempty"`
	// Deployment holds the value of the deployment edge.
	Deployment *Deployment `json:"deployment,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ProviderOrErr returns the Provider value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProviderCommandEdges) ProviderOrErr() (*Provider, error) {
	if e.loadedTypes[0] {
		if e.Provider == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: provider.Label}
		}
		return e.Provider, nil
	}
	return nil, &NotLoadedError{edge: "provider"}
}

// DeploymentOrErr returns the Deployment value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProviderCommandEdges) DeploymentOrErr() (*Deployment, error) {
	if e.loadedTypes[1] {
		if e.Deployment == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: deployment.Label}
		}
		return e.Deployment, nil
	}
	return nil, &NotLoadedError{edge: "deployment"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ProviderCommand) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case providercommand.FieldCommandType, providercommand.FieldStatus, providercommand.FieldOutput, providercommand.FieldError:
			values[i] = new(sql.NullString)
		case providercommand.FieldCreatedAt, providercommand.FieldUpdatedAt, providercommand.FieldStartTime, providercommand.FieldEndTime:
			values[i] = new(sql.NullTime)
		case providercommand.FieldID:
			values[i] = new(uuid.UUID)
		case providercommand.ForeignKeys[0]: // provider_command_provider
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case providercommand.ForeignKeys[1]: // provider_command_deployment
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ProviderCommand fields.
func (pc *ProviderCommand) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case providercommand.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				pc.ID = *value
			}
		case providercommand.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pc.CreatedAt = value.Time
			}
		case providercommand.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				pc.UpdatedAt = value.Time
			}
		case providercommand.FieldCommandType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field command_type", values[i])
			} else if value.Valid {
				pc.CommandType = providercommand.CommandType(value.String)
			}
		case providercommand.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				pc.Status = providercommand.Status(value.String)
			}
		case providercommand.FieldStartTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field start_time", values[i])
			} else if value.Valid {
				pc.StartTime = value.Time
			}
		case providercommand.FieldEndTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field end_time", values[i])
			} else if value.Valid {
				pc.EndTime = value.Time
			}
		case providercommand.FieldOutput:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field output", values[i])
			} else if value.Valid {
				pc.Output = value.String
			}
		case providercommand.FieldError:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field error", values[i])
			} else if value.Valid {
				pc.Error = value.String
			}
		case providercommand.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field provider_command_provider", values[i])
			} else if value.Valid {
				pc.provider_command_provider = new(uuid.UUID)
				*pc.provider_command_provider = *value.S.(*uuid.UUID)
			}
		case providercommand.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field provider_command_deployment", values[i])
			} else if value.Valid {
				pc.provider_command_deployment = new(uuid.UUID)
				*pc.provider_command_deployment = *value.S.(*uuid.UUID)
			}
		default:
			pc.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ProviderCommand.
// This includes values selected through modifiers, order, etc.
func (pc *ProviderCommand) Value(name string) (ent.Value, error) {
	return pc.selectValues.Get(name)
}

// QueryProvider queries the "provider" edge of the ProviderCommand entity.
func (pc *ProviderCommand) QueryProvider() *ProviderQuery {
	return NewProviderCommandClient(pc.config).QueryProvider(pc)
}

// QueryDeployment queries the "deployment" edge of the ProviderCommand entity.
func (pc *ProviderCommand) QueryDeployment() *DeploymentQuery {
	return NewProviderCommandClient(pc.config).QueryDeployment(pc)
}

// Update returns a builder for updating this ProviderCommand.
// Note that you need to call ProviderCommand.Unwrap() before calling this method if this ProviderCommand
// was returned from a transaction, and the transaction was committed or rolled back.
func (pc *ProviderCommand) Update() *ProviderCommandUpdateOne {
	return NewProviderCommandClient(pc.config).UpdateOne(pc)
}

// Unwrap unwraps the ProviderCommand entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pc *ProviderCommand) Unwrap() *ProviderCommand {
	_tx, ok := pc.config.driver.(*txDriver)
	if !ok {
		panic("ent: ProviderCommand is not a transactional entity")
	}
	pc.config.driver = _tx.drv
	return pc
}

// String implements the fmt.Stringer.
func (pc *ProviderCommand) String() string {
	var builder strings.Builder
	builder.WriteString("ProviderCommand(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pc.ID))
	builder.WriteString("created_at=")
	builder.WriteString(pc.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(pc.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("command_type=")
	builder.WriteString(fmt.Sprintf("%v", pc.CommandType))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", pc.Status))
	builder.WriteString(", ")
	builder.WriteString("start_time=")
	builder.WriteString(pc.StartTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("end_time=")
	builder.WriteString(pc.EndTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("output=")
	builder.WriteString(pc.Output)
	builder.WriteString(", ")
	builder.WriteString("error=")
	builder.WriteString(pc.Error)
	builder.WriteByte(')')
	return builder.String()
}

// ProviderCommands is a parsable slice of ProviderCommand.
type ProviderCommands []*ProviderCommand
