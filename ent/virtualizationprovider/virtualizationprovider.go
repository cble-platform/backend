// Code generated by ent, DO NOT EDIT.

package virtualizationprovider

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the virtualizationprovider type in the database.
	Label = "virtualization_provider"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldDisplayName holds the string denoting the display_name field in the database.
	FieldDisplayName = "display_name"
	// FieldProviderGitURL holds the string denoting the provider_git_url field in the database.
	FieldProviderGitURL = "provider_git_url"
	// FieldProviderVersion holds the string denoting the provider_version field in the database.
	FieldProviderVersion = "provider_version"
	// FieldConfigPath holds the string denoting the config_path field in the database.
	FieldConfigPath = "config_path"
	// EdgeBlueprints holds the string denoting the blueprints edge name in mutations.
	EdgeBlueprints = "blueprints"
	// Table holds the table name of the virtualizationprovider in the database.
	Table = "virtualization_providers"
	// BlueprintsTable is the table that holds the blueprints relation/edge.
	BlueprintsTable = "blueprints"
	// BlueprintsInverseTable is the table name for the Blueprint entity.
	// It exists in this package in order to avoid circular dependency with the "blueprint" package.
	BlueprintsInverseTable = "blueprints"
	// BlueprintsColumn is the table column denoting the blueprints relation/edge.
	BlueprintsColumn = "blueprint_virtualization_provider"
)

// Columns holds all SQL columns for virtualizationprovider fields.
var Columns = []string{
	FieldID,
	FieldDisplayName,
	FieldProviderGitURL,
	FieldProviderVersion,
	FieldConfigPath,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the VirtualizationProvider queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByDisplayName orders the results by the display_name field.
func ByDisplayName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDisplayName, opts...).ToFunc()
}

// ByProviderGitURL orders the results by the provider_git_url field.
func ByProviderGitURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProviderGitURL, opts...).ToFunc()
}

// ByProviderVersion orders the results by the provider_version field.
func ByProviderVersion(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProviderVersion, opts...).ToFunc()
}

// ByConfigPath orders the results by the config_path field.
func ByConfigPath(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldConfigPath, opts...).ToFunc()
}

// ByBlueprintsCount orders the results by blueprints count.
func ByBlueprintsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newBlueprintsStep(), opts...)
	}
}

// ByBlueprints orders the results by blueprints terms.
func ByBlueprints(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBlueprintsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newBlueprintsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BlueprintsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, BlueprintsTable, BlueprintsColumn),
	)
}
