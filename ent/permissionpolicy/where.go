// Code generated by ent, DO NOT EDIT.

package permissionpolicy

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/cble-platform/backend/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.PermissionPolicy {
	return predicate.PermissionPolicy(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.PermissionPolicy {
	return predicate.PermissionPolicy(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.PermissionPolicy {
	return predicate.PermissionPolicy(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.PermissionPolicy {
	return predicate.PermissionPolicy(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.PermissionPolicy {
	return predicate.PermissionPolicy(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.PermissionPolicy {
	return predicate.PermissionPolicy(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.PermissionPolicy {
	return predicate.PermissionPolicy(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.PermissionPolicy {
	return predicate.PermissionPolicy(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.PermissionPolicy {
	return predicate.PermissionPolicy(sql.FieldLTE(FieldID, id))
}

// IsInherited applies equality check predicate on the "is_inherited" field. It's identical to IsInheritedEQ.
func IsInherited(v bool) predicate.PermissionPolicy {
	return predicate.PermissionPolicy(sql.FieldEQ(FieldIsInherited, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v Type) predicate.PermissionPolicy {
	return predicate.PermissionPolicy(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v Type) predicate.PermissionPolicy {
	return predicate.PermissionPolicy(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...Type) predicate.PermissionPolicy {
	return predicate.PermissionPolicy(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...Type) predicate.PermissionPolicy {
	return predicate.PermissionPolicy(sql.FieldNotIn(FieldType, vs...))
}

// TypeIsNil applies the IsNil predicate on the "type" field.
func TypeIsNil() predicate.PermissionPolicy {
	return predicate.PermissionPolicy(sql.FieldIsNull(FieldType))
}

// TypeNotNil applies the NotNil predicate on the "type" field.
func TypeNotNil() predicate.PermissionPolicy {
	return predicate.PermissionPolicy(sql.FieldNotNull(FieldType))
}

// IsInheritedEQ applies the EQ predicate on the "is_inherited" field.
func IsInheritedEQ(v bool) predicate.PermissionPolicy {
	return predicate.PermissionPolicy(sql.FieldEQ(FieldIsInherited, v))
}

// IsInheritedNEQ applies the NEQ predicate on the "is_inherited" field.
func IsInheritedNEQ(v bool) predicate.PermissionPolicy {
	return predicate.PermissionPolicy(sql.FieldNEQ(FieldIsInherited, v))
}

// IsInheritedIsNil applies the IsNil predicate on the "is_inherited" field.
func IsInheritedIsNil() predicate.PermissionPolicy {
	return predicate.PermissionPolicy(sql.FieldIsNull(FieldIsInherited))
}

// IsInheritedNotNil applies the NotNil predicate on the "is_inherited" field.
func IsInheritedNotNil() predicate.PermissionPolicy {
	return predicate.PermissionPolicy(sql.FieldNotNull(FieldIsInherited))
}

// HasPermission applies the HasEdge predicate on the "permission" edge.
func HasPermission() predicate.PermissionPolicy {
	return predicate.PermissionPolicy(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, PermissionTable, PermissionColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPermissionWith applies the HasEdge predicate on the "permission" edge with a given conditions (other predicates).
func HasPermissionWith(preds ...predicate.Permission) predicate.PermissionPolicy {
	return predicate.PermissionPolicy(func(s *sql.Selector) {
		step := newPermissionStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasGroup applies the HasEdge predicate on the "group" edge.
func HasGroup() predicate.PermissionPolicy {
	return predicate.PermissionPolicy(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, GroupTable, GroupColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasGroupWith applies the HasEdge predicate on the "group" edge with a given conditions (other predicates).
func HasGroupWith(preds ...predicate.Group) predicate.PermissionPolicy {
	return predicate.PermissionPolicy(func(s *sql.Selector) {
		step := newGroupStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.PermissionPolicy) predicate.PermissionPolicy {
	return predicate.PermissionPolicy(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.PermissionPolicy) predicate.PermissionPolicy {
	return predicate.PermissionPolicy(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.PermissionPolicy) predicate.PermissionPolicy {
	return predicate.PermissionPolicy(sql.NotPredicates(p))
}
