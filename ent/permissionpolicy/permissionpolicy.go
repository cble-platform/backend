// Code generated by ent, DO NOT EDIT.

package permissionpolicy

import (
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the permissionpolicy type in the database.
	Label = "permission_policy"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldIsInherited holds the string denoting the is_inherited field in the database.
	FieldIsInherited = "is_inherited"
	// EdgePermission holds the string denoting the permission edge name in mutations.
	EdgePermission = "permission"
	// EdgeGroup holds the string denoting the group edge name in mutations.
	EdgeGroup = "group"
	// Table holds the table name of the permissionpolicy in the database.
	Table = "permission_policies"
	// PermissionTable is the table that holds the permission relation/edge.
	PermissionTable = "permission_policies"
	// PermissionInverseTable is the table name for the Permission entity.
	// It exists in this package in order to avoid circular dependency with the "permission" package.
	PermissionInverseTable = "permissions"
	// PermissionColumn is the table column denoting the permission relation/edge.
	PermissionColumn = "permission_policy_permission"
	// GroupTable is the table that holds the group relation/edge.
	GroupTable = "permission_policies"
	// GroupInverseTable is the table name for the Group entity.
	// It exists in this package in order to avoid circular dependency with the "group" package.
	GroupInverseTable = "groups"
	// GroupColumn is the table column denoting the group relation/edge.
	GroupColumn = "permission_policy_group"
)

// Columns holds all SQL columns for permissionpolicy fields.
var Columns = []string{
	FieldID,
	FieldType,
	FieldIsInherited,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "permission_policies"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"permission_policy_permission",
	"permission_policy_group",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultIsInherited holds the default value on creation for the "is_inherited" field.
	DefaultIsInherited bool
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// Type defines the type for the "type" enum field.
type Type string

// TypeALLOW is the default value of the Type enum.
const DefaultType = TypeALLOW

// Type values.
const (
	TypeALLOW Type = "ALLOW"
	TypeDENY  Type = "DENY"
)

func (_type Type) String() string {
	return string(_type)
}

// TypeValidator is a validator for the "type" field enum values. It is called by the builders before save.
func TypeValidator(_type Type) error {
	switch _type {
	case TypeALLOW, TypeDENY:
		return nil
	default:
		return fmt.Errorf("permissionpolicy: invalid enum value for type field: %q", _type)
	}
}

// OrderOption defines the ordering options for the PermissionPolicy queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByIsInherited orders the results by the is_inherited field.
func ByIsInherited(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsInherited, opts...).ToFunc()
}

// ByPermissionField orders the results by permission field.
func ByPermissionField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPermissionStep(), sql.OrderByField(field, opts...))
	}
}

// ByGroupField orders the results by group field.
func ByGroupField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newGroupStep(), sql.OrderByField(field, opts...))
	}
}
func newPermissionStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PermissionInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, PermissionTable, PermissionColumn),
	)
}
func newGroupStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(GroupInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, GroupTable, GroupColumn),
	)
}
