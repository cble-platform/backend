// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/cble-platform/backend/ent/group"
	"github.com/cble-platform/backend/ent/permission"
	"github.com/cble-platform/backend/ent/permissionpolicy"
	"github.com/google/uuid"
)

// PermissionPolicyCreate is the builder for creating a PermissionPolicy entity.
type PermissionPolicyCreate struct {
	config
	mutation *PermissionPolicyMutation
	hooks    []Hook
}

// SetType sets the "type" field.
func (ppc *PermissionPolicyCreate) SetType(pe permissionpolicy.Type) *PermissionPolicyCreate {
	ppc.mutation.SetType(pe)
	return ppc
}

// SetNillableType sets the "type" field if the given value is not nil.
func (ppc *PermissionPolicyCreate) SetNillableType(pe *permissionpolicy.Type) *PermissionPolicyCreate {
	if pe != nil {
		ppc.SetType(*pe)
	}
	return ppc
}

// SetID sets the "id" field.
func (ppc *PermissionPolicyCreate) SetID(u uuid.UUID) *PermissionPolicyCreate {
	ppc.mutation.SetID(u)
	return ppc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ppc *PermissionPolicyCreate) SetNillableID(u *uuid.UUID) *PermissionPolicyCreate {
	if u != nil {
		ppc.SetID(*u)
	}
	return ppc
}

// SetPermissionID sets the "permission" edge to the Permission entity by ID.
func (ppc *PermissionPolicyCreate) SetPermissionID(id uuid.UUID) *PermissionPolicyCreate {
	ppc.mutation.SetPermissionID(id)
	return ppc
}

// SetPermission sets the "permission" edge to the Permission entity.
func (ppc *PermissionPolicyCreate) SetPermission(p *Permission) *PermissionPolicyCreate {
	return ppc.SetPermissionID(p.ID)
}

// SetGroupID sets the "group" edge to the Group entity by ID.
func (ppc *PermissionPolicyCreate) SetGroupID(id uuid.UUID) *PermissionPolicyCreate {
	ppc.mutation.SetGroupID(id)
	return ppc
}

// SetGroup sets the "group" edge to the Group entity.
func (ppc *PermissionPolicyCreate) SetGroup(g *Group) *PermissionPolicyCreate {
	return ppc.SetGroupID(g.ID)
}

// Mutation returns the PermissionPolicyMutation object of the builder.
func (ppc *PermissionPolicyCreate) Mutation() *PermissionPolicyMutation {
	return ppc.mutation
}

// Save creates the PermissionPolicy in the database.
func (ppc *PermissionPolicyCreate) Save(ctx context.Context) (*PermissionPolicy, error) {
	ppc.defaults()
	return withHooks(ctx, ppc.sqlSave, ppc.mutation, ppc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ppc *PermissionPolicyCreate) SaveX(ctx context.Context) *PermissionPolicy {
	v, err := ppc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ppc *PermissionPolicyCreate) Exec(ctx context.Context) error {
	_, err := ppc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ppc *PermissionPolicyCreate) ExecX(ctx context.Context) {
	if err := ppc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ppc *PermissionPolicyCreate) defaults() {
	if _, ok := ppc.mutation.GetType(); !ok {
		v := permissionpolicy.DefaultType
		ppc.mutation.SetType(v)
	}
	if _, ok := ppc.mutation.ID(); !ok {
		v := permissionpolicy.DefaultID()
		ppc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ppc *PermissionPolicyCreate) check() error {
	if v, ok := ppc.mutation.GetType(); ok {
		if err := permissionpolicy.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "PermissionPolicy.type": %w`, err)}
		}
	}
	if _, ok := ppc.mutation.PermissionID(); !ok {
		return &ValidationError{Name: "permission", err: errors.New(`ent: missing required edge "PermissionPolicy.permission"`)}
	}
	if _, ok := ppc.mutation.GroupID(); !ok {
		return &ValidationError{Name: "group", err: errors.New(`ent: missing required edge "PermissionPolicy.group"`)}
	}
	return nil
}

func (ppc *PermissionPolicyCreate) sqlSave(ctx context.Context) (*PermissionPolicy, error) {
	if err := ppc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ppc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ppc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	ppc.mutation.id = &_node.ID
	ppc.mutation.done = true
	return _node, nil
}

func (ppc *PermissionPolicyCreate) createSpec() (*PermissionPolicy, *sqlgraph.CreateSpec) {
	var (
		_node = &PermissionPolicy{config: ppc.config}
		_spec = sqlgraph.NewCreateSpec(permissionpolicy.Table, sqlgraph.NewFieldSpec(permissionpolicy.FieldID, field.TypeUUID))
	)
	if id, ok := ppc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := ppc.mutation.GetType(); ok {
		_spec.SetField(permissionpolicy.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if nodes := ppc.mutation.PermissionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   permissionpolicy.PermissionTable,
			Columns: []string{permissionpolicy.PermissionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permission.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.permission_policy_permission = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ppc.mutation.GroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   permissionpolicy.GroupTable,
			Columns: []string{permissionpolicy.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.permission_policy_group = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// PermissionPolicyCreateBulk is the builder for creating many PermissionPolicy entities in bulk.
type PermissionPolicyCreateBulk struct {
	config
	err      error
	builders []*PermissionPolicyCreate
}

// Save creates the PermissionPolicy entities in the database.
func (ppcb *PermissionPolicyCreateBulk) Save(ctx context.Context) ([]*PermissionPolicy, error) {
	if ppcb.err != nil {
		return nil, ppcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ppcb.builders))
	nodes := make([]*PermissionPolicy, len(ppcb.builders))
	mutators := make([]Mutator, len(ppcb.builders))
	for i := range ppcb.builders {
		func(i int, root context.Context) {
			builder := ppcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PermissionPolicyMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ppcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ppcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ppcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ppcb *PermissionPolicyCreateBulk) SaveX(ctx context.Context) []*PermissionPolicy {
	v, err := ppcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ppcb *PermissionPolicyCreateBulk) Exec(ctx context.Context) error {
	_, err := ppcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ppcb *PermissionPolicyCreateBulk) ExecX(ctx context.Context) {
	if err := ppcb.Exec(ctx); err != nil {
		panic(err)
	}
}
