// Code generated by ent, DO NOT EDIT.

package providercommand

import (
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the providercommand type in the database.
	Label = "provider_command"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCommandType holds the string denoting the command_type field in the database.
	FieldCommandType = "command_type"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldStartTime holds the string denoting the start_time field in the database.
	FieldStartTime = "start_time"
	// FieldEndTime holds the string denoting the end_time field in the database.
	FieldEndTime = "end_time"
	// EdgeProvider holds the string denoting the provider edge name in mutations.
	EdgeProvider = "provider"
	// EdgeBlueprint holds the string denoting the blueprint edge name in mutations.
	EdgeBlueprint = "blueprint"
	// Table holds the table name of the providercommand in the database.
	Table = "provider_commands"
	// ProviderTable is the table that holds the provider relation/edge.
	ProviderTable = "provider_commands"
	// ProviderInverseTable is the table name for the Provider entity.
	// It exists in this package in order to avoid circular dependency with the "provider" package.
	ProviderInverseTable = "providers"
	// ProviderColumn is the table column denoting the provider relation/edge.
	ProviderColumn = "provider_command_provider"
	// BlueprintTable is the table that holds the blueprint relation/edge.
	BlueprintTable = "provider_commands"
	// BlueprintInverseTable is the table name for the Blueprint entity.
	// It exists in this package in order to avoid circular dependency with the "blueprint" package.
	BlueprintInverseTable = "blueprints"
	// BlueprintColumn is the table column denoting the blueprint relation/edge.
	BlueprintColumn = "provider_command_blueprint"
)

// Columns holds all SQL columns for providercommand fields.
var Columns = []string{
	FieldID,
	FieldCommandType,
	FieldStatus,
	FieldStartTime,
	FieldEndTime,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "provider_commands"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"provider_command_provider",
	"provider_command_blueprint",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// CommandType defines the type for the "command_type" enum field.
type CommandType string

// CommandType values.
const (
	CommandTypeCONFIGURE CommandType = "CONFIGURE"
	CommandTypeDEPLOY    CommandType = "DEPLOY"
	CommandTypeDESTROY   CommandType = "DESTROY"
)

func (ct CommandType) String() string {
	return string(ct)
}

// CommandTypeValidator is a validator for the "command_type" field enum values. It is called by the builders before save.
func CommandTypeValidator(ct CommandType) error {
	switch ct {
	case CommandTypeCONFIGURE, CommandTypeDEPLOY, CommandTypeDESTROY:
		return nil
	default:
		return fmt.Errorf("providercommand: invalid enum value for command_type field: %q", ct)
	}
}

// Status defines the type for the "status" enum field.
type Status string

// Status values.
const (
	StatusFAILED     Status = "FAILED"
	StatusSUCCEEDED  Status = "SUCCEEDED"
	StatusINPROGRESS Status = "INPROGRESS"
	StatusDESTROYED  Status = "DESTROYED"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusFAILED, StatusSUCCEEDED, StatusINPROGRESS, StatusDESTROYED:
		return nil
	default:
		return fmt.Errorf("providercommand: invalid enum value for status field: %q", s)
	}
}

// OrderOption defines the ordering options for the ProviderCommand queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCommandType orders the results by the command_type field.
func ByCommandType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCommandType, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByStartTime orders the results by the start_time field.
func ByStartTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStartTime, opts...).ToFunc()
}

// ByEndTime orders the results by the end_time field.
func ByEndTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEndTime, opts...).ToFunc()
}

// ByProviderField orders the results by provider field.
func ByProviderField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProviderStep(), sql.OrderByField(field, opts...))
	}
}

// ByBlueprintField orders the results by blueprint field.
func ByBlueprintField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBlueprintStep(), sql.OrderByField(field, opts...))
	}
}
func newProviderStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProviderInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, ProviderTable, ProviderColumn),
	)
}
func newBlueprintStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BlueprintInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, BlueprintTable, BlueprintColumn),
	)
}
