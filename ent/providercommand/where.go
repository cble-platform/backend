// Code generated by ent, DO NOT EDIT.

package providercommand

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/cble-platform/cble-backend/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.ProviderCommand {
	return predicate.ProviderCommand(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.ProviderCommand {
	return predicate.ProviderCommand(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.ProviderCommand {
	return predicate.ProviderCommand(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.ProviderCommand {
	return predicate.ProviderCommand(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.ProviderCommand {
	return predicate.ProviderCommand(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.ProviderCommand {
	return predicate.ProviderCommand(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.ProviderCommand {
	return predicate.ProviderCommand(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.ProviderCommand {
	return predicate.ProviderCommand(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.ProviderCommand {
	return predicate.ProviderCommand(sql.FieldLTE(FieldID, id))
}

// StartTime applies equality check predicate on the "start_time" field. It's identical to StartTimeEQ.
func StartTime(v time.Time) predicate.ProviderCommand {
	return predicate.ProviderCommand(sql.FieldEQ(FieldStartTime, v))
}

// EndTime applies equality check predicate on the "end_time" field. It's identical to EndTimeEQ.
func EndTime(v time.Time) predicate.ProviderCommand {
	return predicate.ProviderCommand(sql.FieldEQ(FieldEndTime, v))
}

// CommandTypeEQ applies the EQ predicate on the "command_type" field.
func CommandTypeEQ(v CommandType) predicate.ProviderCommand {
	return predicate.ProviderCommand(sql.FieldEQ(FieldCommandType, v))
}

// CommandTypeNEQ applies the NEQ predicate on the "command_type" field.
func CommandTypeNEQ(v CommandType) predicate.ProviderCommand {
	return predicate.ProviderCommand(sql.FieldNEQ(FieldCommandType, v))
}

// CommandTypeIn applies the In predicate on the "command_type" field.
func CommandTypeIn(vs ...CommandType) predicate.ProviderCommand {
	return predicate.ProviderCommand(sql.FieldIn(FieldCommandType, vs...))
}

// CommandTypeNotIn applies the NotIn predicate on the "command_type" field.
func CommandTypeNotIn(vs ...CommandType) predicate.ProviderCommand {
	return predicate.ProviderCommand(sql.FieldNotIn(FieldCommandType, vs...))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.ProviderCommand {
	return predicate.ProviderCommand(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.ProviderCommand {
	return predicate.ProviderCommand(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.ProviderCommand {
	return predicate.ProviderCommand(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.ProviderCommand {
	return predicate.ProviderCommand(sql.FieldNotIn(FieldStatus, vs...))
}

// StartTimeEQ applies the EQ predicate on the "start_time" field.
func StartTimeEQ(v time.Time) predicate.ProviderCommand {
	return predicate.ProviderCommand(sql.FieldEQ(FieldStartTime, v))
}

// StartTimeNEQ applies the NEQ predicate on the "start_time" field.
func StartTimeNEQ(v time.Time) predicate.ProviderCommand {
	return predicate.ProviderCommand(sql.FieldNEQ(FieldStartTime, v))
}

// StartTimeIn applies the In predicate on the "start_time" field.
func StartTimeIn(vs ...time.Time) predicate.ProviderCommand {
	return predicate.ProviderCommand(sql.FieldIn(FieldStartTime, vs...))
}

// StartTimeNotIn applies the NotIn predicate on the "start_time" field.
func StartTimeNotIn(vs ...time.Time) predicate.ProviderCommand {
	return predicate.ProviderCommand(sql.FieldNotIn(FieldStartTime, vs...))
}

// StartTimeGT applies the GT predicate on the "start_time" field.
func StartTimeGT(v time.Time) predicate.ProviderCommand {
	return predicate.ProviderCommand(sql.FieldGT(FieldStartTime, v))
}

// StartTimeGTE applies the GTE predicate on the "start_time" field.
func StartTimeGTE(v time.Time) predicate.ProviderCommand {
	return predicate.ProviderCommand(sql.FieldGTE(FieldStartTime, v))
}

// StartTimeLT applies the LT predicate on the "start_time" field.
func StartTimeLT(v time.Time) predicate.ProviderCommand {
	return predicate.ProviderCommand(sql.FieldLT(FieldStartTime, v))
}

// StartTimeLTE applies the LTE predicate on the "start_time" field.
func StartTimeLTE(v time.Time) predicate.ProviderCommand {
	return predicate.ProviderCommand(sql.FieldLTE(FieldStartTime, v))
}

// StartTimeIsNil applies the IsNil predicate on the "start_time" field.
func StartTimeIsNil() predicate.ProviderCommand {
	return predicate.ProviderCommand(sql.FieldIsNull(FieldStartTime))
}

// StartTimeNotNil applies the NotNil predicate on the "start_time" field.
func StartTimeNotNil() predicate.ProviderCommand {
	return predicate.ProviderCommand(sql.FieldNotNull(FieldStartTime))
}

// EndTimeEQ applies the EQ predicate on the "end_time" field.
func EndTimeEQ(v time.Time) predicate.ProviderCommand {
	return predicate.ProviderCommand(sql.FieldEQ(FieldEndTime, v))
}

// EndTimeNEQ applies the NEQ predicate on the "end_time" field.
func EndTimeNEQ(v time.Time) predicate.ProviderCommand {
	return predicate.ProviderCommand(sql.FieldNEQ(FieldEndTime, v))
}

// EndTimeIn applies the In predicate on the "end_time" field.
func EndTimeIn(vs ...time.Time) predicate.ProviderCommand {
	return predicate.ProviderCommand(sql.FieldIn(FieldEndTime, vs...))
}

// EndTimeNotIn applies the NotIn predicate on the "end_time" field.
func EndTimeNotIn(vs ...time.Time) predicate.ProviderCommand {
	return predicate.ProviderCommand(sql.FieldNotIn(FieldEndTime, vs...))
}

// EndTimeGT applies the GT predicate on the "end_time" field.
func EndTimeGT(v time.Time) predicate.ProviderCommand {
	return predicate.ProviderCommand(sql.FieldGT(FieldEndTime, v))
}

// EndTimeGTE applies the GTE predicate on the "end_time" field.
func EndTimeGTE(v time.Time) predicate.ProviderCommand {
	return predicate.ProviderCommand(sql.FieldGTE(FieldEndTime, v))
}

// EndTimeLT applies the LT predicate on the "end_time" field.
func EndTimeLT(v time.Time) predicate.ProviderCommand {
	return predicate.ProviderCommand(sql.FieldLT(FieldEndTime, v))
}

// EndTimeLTE applies the LTE predicate on the "end_time" field.
func EndTimeLTE(v time.Time) predicate.ProviderCommand {
	return predicate.ProviderCommand(sql.FieldLTE(FieldEndTime, v))
}

// EndTimeIsNil applies the IsNil predicate on the "end_time" field.
func EndTimeIsNil() predicate.ProviderCommand {
	return predicate.ProviderCommand(sql.FieldIsNull(FieldEndTime))
}

// EndTimeNotNil applies the NotNil predicate on the "end_time" field.
func EndTimeNotNil() predicate.ProviderCommand {
	return predicate.ProviderCommand(sql.FieldNotNull(FieldEndTime))
}

// HasProvider applies the HasEdge predicate on the "provider" edge.
func HasProvider() predicate.ProviderCommand {
	return predicate.ProviderCommand(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ProviderTable, ProviderColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProviderWith applies the HasEdge predicate on the "provider" edge with a given conditions (other predicates).
func HasProviderWith(preds ...predicate.Provider) predicate.ProviderCommand {
	return predicate.ProviderCommand(func(s *sql.Selector) {
		step := newProviderStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasBlueprint applies the HasEdge predicate on the "blueprint" edge.
func HasBlueprint() predicate.ProviderCommand {
	return predicate.ProviderCommand(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, BlueprintTable, BlueprintColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBlueprintWith applies the HasEdge predicate on the "blueprint" edge with a given conditions (other predicates).
func HasBlueprintWith(preds ...predicate.Blueprint) predicate.ProviderCommand {
	return predicate.ProviderCommand(func(s *sql.Selector) {
		step := newBlueprintStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ProviderCommand) predicate.ProviderCommand {
	return predicate.ProviderCommand(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ProviderCommand) predicate.ProviderCommand {
	return predicate.ProviderCommand(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ProviderCommand) predicate.ProviderCommand {
	return predicate.ProviderCommand(sql.NotPredicates(p))
}
