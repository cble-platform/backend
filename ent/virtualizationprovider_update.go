// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/cble-platform/cble-backend/ent/blueprint"
	"github.com/cble-platform/cble-backend/ent/predicate"
	"github.com/cble-platform/cble-backend/ent/virtualizationprovider"
	"github.com/google/uuid"
)

// VirtualizationProviderUpdate is the builder for updating VirtualizationProvider entities.
type VirtualizationProviderUpdate struct {
	config
	hooks    []Hook
	mutation *VirtualizationProviderMutation
}

// Where appends a list predicates to the VirtualizationProviderUpdate builder.
func (vpu *VirtualizationProviderUpdate) Where(ps ...predicate.VirtualizationProvider) *VirtualizationProviderUpdate {
	vpu.mutation.Where(ps...)
	return vpu
}

// SetDisplayName sets the "display_name" field.
func (vpu *VirtualizationProviderUpdate) SetDisplayName(s string) *VirtualizationProviderUpdate {
	vpu.mutation.SetDisplayName(s)
	return vpu
}

// SetProviderGitURL sets the "provider_git_url" field.
func (vpu *VirtualizationProviderUpdate) SetProviderGitURL(s string) *VirtualizationProviderUpdate {
	vpu.mutation.SetProviderGitURL(s)
	return vpu
}

// SetProviderVersion sets the "provider_version" field.
func (vpu *VirtualizationProviderUpdate) SetProviderVersion(s string) *VirtualizationProviderUpdate {
	vpu.mutation.SetProviderVersion(s)
	return vpu
}

// SetConfigBytes sets the "config_bytes" field.
func (vpu *VirtualizationProviderUpdate) SetConfigBytes(b []byte) *VirtualizationProviderUpdate {
	vpu.mutation.SetConfigBytes(b)
	return vpu
}

// SetIsLoaded sets the "is_loaded" field.
func (vpu *VirtualizationProviderUpdate) SetIsLoaded(b bool) *VirtualizationProviderUpdate {
	vpu.mutation.SetIsLoaded(b)
	return vpu
}

// SetNillableIsLoaded sets the "is_loaded" field if the given value is not nil.
func (vpu *VirtualizationProviderUpdate) SetNillableIsLoaded(b *bool) *VirtualizationProviderUpdate {
	if b != nil {
		vpu.SetIsLoaded(*b)
	}
	return vpu
}

// AddBlueprintIDs adds the "blueprints" edge to the Blueprint entity by IDs.
func (vpu *VirtualizationProviderUpdate) AddBlueprintIDs(ids ...uuid.UUID) *VirtualizationProviderUpdate {
	vpu.mutation.AddBlueprintIDs(ids...)
	return vpu
}

// AddBlueprints adds the "blueprints" edges to the Blueprint entity.
func (vpu *VirtualizationProviderUpdate) AddBlueprints(b ...*Blueprint) *VirtualizationProviderUpdate {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return vpu.AddBlueprintIDs(ids...)
}

// Mutation returns the VirtualizationProviderMutation object of the builder.
func (vpu *VirtualizationProviderUpdate) Mutation() *VirtualizationProviderMutation {
	return vpu.mutation
}

// ClearBlueprints clears all "blueprints" edges to the Blueprint entity.
func (vpu *VirtualizationProviderUpdate) ClearBlueprints() *VirtualizationProviderUpdate {
	vpu.mutation.ClearBlueprints()
	return vpu
}

// RemoveBlueprintIDs removes the "blueprints" edge to Blueprint entities by IDs.
func (vpu *VirtualizationProviderUpdate) RemoveBlueprintIDs(ids ...uuid.UUID) *VirtualizationProviderUpdate {
	vpu.mutation.RemoveBlueprintIDs(ids...)
	return vpu
}

// RemoveBlueprints removes "blueprints" edges to Blueprint entities.
func (vpu *VirtualizationProviderUpdate) RemoveBlueprints(b ...*Blueprint) *VirtualizationProviderUpdate {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return vpu.RemoveBlueprintIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (vpu *VirtualizationProviderUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, vpu.sqlSave, vpu.mutation, vpu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vpu *VirtualizationProviderUpdate) SaveX(ctx context.Context) int {
	affected, err := vpu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (vpu *VirtualizationProviderUpdate) Exec(ctx context.Context) error {
	_, err := vpu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vpu *VirtualizationProviderUpdate) ExecX(ctx context.Context) {
	if err := vpu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (vpu *VirtualizationProviderUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(virtualizationprovider.Table, virtualizationprovider.Columns, sqlgraph.NewFieldSpec(virtualizationprovider.FieldID, field.TypeUUID))
	if ps := vpu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vpu.mutation.DisplayName(); ok {
		_spec.SetField(virtualizationprovider.FieldDisplayName, field.TypeString, value)
	}
	if value, ok := vpu.mutation.ProviderGitURL(); ok {
		_spec.SetField(virtualizationprovider.FieldProviderGitURL, field.TypeString, value)
	}
	if value, ok := vpu.mutation.ProviderVersion(); ok {
		_spec.SetField(virtualizationprovider.FieldProviderVersion, field.TypeString, value)
	}
	if value, ok := vpu.mutation.ConfigBytes(); ok {
		_spec.SetField(virtualizationprovider.FieldConfigBytes, field.TypeBytes, value)
	}
	if value, ok := vpu.mutation.IsLoaded(); ok {
		_spec.SetField(virtualizationprovider.FieldIsLoaded, field.TypeBool, value)
	}
	if vpu.mutation.BlueprintsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   virtualizationprovider.BlueprintsTable,
			Columns: []string{virtualizationprovider.BlueprintsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blueprint.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vpu.mutation.RemovedBlueprintsIDs(); len(nodes) > 0 && !vpu.mutation.BlueprintsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   virtualizationprovider.BlueprintsTable,
			Columns: []string{virtualizationprovider.BlueprintsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blueprint.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vpu.mutation.BlueprintsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   virtualizationprovider.BlueprintsTable,
			Columns: []string{virtualizationprovider.BlueprintsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blueprint.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, vpu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{virtualizationprovider.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	vpu.mutation.done = true
	return n, nil
}

// VirtualizationProviderUpdateOne is the builder for updating a single VirtualizationProvider entity.
type VirtualizationProviderUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *VirtualizationProviderMutation
}

// SetDisplayName sets the "display_name" field.
func (vpuo *VirtualizationProviderUpdateOne) SetDisplayName(s string) *VirtualizationProviderUpdateOne {
	vpuo.mutation.SetDisplayName(s)
	return vpuo
}

// SetProviderGitURL sets the "provider_git_url" field.
func (vpuo *VirtualizationProviderUpdateOne) SetProviderGitURL(s string) *VirtualizationProviderUpdateOne {
	vpuo.mutation.SetProviderGitURL(s)
	return vpuo
}

// SetProviderVersion sets the "provider_version" field.
func (vpuo *VirtualizationProviderUpdateOne) SetProviderVersion(s string) *VirtualizationProviderUpdateOne {
	vpuo.mutation.SetProviderVersion(s)
	return vpuo
}

// SetConfigBytes sets the "config_bytes" field.
func (vpuo *VirtualizationProviderUpdateOne) SetConfigBytes(b []byte) *VirtualizationProviderUpdateOne {
	vpuo.mutation.SetConfigBytes(b)
	return vpuo
}

// SetIsLoaded sets the "is_loaded" field.
func (vpuo *VirtualizationProviderUpdateOne) SetIsLoaded(b bool) *VirtualizationProviderUpdateOne {
	vpuo.mutation.SetIsLoaded(b)
	return vpuo
}

// SetNillableIsLoaded sets the "is_loaded" field if the given value is not nil.
func (vpuo *VirtualizationProviderUpdateOne) SetNillableIsLoaded(b *bool) *VirtualizationProviderUpdateOne {
	if b != nil {
		vpuo.SetIsLoaded(*b)
	}
	return vpuo
}

// AddBlueprintIDs adds the "blueprints" edge to the Blueprint entity by IDs.
func (vpuo *VirtualizationProviderUpdateOne) AddBlueprintIDs(ids ...uuid.UUID) *VirtualizationProviderUpdateOne {
	vpuo.mutation.AddBlueprintIDs(ids...)
	return vpuo
}

// AddBlueprints adds the "blueprints" edges to the Blueprint entity.
func (vpuo *VirtualizationProviderUpdateOne) AddBlueprints(b ...*Blueprint) *VirtualizationProviderUpdateOne {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return vpuo.AddBlueprintIDs(ids...)
}

// Mutation returns the VirtualizationProviderMutation object of the builder.
func (vpuo *VirtualizationProviderUpdateOne) Mutation() *VirtualizationProviderMutation {
	return vpuo.mutation
}

// ClearBlueprints clears all "blueprints" edges to the Blueprint entity.
func (vpuo *VirtualizationProviderUpdateOne) ClearBlueprints() *VirtualizationProviderUpdateOne {
	vpuo.mutation.ClearBlueprints()
	return vpuo
}

// RemoveBlueprintIDs removes the "blueprints" edge to Blueprint entities by IDs.
func (vpuo *VirtualizationProviderUpdateOne) RemoveBlueprintIDs(ids ...uuid.UUID) *VirtualizationProviderUpdateOne {
	vpuo.mutation.RemoveBlueprintIDs(ids...)
	return vpuo
}

// RemoveBlueprints removes "blueprints" edges to Blueprint entities.
func (vpuo *VirtualizationProviderUpdateOne) RemoveBlueprints(b ...*Blueprint) *VirtualizationProviderUpdateOne {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return vpuo.RemoveBlueprintIDs(ids...)
}

// Where appends a list predicates to the VirtualizationProviderUpdate builder.
func (vpuo *VirtualizationProviderUpdateOne) Where(ps ...predicate.VirtualizationProvider) *VirtualizationProviderUpdateOne {
	vpuo.mutation.Where(ps...)
	return vpuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (vpuo *VirtualizationProviderUpdateOne) Select(field string, fields ...string) *VirtualizationProviderUpdateOne {
	vpuo.fields = append([]string{field}, fields...)
	return vpuo
}

// Save executes the query and returns the updated VirtualizationProvider entity.
func (vpuo *VirtualizationProviderUpdateOne) Save(ctx context.Context) (*VirtualizationProvider, error) {
	return withHooks(ctx, vpuo.sqlSave, vpuo.mutation, vpuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vpuo *VirtualizationProviderUpdateOne) SaveX(ctx context.Context) *VirtualizationProvider {
	node, err := vpuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (vpuo *VirtualizationProviderUpdateOne) Exec(ctx context.Context) error {
	_, err := vpuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vpuo *VirtualizationProviderUpdateOne) ExecX(ctx context.Context) {
	if err := vpuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (vpuo *VirtualizationProviderUpdateOne) sqlSave(ctx context.Context) (_node *VirtualizationProvider, err error) {
	_spec := sqlgraph.NewUpdateSpec(virtualizationprovider.Table, virtualizationprovider.Columns, sqlgraph.NewFieldSpec(virtualizationprovider.FieldID, field.TypeUUID))
	id, ok := vpuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "VirtualizationProvider.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := vpuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, virtualizationprovider.FieldID)
		for _, f := range fields {
			if !virtualizationprovider.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != virtualizationprovider.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := vpuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vpuo.mutation.DisplayName(); ok {
		_spec.SetField(virtualizationprovider.FieldDisplayName, field.TypeString, value)
	}
	if value, ok := vpuo.mutation.ProviderGitURL(); ok {
		_spec.SetField(virtualizationprovider.FieldProviderGitURL, field.TypeString, value)
	}
	if value, ok := vpuo.mutation.ProviderVersion(); ok {
		_spec.SetField(virtualizationprovider.FieldProviderVersion, field.TypeString, value)
	}
	if value, ok := vpuo.mutation.ConfigBytes(); ok {
		_spec.SetField(virtualizationprovider.FieldConfigBytes, field.TypeBytes, value)
	}
	if value, ok := vpuo.mutation.IsLoaded(); ok {
		_spec.SetField(virtualizationprovider.FieldIsLoaded, field.TypeBool, value)
	}
	if vpuo.mutation.BlueprintsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   virtualizationprovider.BlueprintsTable,
			Columns: []string{virtualizationprovider.BlueprintsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blueprint.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vpuo.mutation.RemovedBlueprintsIDs(); len(nodes) > 0 && !vpuo.mutation.BlueprintsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   virtualizationprovider.BlueprintsTable,
			Columns: []string{virtualizationprovider.BlueprintsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blueprint.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vpuo.mutation.BlueprintsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   virtualizationprovider.BlueprintsTable,
			Columns: []string{virtualizationprovider.BlueprintsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blueprint.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &VirtualizationProvider{config: vpuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, vpuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{virtualizationprovider.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	vpuo.mutation.done = true
	return _node, nil
}
